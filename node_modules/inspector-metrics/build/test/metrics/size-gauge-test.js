"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
require("reflect-metadata");
require("source-map-support/register");
const chai = require("chai");
const mocha_typescript_1 = require("mocha-typescript");
const size_gauge_1 = require("../../lib/metrics/size-gauge");
const expect = chai.expect;
let SizeGaugeTest = class SizeGaugeTest {
    "check length attribute"() {
        const arr = [];
        const gauge = new size_gauge_1.SizeGauge("length-attribute", arr);
        expect(gauge.getValue()).to.equal(0);
        arr.push("test");
        expect(gauge.getValue()).to.equal(1);
        arr.splice(0, 1);
        expect(gauge.getValue()).to.equal(0);
    }
    "check length method"() {
        const arr = [];
        const gauge = new size_gauge_1.SizeGauge("length-method", {
            size: () => arr.length,
        });
        expect(gauge.getValue()).to.equal(0);
        arr.push("test");
        expect(gauge.getValue()).to.equal(1);
        arr.splice(0, 1);
        expect(gauge.getValue()).to.equal(0);
    }
    "check size attribute"() {
        const map = new Map();
        const gauge = new size_gauge_1.SizeGauge("size-attribute", map);
        expect(gauge.getValue()).to.equal(0);
        map.set("key", "value");
        expect(gauge.getValue()).to.equal(1);
        map.delete("key");
        expect(gauge.getValue()).to.equal(0);
    }
    "check size method"() {
        const map = new Map();
        const gauge = new size_gauge_1.SizeGauge("size-method", {
            size: () => map.size,
        });
        expect(gauge.getValue()).to.equal(0);
        map.set("key", "value");
        expect(gauge.getValue()).to.equal(1);
        map.delete("key");
        expect(gauge.getValue()).to.equal(0);
    }
};
__decorate([
    mocha_typescript_1.test,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], SizeGaugeTest.prototype, "check length attribute", null);
__decorate([
    mocha_typescript_1.test,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], SizeGaugeTest.prototype, "check length method", null);
__decorate([
    mocha_typescript_1.test,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], SizeGaugeTest.prototype, "check size attribute", null);
__decorate([
    mocha_typescript_1.test,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], SizeGaugeTest.prototype, "check size method", null);
SizeGaugeTest = __decorate([
    mocha_typescript_1.suite
], SizeGaugeTest);
exports.SizeGaugeTest = SizeGaugeTest;
//# sourceMappingURL=size-gauge-test.js.map