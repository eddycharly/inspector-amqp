"use strict";
/* tslint:disable:no-unused-expression */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
require("reflect-metadata");
require("source-map-support/register");
const chai = require("chai");
const mocha_typescript_1 = require("mocha-typescript");
const reservoir_1 = require("../../lib/metrics/reservoir");
const expect = chai.expect;
let DefaultReservoirTest = class DefaultReservoirTest {
    "check correct size"() {
        const reservoir = new reservoir_1.DefaultReservoir(2);
        expect(reservoir.size()).to.equal(0);
        reservoir.update(1);
        expect(reservoir.size()).to.equal(1);
        reservoir.update(1);
        expect(reservoir.size()).to.equal(2);
    }
    "check snapshot from no values"() {
        const reservoir = new reservoir_1.DefaultReservoir(2);
        expect(reservoir.size()).to.equal(0);
        const snapshot = reservoir.snapshot();
        expect(snapshot.get75thPercentile()).to.equal(0);
        expect(snapshot.get95thPercentile()).to.equal(0);
        expect(snapshot.get98thPercentile()).to.equal(0);
        expect(snapshot.get999thPercentile()).to.equal(0);
        expect(snapshot.get99thPercentile()).to.equal(0);
        expect(snapshot.getMax()).to.be.undefined;
        expect(snapshot.getMean()).to.equal(0);
        expect(snapshot.getMedian()).to.equal(0);
        expect(snapshot.getMin()).to.be.undefined;
        expect(snapshot.getStdDev()).to.equal(0);
        expect(snapshot.size()).to.equal(0);
    }
    "check snapshot from one value"() {
        const reservoir = new reservoir_1.DefaultReservoir(2);
        expect(reservoir.size()).to.equal(0);
        reservoir.update(1);
        expect(reservoir.size()).to.equal(1);
        const snapshot = reservoir.snapshot();
        expect(snapshot.get75thPercentile()).to.equal(1);
        expect(snapshot.get95thPercentile()).to.equal(1);
        expect(snapshot.get98thPercentile()).to.equal(1);
        expect(snapshot.get999thPercentile()).to.equal(1);
        expect(snapshot.get99thPercentile()).to.equal(1);
        expect(snapshot.getMax()).to.equal(1);
        expect(snapshot.getMean()).to.equal(1);
        expect(snapshot.getMedian()).to.equal(1);
        expect(snapshot.getMin()).to.equal(1);
        expect(snapshot.getStdDev()).to.be.NaN;
        expect(snapshot.size()).to.equal(1);
    }
    "check snapshot from same value twice"() {
        const reservoir = new reservoir_1.DefaultReservoir(2);
        expect(reservoir.size()).to.equal(0);
        reservoir.update(1);
        expect(reservoir.size()).to.equal(1);
        reservoir.update(1);
        expect(reservoir.size()).to.equal(2);
        const snapshot = reservoir.snapshot();
        expect(snapshot.get75thPercentile()).to.equal(1);
        expect(snapshot.get95thPercentile()).to.equal(1);
        expect(snapshot.get98thPercentile()).to.equal(1);
        expect(snapshot.get999thPercentile()).to.equal(1);
        expect(snapshot.get99thPercentile()).to.equal(1);
        expect(snapshot.getMax()).to.equal(1);
        expect(snapshot.getMean()).to.equal(1);
        expect(snapshot.getMedian()).to.equal(1);
        expect(snapshot.getMin()).to.equal(1);
        expect(snapshot.getStdDev()).to.equal(0);
        expect(snapshot.size()).to.equal(2);
    }
    "check snapshot from same value twice with fluent interface"() {
        const reservoir = new reservoir_1.DefaultReservoir(2);
        expect(reservoir.size()).to.equal(0);
        reservoir
            .update(1)
            .update(1);
        expect(reservoir.size()).to.equal(2);
        const snapshot = reservoir.snapshot();
        expect(snapshot.get75thPercentile()).to.equal(1);
        expect(snapshot.get95thPercentile()).to.equal(1);
        expect(snapshot.get98thPercentile()).to.equal(1);
        expect(snapshot.get999thPercentile()).to.equal(1);
        expect(snapshot.get99thPercentile()).to.equal(1);
        expect(snapshot.getMax()).to.equal(1);
        expect(snapshot.getMean()).to.equal(1);
        expect(snapshot.getMedian()).to.equal(1);
        expect(snapshot.getMin()).to.equal(1);
        expect(snapshot.getStdDev()).to.equal(0);
        expect(snapshot.size()).to.equal(2);
    }
    "check snapshot from different values"() {
        const reservoir = new reservoir_1.DefaultReservoir(2);
        expect(reservoir.size()).to.equal(0);
        reservoir.update(1);
        expect(reservoir.size()).to.equal(1);
        reservoir.update(3);
        expect(reservoir.size()).to.equal(2);
        const snapshot = reservoir.snapshot();
        expect(snapshot.get75thPercentile()).to.equal(3);
        expect(snapshot.get95thPercentile()).to.equal(3);
        expect(snapshot.get98thPercentile()).to.equal(3);
        expect(snapshot.get999thPercentile()).to.equal(3);
        expect(snapshot.get99thPercentile()).to.equal(3);
        expect(snapshot.getMax()).to.equal(3);
        expect(snapshot.getMean()).to.equal(2);
        expect(snapshot.getMedian()).to.equal(3);
        expect(snapshot.getMin()).to.equal(1);
        expect(snapshot.getStdDev()).to.equal(Math.sqrt(2));
        expect(snapshot.size()).to.equal(2);
    }
    "check snapshot from same value more times than capacity"() {
        const reservoir = new reservoir_1.DefaultReservoir(2);
        expect(reservoir.size()).to.equal(0);
        reservoir.update(1);
        expect(reservoir.size()).to.equal(1);
        reservoir.update(1);
        expect(reservoir.size()).to.equal(2);
        reservoir.update(1);
        expect(reservoir.size()).to.equal(2);
        const snapshot = reservoir.snapshot();
        expect(snapshot.get75thPercentile()).to.equal(1);
        expect(snapshot.get95thPercentile()).to.equal(1);
        expect(snapshot.get98thPercentile()).to.equal(1);
        expect(snapshot.get999thPercentile()).to.equal(1);
        expect(snapshot.get99thPercentile()).to.equal(1);
        expect(snapshot.getMax()).to.equal(1);
        expect(snapshot.getMean()).to.equal(1);
        expect(snapshot.getMedian()).to.equal(1);
        expect(snapshot.getMin()).to.equal(1);
        expect(snapshot.getStdDev()).to.equal(0);
        expect(snapshot.size()).to.equal(2);
    }
    "check snapshot from same value more times than capacity with fluent interface"() {
        const reservoir = new reservoir_1.DefaultReservoir(2);
        expect(reservoir.size()).to.equal(0);
        reservoir
            .update(1)
            .update(1)
            .update(1);
        expect(reservoir.size()).to.equal(2);
        const snapshot = reservoir.snapshot();
        expect(snapshot.get75thPercentile()).to.equal(1);
        expect(snapshot.get95thPercentile()).to.equal(1);
        expect(snapshot.get98thPercentile()).to.equal(1);
        expect(snapshot.get999thPercentile()).to.equal(1);
        expect(snapshot.get99thPercentile()).to.equal(1);
        expect(snapshot.getMax()).to.equal(1);
        expect(snapshot.getMean()).to.equal(1);
        expect(snapshot.getMedian()).to.equal(1);
        expect(snapshot.getMin()).to.equal(1);
        expect(snapshot.getStdDev()).to.equal(0);
        expect(snapshot.size()).to.equal(2);
    }
    "check snapshot from different values - overloading capacity"() {
        const reservoir = new reservoir_1.DefaultReservoir(2);
        expect(reservoir.size()).to.equal(0);
        reservoir.update(1);
        expect(reservoir.size()).to.equal(1);
        reservoir.update(3);
        expect(reservoir.size()).to.equal(2);
        const snapshot1 = reservoir.snapshot();
        expect(snapshot1.get75thPercentile()).to.equal(3);
        expect(snapshot1.get95thPercentile()).to.equal(3);
        expect(snapshot1.get98thPercentile()).to.equal(3);
        expect(snapshot1.get999thPercentile()).to.equal(3);
        expect(snapshot1.get99thPercentile()).to.equal(3);
        expect(snapshot1.getMax()).to.equal(3);
        expect(snapshot1.getMean()).to.equal(2);
        expect(snapshot1.getMedian()).to.equal(3);
        expect(snapshot1.getMin()).to.equal(1);
        expect(snapshot1.getStdDev()).to.equal(Math.sqrt(2));
        expect(snapshot1.size()).to.equal(2);
        reservoir.update(5);
        expect(reservoir.size()).to.equal(2);
        const snapshot2 = reservoir.snapshot();
        expect(snapshot2.get75thPercentile()).to.equal(5);
        expect(snapshot2.get95thPercentile()).to.equal(5);
        expect(snapshot2.get98thPercentile()).to.equal(5);
        expect(snapshot2.get999thPercentile()).to.equal(5);
        expect(snapshot2.get99thPercentile()).to.equal(5);
        expect(snapshot2.getMax()).to.equal(5);
        expect(snapshot2.getMean()).to.be.gte(3);
        expect(snapshot2.getMedian()).to.be.gte(3);
        expect(snapshot2.getMin()).to.be.gte(1);
        expect(snapshot2.getStdDev()).to.be.gte(Math.sqrt(2));
        expect(snapshot2.size()).to.equal(2);
    }
};
__decorate([
    mocha_typescript_1.test,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], DefaultReservoirTest.prototype, "check correct size", null);
__decorate([
    mocha_typescript_1.test,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], DefaultReservoirTest.prototype, "check snapshot from no values", null);
__decorate([
    mocha_typescript_1.test,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], DefaultReservoirTest.prototype, "check snapshot from one value", null);
__decorate([
    mocha_typescript_1.test,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], DefaultReservoirTest.prototype, "check snapshot from same value twice", null);
__decorate([
    mocha_typescript_1.test,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], DefaultReservoirTest.prototype, "check snapshot from same value twice with fluent interface", null);
__decorate([
    mocha_typescript_1.test,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], DefaultReservoirTest.prototype, "check snapshot from different values", null);
__decorate([
    mocha_typescript_1.test,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], DefaultReservoirTest.prototype, "check snapshot from same value more times than capacity", null);
__decorate([
    mocha_typescript_1.test,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], DefaultReservoirTest.prototype, "check snapshot from same value more times than capacity with fluent interface", null);
__decorate([
    mocha_typescript_1.test,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], DefaultReservoirTest.prototype, "check snapshot from different values - overloading capacity", null);
DefaultReservoirTest = __decorate([
    mocha_typescript_1.suite
], DefaultReservoirTest);
exports.DefaultReservoirTest = DefaultReservoirTest;
let SlidingWindowReservoirTest = class SlidingWindowReservoirTest {
    "check correct size"() {
        const reservoir = new reservoir_1.SlidingWindowReservoir(2);
        expect(reservoir.size()).to.equal(0);
        reservoir.update(1);
        expect(reservoir.size()).to.equal(1);
        reservoir.update(1);
        expect(reservoir.size()).to.equal(2);
    }
    "check correct size with fluent interface"() {
        const reservoir = new reservoir_1.SlidingWindowReservoir(2);
        expect(reservoir.size()).to.equal(0);
        reservoir
            .update(1)
            .update(1);
        expect(reservoir.size()).to.equal(2);
    }
    "check snapshot from no values"() {
        const reservoir = new reservoir_1.SlidingWindowReservoir(2);
        expect(reservoir.size()).to.equal(0);
        const snapshot = reservoir.snapshot();
        expect(snapshot.get75thPercentile()).to.equal(0);
        expect(snapshot.get95thPercentile()).to.equal(0);
        expect(snapshot.get98thPercentile()).to.equal(0);
        expect(snapshot.get999thPercentile()).to.equal(0);
        expect(snapshot.get99thPercentile()).to.equal(0);
        expect(snapshot.getMax()).to.be.undefined;
        expect(snapshot.getMean()).to.equal(0);
        expect(snapshot.getMedian()).to.equal(0);
        expect(snapshot.getMin()).to.be.undefined;
        expect(snapshot.getStdDev()).to.equal(0);
        expect(snapshot.size()).to.equal(0);
    }
    "check snapshot from one value"() {
        const reservoir = new reservoir_1.SlidingWindowReservoir(2);
        expect(reservoir.size()).to.equal(0);
        reservoir.update(1);
        expect(reservoir.size()).to.equal(1);
        const snapshot = reservoir.snapshot();
        expect(snapshot.get75thPercentile()).to.equal(1);
        expect(snapshot.get95thPercentile()).to.equal(1);
        expect(snapshot.get98thPercentile()).to.equal(1);
        expect(snapshot.get999thPercentile()).to.equal(1);
        expect(snapshot.get99thPercentile()).to.equal(1);
        expect(snapshot.getMax()).to.equal(1);
        expect(snapshot.getMean()).to.equal(1);
        expect(snapshot.getMedian()).to.equal(1);
        expect(snapshot.getMin()).to.equal(1);
        expect(snapshot.getStdDev()).to.be.NaN;
        expect(snapshot.size()).to.equal(1);
    }
    "check snapshot from same value twice"() {
        const reservoir = new reservoir_1.SlidingWindowReservoir(2);
        expect(reservoir.size()).to.equal(0);
        reservoir.update(1);
        expect(reservoir.size()).to.equal(1);
        reservoir.update(1);
        expect(reservoir.size()).to.equal(2);
        const snapshot = reservoir.snapshot();
        expect(snapshot.get75thPercentile()).to.equal(1);
        expect(snapshot.get95thPercentile()).to.equal(1);
        expect(snapshot.get98thPercentile()).to.equal(1);
        expect(snapshot.get999thPercentile()).to.equal(1);
        expect(snapshot.get99thPercentile()).to.equal(1);
        expect(snapshot.getMax()).to.equal(1);
        expect(snapshot.getMean()).to.equal(1);
        expect(snapshot.getMedian()).to.equal(1);
        expect(snapshot.getMin()).to.equal(1);
        expect(snapshot.getStdDev()).to.equal(0);
        expect(snapshot.size()).to.equal(2);
    }
    "check snapshot from same value twice with fluent interface"() {
        const reservoir = new reservoir_1.SlidingWindowReservoir(2);
        expect(reservoir.size()).to.equal(0);
        reservoir
            .update(1)
            .update(1);
        expect(reservoir.size()).to.equal(2);
        const snapshot = reservoir.snapshot();
        expect(snapshot.get75thPercentile()).to.equal(1);
        expect(snapshot.get95thPercentile()).to.equal(1);
        expect(snapshot.get98thPercentile()).to.equal(1);
        expect(snapshot.get999thPercentile()).to.equal(1);
        expect(snapshot.get99thPercentile()).to.equal(1);
        expect(snapshot.getMax()).to.equal(1);
        expect(snapshot.getMean()).to.equal(1);
        expect(snapshot.getMedian()).to.equal(1);
        expect(snapshot.getMin()).to.equal(1);
        expect(snapshot.getStdDev()).to.equal(0);
        expect(snapshot.size()).to.equal(2);
    }
    "check snapshot from different values"() {
        const reservoir = new reservoir_1.SlidingWindowReservoir(2);
        expect(reservoir.size()).to.equal(0);
        reservoir.update(1);
        expect(reservoir.size()).to.equal(1);
        reservoir.update(3);
        expect(reservoir.size()).to.equal(2);
        const snapshot = reservoir.snapshot();
        expect(snapshot.get75thPercentile()).to.equal(3);
        expect(snapshot.get95thPercentile()).to.equal(3);
        expect(snapshot.get98thPercentile()).to.equal(3);
        expect(snapshot.get999thPercentile()).to.equal(3);
        expect(snapshot.get99thPercentile()).to.equal(3);
        expect(snapshot.getMax()).to.equal(3);
        expect(snapshot.getMean()).to.equal(2);
        expect(snapshot.getMedian()).to.equal(3);
        expect(snapshot.getMin()).to.equal(1);
        expect(snapshot.getStdDev()).to.equal(Math.sqrt(2));
        expect(snapshot.size()).to.equal(2);
    }
    "check snapshot from same value more times than capacity"() {
        const reservoir = new reservoir_1.SlidingWindowReservoir(2);
        expect(reservoir.size()).to.equal(0);
        reservoir.update(1);
        expect(reservoir.size()).to.equal(1);
        reservoir.update(1);
        expect(reservoir.size()).to.equal(2);
        reservoir.update(1);
        expect(reservoir.size()).to.equal(2);
        const snapshot = reservoir.snapshot();
        expect(snapshot.get75thPercentile()).to.equal(1);
        expect(snapshot.get95thPercentile()).to.equal(1);
        expect(snapshot.get98thPercentile()).to.equal(1);
        expect(snapshot.get999thPercentile()).to.equal(1);
        expect(snapshot.get99thPercentile()).to.equal(1);
        expect(snapshot.getMax()).to.equal(1);
        expect(snapshot.getMean()).to.equal(1);
        expect(snapshot.getMedian()).to.equal(1);
        expect(snapshot.getMin()).to.equal(1);
        expect(snapshot.getStdDev()).to.equal(0);
        expect(snapshot.size()).to.equal(2);
    }
    "check snapshot from same value more times than capacity with fluent interface"() {
        const reservoir = new reservoir_1.SlidingWindowReservoir(2);
        expect(reservoir.size()).to.equal(0);
        reservoir
            .update(1)
            .update(1)
            .update(1);
        expect(reservoir.size()).to.equal(2);
        const snapshot = reservoir.snapshot();
        expect(snapshot.get75thPercentile()).to.equal(1);
        expect(snapshot.get95thPercentile()).to.equal(1);
        expect(snapshot.get98thPercentile()).to.equal(1);
        expect(snapshot.get999thPercentile()).to.equal(1);
        expect(snapshot.get99thPercentile()).to.equal(1);
        expect(snapshot.getMax()).to.equal(1);
        expect(snapshot.getMean()).to.equal(1);
        expect(snapshot.getMedian()).to.equal(1);
        expect(snapshot.getMin()).to.equal(1);
        expect(snapshot.getStdDev()).to.equal(0);
        expect(snapshot.size()).to.equal(2);
    }
    "check snapshot from different values - overloading capacity"() {
        const reservoir = new reservoir_1.SlidingWindowReservoir(2);
        expect(reservoir.size()).to.equal(0);
        reservoir.update(1);
        expect(reservoir.size()).to.equal(1);
        reservoir.update(3);
        expect(reservoir.size()).to.equal(2);
        const snapshot1 = reservoir.snapshot();
        expect(snapshot1.get75thPercentile()).to.equal(3);
        expect(snapshot1.get95thPercentile()).to.equal(3);
        expect(snapshot1.get98thPercentile()).to.equal(3);
        expect(snapshot1.get999thPercentile()).to.equal(3);
        expect(snapshot1.get99thPercentile()).to.equal(3);
        expect(snapshot1.getMax()).to.equal(3);
        expect(snapshot1.getMean()).to.equal(2);
        expect(snapshot1.getMedian()).to.equal(3);
        expect(snapshot1.getMin()).to.equal(1);
        expect(snapshot1.getStdDev()).to.equal(Math.sqrt(2));
        expect(snapshot1.size()).to.equal(2);
        reservoir.update(5);
        expect(reservoir.size()).to.equal(2);
        const snapshot2 = reservoir.snapshot();
        expect(snapshot2.get75thPercentile()).to.equal(5);
        expect(snapshot2.get95thPercentile()).to.equal(5);
        expect(snapshot2.get98thPercentile()).to.equal(5);
        expect(snapshot2.get999thPercentile()).to.equal(5);
        expect(snapshot2.get99thPercentile()).to.equal(5);
        expect(snapshot2.getMax()).to.equal(5);
        expect(snapshot2.getMean()).to.equal(4);
        expect(snapshot2.getMedian()).to.equal(5);
        expect(snapshot2.getMin()).to.equal(3);
        expect(snapshot2.getStdDev()).to.equal(Math.sqrt(2));
        expect(snapshot2.size()).to.equal(2);
    }
};
__decorate([
    mocha_typescript_1.test,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], SlidingWindowReservoirTest.prototype, "check correct size", null);
__decorate([
    mocha_typescript_1.test,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], SlidingWindowReservoirTest.prototype, "check correct size with fluent interface", null);
__decorate([
    mocha_typescript_1.test,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], SlidingWindowReservoirTest.prototype, "check snapshot from no values", null);
__decorate([
    mocha_typescript_1.test,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], SlidingWindowReservoirTest.prototype, "check snapshot from one value", null);
__decorate([
    mocha_typescript_1.test,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], SlidingWindowReservoirTest.prototype, "check snapshot from same value twice", null);
__decorate([
    mocha_typescript_1.test,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], SlidingWindowReservoirTest.prototype, "check snapshot from same value twice with fluent interface", null);
__decorate([
    mocha_typescript_1.test,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], SlidingWindowReservoirTest.prototype, "check snapshot from different values", null);
__decorate([
    mocha_typescript_1.test,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], SlidingWindowReservoirTest.prototype, "check snapshot from same value more times than capacity", null);
__decorate([
    mocha_typescript_1.test,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], SlidingWindowReservoirTest.prototype, "check snapshot from same value more times than capacity with fluent interface", null);
__decorate([
    mocha_typescript_1.test,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], SlidingWindowReservoirTest.prototype, "check snapshot from different values - overloading capacity", null);
SlidingWindowReservoirTest = __decorate([
    mocha_typescript_1.suite
], SlidingWindowReservoirTest);
exports.SlidingWindowReservoirTest = SlidingWindowReservoirTest;
//# sourceMappingURL=reservoir-test.js.map