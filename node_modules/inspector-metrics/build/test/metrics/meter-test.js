"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
// tslint:disable:no-unused-expression
require("reflect-metadata");
require("source-map-support/register");
const chai = require("chai");
const mocha_typescript_1 = require("mocha-typescript");
const meter_1 = require("../../lib/metrics/meter");
const mocked_clock_1 = require("./mocked-clock");
const expect = chai.expect;
let MeterTest = class MeterTest {
    constructor() {
        this.clock = new mocked_clock_1.MockedClock();
    }
    "check name and description"() {
        let meter = new meter_1.Meter(this.clock, 1);
        expect(meter.getName()).to.be.undefined;
        expect(meter.getDescription()).to.be.undefined;
        meter = new meter_1.Meter(this.clock, 1, "meter-name");
        expect(meter.getName()).to.equal("meter-name");
        expect(meter.getDescription()).to.be.undefined;
        meter = new meter_1.Meter(this.clock, 1, "meter-name", "meter-description");
        expect(meter.getName()).to.equal("meter-name");
        expect(meter.getDescription()).to.equal("meter-description");
    }
    "single mark and check rates with no tick"() {
        this.clock.setCurrentTime({
            milliseconds: 0,
            nanoseconds: 0,
        });
        const meter = new meter_1.Meter(this.clock, 1);
        expect(meter.getCount()).to.equal(0);
        expect(meter.getMeanRate()).to.equal(0);
        expect(meter.get1MinuteRate()).to.equal(0);
        expect(meter.get5MinuteRate()).to.equal(0);
        expect(meter.get15MinuteRate()).to.equal(0);
        meter.mark(1);
        expect(meter.getCount()).to.equal(1);
        expect(meter.getMeanRate()).to.equal(Infinity);
        expect(meter.get1MinuteRate()).to.equal(0);
        expect(meter.get5MinuteRate()).to.equal(0);
        expect(meter.get15MinuteRate()).to.equal(0);
    }
    "mark using fluent interface"() {
        this.clock.setCurrentTime({
            milliseconds: 0,
            nanoseconds: 0,
        });
        const meter = new meter_1.Meter(this.clock, 1);
        expect(meter.getCount()).to.equal(0);
        expect(meter.getMeanRate()).to.equal(0);
        expect(meter.get1MinuteRate()).to.equal(0);
        expect(meter.get5MinuteRate()).to.equal(0);
        expect(meter.get15MinuteRate()).to.equal(0);
        meter
            .mark(1)
            .mark(2)
            .mark(3)
            .mark(4);
        expect(meter.getCount()).to.equal(10);
        expect(meter.getMeanRate()).to.equal(Infinity);
        expect(meter.get1MinuteRate()).to.equal(0);
        expect(meter.get5MinuteRate()).to.equal(0);
        expect(meter.get15MinuteRate()).to.equal(0);
    }
    "mark and tick and check rates"() {
        this.clock.setCurrentTime({
            milliseconds: 0,
            nanoseconds: 0,
        });
        const meter = new meter_1.Meter(this.clock, 1);
        expect(meter.getCount()).to.equal(0);
        expect(meter.getMeanRate()).to.equal(0);
        expect(meter.get1MinuteRate()).to.equal(0);
        expect(meter.get5MinuteRate()).to.equal(0);
        expect(meter.get15MinuteRate()).to.equal(0);
        meter.mark(1);
        this.clock.setCurrentTime({
            milliseconds: 1001,
            nanoseconds: 0,
        });
        expect(meter.getCount()).to.equal(1);
        expect(meter.getMeanRate()).to.be.lessThan(1);
        expect(meter.get1MinuteRate()).to.be.equal(1);
        expect(meter.get5MinuteRate()).to.be.equal(1);
        expect(meter.get15MinuteRate()).to.be.equal(1);
    }
    "multi mark and tick and check rates"() {
        this.clock.setCurrentTime({
            milliseconds: 0,
            nanoseconds: 0,
        });
        const meter = new meter_1.Meter(this.clock, 1);
        expect(meter.getCount()).to.equal(0);
        expect(meter.getMeanRate()).to.equal(0);
        expect(meter.get1MinuteRate()).to.equal(0);
        expect(meter.get5MinuteRate()).to.equal(0);
        expect(meter.get15MinuteRate()).to.equal(0);
        meter.mark(1);
        meter.mark(3);
        meter.mark(5);
        this.clock.setCurrentTime({
            milliseconds: 1001,
            nanoseconds: 0,
        });
        expect(meter.getCount()).to.equal(9);
        expect(meter.getMeanRate()).to.be.lessThan(9);
        expect(meter.get1MinuteRate()).to.be.equal(9);
        expect(meter.get5MinuteRate()).to.be.equal(9);
        expect(meter.get15MinuteRate()).to.be.equal(9);
    }
    "mark and multi tick and check rates withing same rate-interval"() {
        this.clock.setCurrentTime({
            milliseconds: 0,
            nanoseconds: 0,
        });
        const meter = new meter_1.Meter(this.clock, 1);
        expect(meter.getCount()).to.equal(0);
        expect(meter.getMeanRate()).to.equal(0);
        expect(meter.get1MinuteRate()).to.equal(0);
        expect(meter.get5MinuteRate()).to.equal(0);
        expect(meter.get15MinuteRate()).to.equal(0);
        meter.mark(10);
        this.clock.setCurrentTime({
            milliseconds: 1001,
            nanoseconds: 0,
        });
        expect(meter.getCount()).to.equal(10);
        expect(meter.getMeanRate()).to.be.lessThan(10);
        expect(meter.get1MinuteRate()).to.be.equal(10);
        expect(meter.get5MinuteRate()).to.be.equal(10);
        expect(meter.get15MinuteRate()).to.be.equal(10);
        meter.mark(20);
        this.clock.setCurrentTime({
            milliseconds: 2001,
            nanoseconds: 0,
        });
        expect(meter.getCount()).to.equal(30);
        expect(meter.getMeanRate()).to.be.lessThan(15);
        expect(meter.getMeanRate()).to.be.greaterThan(10);
        expect(meter.get1MinuteRate()).to.be.equal(10);
        expect(meter.get5MinuteRate()).to.be.equal(10);
        expect(meter.get15MinuteRate()).to.be.equal(10);
    }
    "mark and multi tick and check rates within different rate-intervals"() {
        this.clock.setCurrentTime({
            milliseconds: 0,
            nanoseconds: 0,
        });
        const meter = new meter_1.Meter(this.clock, 1);
        expect(meter.getCount()).to.equal(0);
        expect(meter.getMeanRate()).to.equal(0);
        expect(meter.get1MinuteRate()).to.equal(0);
        expect(meter.get5MinuteRate()).to.equal(0);
        expect(meter.get15MinuteRate()).to.equal(0);
        meter.mark(10);
        this.clock.setCurrentTime({
            milliseconds: 1001,
            nanoseconds: 0,
        });
        expect(meter.getCount()).to.equal(10);
        expect(meter.getMeanRate()).to.be.lessThan(10);
        expect(meter.get1MinuteRate()).to.be.equal(10);
        expect(meter.get5MinuteRate()).to.be.equal(10);
        expect(meter.get15MinuteRate()).to.be.equal(10);
        meter.mark(80);
        this.clock.setCurrentTime({
            milliseconds: 5001,
            nanoseconds: 0,
        });
        expect(meter.getCount()).to.equal(90);
        expect(meter.getMeanRate()).to.be.lessThan(18);
        expect(meter.getMeanRate()).to.be.greaterThan(17);
        expect(meter.get1MinuteRate()).to.be.lessThan(11);
        expect(meter.get1MinuteRate()).to.be.greaterThan(10);
        expect(meter.get5MinuteRate()).to.be.lessThan(11);
        expect(meter.get5MinuteRate()).to.be.greaterThan(10);
        expect(meter.get15MinuteRate()).to.be.lessThan(11);
        expect(meter.get15MinuteRate()).to.be.greaterThan(10);
    }
};
__decorate([
    mocha_typescript_1.test,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], MeterTest.prototype, "check name and description", null);
__decorate([
    mocha_typescript_1.test,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], MeterTest.prototype, "single mark and check rates with no tick", null);
__decorate([
    mocha_typescript_1.test,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], MeterTest.prototype, "mark using fluent interface", null);
__decorate([
    mocha_typescript_1.test,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], MeterTest.prototype, "mark and tick and check rates", null);
__decorate([
    mocha_typescript_1.test,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], MeterTest.prototype, "multi mark and tick and check rates", null);
__decorate([
    mocha_typescript_1.test,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], MeterTest.prototype, "mark and multi tick and check rates withing same rate-interval", null);
__decorate([
    mocha_typescript_1.test,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], MeterTest.prototype, "mark and multi tick and check rates within different rate-intervals", null);
MeterTest = __decorate([
    mocha_typescript_1.suite
], MeterTest);
exports.MeterTest = MeterTest;
//# sourceMappingURL=meter-test.js.map