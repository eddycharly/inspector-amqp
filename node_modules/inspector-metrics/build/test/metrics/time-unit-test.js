"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
require("reflect-metadata");
require("source-map-support/register");
const chai = require("chai");
const mocha_typescript_1 = require("mocha-typescript");
const TimeUnit = require("../../lib/metrics/time-unit");
const expect = chai.expect;
let TimeUnitTest = class TimeUnitTest {
    "check time-unit conversion"() {
        expect(TimeUnit.NANOSECOND.convertTo(1, TimeUnit.NANOSECOND)).to.equal(1);
        expect(TimeUnit.MICROSECOND.convertTo(1, TimeUnit.NANOSECOND)).to.equal(1e3);
        expect(TimeUnit.MILLISECOND.convertTo(1, TimeUnit.NANOSECOND)).to.equal(1e6);
        expect(TimeUnit.SECOND.convertTo(1, TimeUnit.NANOSECOND)).to.equal(1e9);
        expect(TimeUnit.MINUTE.convertTo(1, TimeUnit.NANOSECOND)).to.equal(1e9 * 60);
        expect(TimeUnit.HOUR.convertTo(1, TimeUnit.NANOSECOND)).to.equal(1e9 * 60 * 60);
        expect(TimeUnit.DAY.convertTo(1, TimeUnit.NANOSECOND)).to.equal(1e9 * 60 * 60 * 24);
        expect(TimeUnit.NANOSECOND.convertTo(1e3, TimeUnit.MICROSECOND)).to.equal(1);
        expect(TimeUnit.NANOSECOND.convertTo(1e6, TimeUnit.MILLISECOND)).to.equal(1);
        expect(TimeUnit.NANOSECOND.convertTo(1e9, TimeUnit.SECOND)).to.equal(1);
        expect(TimeUnit.NANOSECOND.convertTo(1e9 * 60, TimeUnit.MINUTE)).to.equal(1);
        expect(TimeUnit.NANOSECOND.convertTo(1e9 * 60 * 60, TimeUnit.HOUR)).to.equal(1);
        expect(TimeUnit.NANOSECOND.convertTo(1e9 * 60 * 60 * 24, TimeUnit.DAY)).to.equal(1);
        expect(TimeUnit.NANOSECOND.convertTo(1, TimeUnit.MICROSECOND)).to.equal(1e-3);
        expect(TimeUnit.NANOSECOND.convertTo(1, TimeUnit.MILLISECOND)).to.equal(1e-6);
        expect(TimeUnit.NANOSECOND.convertTo(1, TimeUnit.SECOND)).to.equal(1e-9);
        expect(TimeUnit.NANOSECOND.getNanosecondsPerUnit()).to.equal(1);
        expect(TimeUnit.MICROSECOND.getNanosecondsPerUnit()).to.equal(1e3);
        expect(TimeUnit.MILLISECOND.getNanosecondsPerUnit()).to.equal(1e6);
        expect(TimeUnit.SECOND.getNanosecondsPerUnit()).to.equal(1e9);
        expect(TimeUnit.MINUTE.getNanosecondsPerUnit()).to.equal(1e9 * 60);
        expect(TimeUnit.HOUR.getNanosecondsPerUnit()).to.equal(1e9 * 3600);
        expect(TimeUnit.DAY.getNanosecondsPerUnit()).to.equal(1e9 * 3600 * 24);
    }
};
__decorate([
    mocha_typescript_1.test,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], TimeUnitTest.prototype, "check time-unit conversion", null);
TimeUnitTest = __decorate([
    mocha_typescript_1.suite
], TimeUnitTest);
exports.TimeUnitTest = TimeUnitTest;
//# sourceMappingURL=time-unit-test.js.map