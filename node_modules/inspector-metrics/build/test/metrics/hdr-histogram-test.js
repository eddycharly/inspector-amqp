"use strict";
/* tslint:disable:no-unused-expression */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
require("reflect-metadata");
require("source-map-support/register");
const chai = require("chai");
const mocha_typescript_1 = require("mocha-typescript");
const metrics_1 = require("../../lib/metrics");
const hdr_histogram_1 = require("../../lib/metrics/hdr-histogram");
const expect = chai.expect;
let HdrHistogramTest = class HdrHistogramTest {
    "check name and description"() {
        let histogram = new hdr_histogram_1.HdrHistogram(1, 1024, 3);
        expect(histogram.getName()).to.be.undefined;
        expect(histogram.getDescription()).to.be.undefined;
        histogram = new hdr_histogram_1.HdrHistogram(1, 1024, 3, "histogram-name");
        expect(histogram.getName()).to.equal("histogram-name");
        expect(histogram.getDescription()).to.be.undefined;
        histogram = new hdr_histogram_1.HdrHistogram(1, 1024, 3, "histogram-name", "histogram-description");
        expect(histogram.getName()).to.equal("histogram-name");
        expect(histogram.getDescription()).to.equal("histogram-description");
    }
    "simple count and get"() {
        const histogram = new hdr_histogram_1.HdrHistogram(1, 2, 3);
        expect(histogram.getCount()).to.equal(0);
        expect(histogram.getSum().toNumber()).to.equal(0);
        histogram.update(1);
        expect(histogram.getCount()).to.equal(1);
        expect(histogram.getSum().toNumber()).to.equal(1);
        histogram.update(1);
        expect(histogram.getCount()).to.equal(2);
        expect(histogram.getSum().toNumber()).to.equal(2);
        histogram.update(1);
        expect(histogram.getCount()).to.equal(3);
        expect(histogram.getSum().toNumber()).to.equal(3);
    }
    "simple count and get with fluent interface"() {
        const histogram = new hdr_histogram_1.HdrHistogram(1, 2, 3);
        expect(histogram.getCount()).to.equal(0);
        expect(histogram.getSum().toNumber()).to.equal(0);
        histogram.update(1);
        expect(histogram.getCount()).to.equal(1);
        expect(histogram.getSum().toNumber()).to.equal(1);
        histogram
            .update(1)
            .update(2)
            .update(3)
            .update(4);
        expect(histogram.getCount()).to.equal(5);
        expect(histogram.getSum().toNumber()).to.equal(11);
    }
    "update negative values"() {
        const histogram = new hdr_histogram_1.HdrHistogram(1, 33, 3);
        expect(histogram.getCount()).to.equal(0);
        expect(histogram.getSum().toNumber()).to.equal(0);
        histogram.update(10);
        expect(histogram.getCount()).to.equal(1);
        expect(histogram.getSum().toNumber()).to.equal(10);
        histogram.update(-21);
        expect(histogram.getCount()).to.equal(2);
        expect(histogram.getSum().toNumber()).to.equal(-11);
        histogram.update(33);
        expect(histogram.getCount()).to.equal(3);
        expect(histogram.getSum().toNumber()).to.equal(22);
    }
    "check snapshot from no values"() {
        const histogram = new hdr_histogram_1.HdrHistogram(1, 1024, 3);
        expect(histogram.getCount()).to.equal(0);
        expect(histogram.getSum().toNumber()).to.equal(0);
        const snapshot = histogram.getSnapshot();
        expect(snapshot.get75thPercentile()).to.equal(0);
        expect(snapshot.get95thPercentile()).to.equal(0);
        expect(snapshot.get98thPercentile()).to.equal(0);
        expect(snapshot.get999thPercentile()).to.equal(0);
        expect(snapshot.get99thPercentile()).to.equal(0);
        expect(snapshot.getMax()).to.equal(0);
        expect(snapshot.getMean()).to.equal(0);
        expect(snapshot.getMedian()).to.equal(0);
        expect(snapshot.getMin()).to.equal(9223372036854776000);
        expect(snapshot.getStdDev()).to.equal(0);
        expect(snapshot.size()).to.equal(0);
    }
    "check snapshot from one value"() {
        const histogram = new hdr_histogram_1.HdrHistogram(1, 2, 3);
        expect(histogram.getCount()).to.equal(0);
        expect(histogram.getSum().toNumber()).to.equal(0);
        histogram.update(1);
        expect(histogram.getCount()).to.equal(1);
        expect(histogram.getSum().toNumber()).to.equal(1);
        const snapshot = histogram.getSnapshot();
        expect(snapshot.get75thPercentile()).to.equal(1);
        expect(snapshot.get95thPercentile()).to.equal(1);
        expect(snapshot.get98thPercentile()).to.equal(1);
        expect(snapshot.get999thPercentile()).to.equal(1);
        expect(snapshot.get99thPercentile()).to.equal(1);
        expect(snapshot.getMax()).to.equal(1);
        expect(snapshot.getMean()).to.equal(1);
        expect(snapshot.getMedian()).to.equal(1);
        expect(snapshot.getMin()).to.equal(1);
        expect(snapshot.getStdDev()).to.equal(0);
        expect(snapshot.size()).to.equal(1);
    }
    "check snapshot from same value twice"() {
        const histogram = new hdr_histogram_1.HdrHistogram(1, 2, 3);
        expect(histogram.getCount()).to.equal(0);
        expect(histogram.getSum().toNumber()).to.equal(0);
        histogram.update(1);
        expect(histogram.getCount()).to.equal(1);
        expect(histogram.getSum().toNumber()).to.equal(1);
        histogram.update(1);
        expect(histogram.getCount()).to.equal(2);
        expect(histogram.getSum().toNumber()).to.equal(2);
        const snapshot = histogram.getSnapshot();
        expect(snapshot.get75thPercentile()).to.equal(1);
        expect(snapshot.get95thPercentile()).to.equal(1);
        expect(snapshot.get98thPercentile()).to.equal(1);
        expect(snapshot.get999thPercentile()).to.equal(1);
        expect(snapshot.get99thPercentile()).to.equal(1);
        expect(snapshot.getMax()).to.equal(1);
        expect(snapshot.getMean()).to.equal(1);
        expect(snapshot.getMedian()).to.equal(1);
        expect(snapshot.getMin()).to.equal(1);
        expect(snapshot.getStdDev()).to.equal(0);
        expect(snapshot.size()).to.equal(2);
    }
    "check snapshot from different values"() {
        const histogram = new hdr_histogram_1.HdrHistogram(1, 3, 3);
        expect(histogram.getCount()).to.equal(0);
        expect(histogram.getSum().toNumber()).to.equal(0);
        histogram.update(1);
        expect(histogram.getCount()).to.equal(1);
        expect(histogram.getSum().toNumber()).to.equal(1);
        histogram.update(3);
        expect(histogram.getCount()).to.equal(2);
        expect(histogram.getSum().toNumber()).to.equal(4);
        const snapshot = histogram.getSnapshot();
        expect(snapshot.get75thPercentile()).to.equal(3);
        expect(snapshot.get95thPercentile()).to.equal(3);
        expect(snapshot.get98thPercentile()).to.equal(3);
        expect(snapshot.get999thPercentile()).to.equal(3);
        expect(snapshot.get99thPercentile()).to.equal(3);
        expect(snapshot.getMax()).to.equal(3);
        expect(snapshot.getMean()).to.equal(2);
        expect(snapshot.getMedian()).to.equal(1);
        expect(snapshot.getMin()).to.equal(1);
        expect(snapshot.getStdDev()).to.equal(1);
        expect(snapshot.size()).to.equal(2);
    }
    "check snapshot from same value more times than capacity"() {
        const histogram = new hdr_histogram_1.HdrHistogram(1, 2, 3);
        expect(histogram.getCount()).to.equal(0);
        expect(histogram.getSum().toNumber()).to.equal(0);
        histogram.update(1);
        expect(histogram.getCount()).to.equal(1);
        expect(histogram.getSum().toNumber()).to.equal(1);
        histogram.update(1);
        expect(histogram.getCount()).to.equal(2);
        expect(histogram.getSum().toNumber()).to.equal(2);
        histogram.update(1);
        expect(histogram.getCount()).to.equal(3);
        expect(histogram.getSum().toNumber()).to.equal(3);
        const snapshot = histogram.getSnapshot();
        expect(snapshot.get75thPercentile()).to.equal(1);
        expect(snapshot.get95thPercentile()).to.equal(1);
        expect(snapshot.get98thPercentile()).to.equal(1);
        expect(snapshot.get999thPercentile()).to.equal(1);
        expect(snapshot.get99thPercentile()).to.equal(1);
        expect(snapshot.getMax()).to.equal(1);
        expect(snapshot.getMean()).to.equal(1);
        expect(snapshot.getMedian()).to.equal(1);
        expect(snapshot.getMin()).to.equal(1);
        expect(snapshot.getStdDev()).to.equal(0);
        expect(snapshot.size()).to.equal(3);
    }
    "check snapshot from different values overloading capacity"() {
        const histogram = new hdr_histogram_1.HdrHistogram(1, 5, 3);
        expect(histogram.getCount()).to.equal(0);
        expect(histogram.getSum().toNumber()).to.equal(0);
        histogram.update(1);
        expect(histogram.getCount()).to.equal(1);
        expect(histogram.getSum().toNumber()).to.equal(1);
        histogram.update(3);
        expect(histogram.getCount()).to.equal(2);
        expect(histogram.getSum().toNumber()).to.equal(4);
        const snapshot1 = histogram.getSnapshot();
        expect(snapshot1.get75thPercentile()).to.equal(3);
        expect(snapshot1.get95thPercentile()).to.equal(3);
        expect(snapshot1.get98thPercentile()).to.equal(3);
        expect(snapshot1.get999thPercentile()).to.equal(3);
        expect(snapshot1.get99thPercentile()).to.equal(3);
        expect(snapshot1.getMax()).to.equal(3);
        expect(snapshot1.getMean()).to.equal(2);
        expect(snapshot1.getMedian()).to.equal(1);
        expect(snapshot1.getMin()).to.equal(1);
        expect(snapshot1.getStdDev()).to.equal(1);
        expect(snapshot1.size()).to.equal(2);
        histogram.update(5);
        expect(histogram.getCount()).to.equal(3);
        expect(histogram.getSum().toNumber()).to.equal(9);
        const snapshot2 = histogram.getSnapshot();
        expect(snapshot2.get75thPercentile()).to.equal(3);
        expect(snapshot2.get95thPercentile()).to.equal(5);
        expect(snapshot2.get98thPercentile()).to.equal(5);
        expect(snapshot2.get999thPercentile()).to.equal(5);
        expect(snapshot2.get99thPercentile()).to.equal(5);
        expect(snapshot2.getMax()).to.equal(5);
        expect(snapshot2.getMean()).to.be.equal(3);
        expect(snapshot2.getMedian()).to.be.equal(3);
        expect(snapshot2.getMin()).to.be.equal(1);
        expect(snapshot2.getStdDev()).to.be.gt(Math.sqrt(2));
        expect(snapshot2.getStdDev()).to.be.lt(Math.sqrt(Math.E));
        expect(snapshot2.size()).to.equal(3);
    }
    "check bucket counting"() {
        const buckets = metrics_1.Buckets.linear(10, 10, 10);
        const histogram = new hdr_histogram_1.HdrHistogram(10, 1000, 3, "name", "description", buckets);
        expect(histogram.getBuckets()).to.be.equal(buckets);
        expect(histogram.getBuckets().boundaries).to.deep.equal([
            10, 20, 30, 40, 50, 60, 70, 80, 90, 100,
        ]);
        expect(histogram.getCounts()).to.satisfy((map) => map.size === 10);
        histogram.update(44);
        expect(histogram.getCount()).to.be.equal(1);
        expect(histogram.getCounts().get(10)).to.be.equal(0);
        expect(histogram.getCounts().get(20)).to.be.equal(0);
        expect(histogram.getCounts().get(30)).to.be.equal(0);
        expect(histogram.getCounts().get(40)).to.be.equal(0);
        expect(histogram.getCounts().get(50)).to.be.equal(1);
        expect(histogram.getCounts().get(60)).to.be.equal(1);
        expect(histogram.getCounts().get(70)).to.be.equal(1);
        expect(histogram.getCounts().get(80)).to.be.equal(1);
        expect(histogram.getCounts().get(90)).to.be.equal(1);
        expect(histogram.getCounts().get(100)).to.be.equal(1);
        histogram.update(1000);
        expect(histogram.getCount()).to.be.equal(2);
        expect(histogram.getCounts().get(10)).to.be.equal(0);
        expect(histogram.getCounts().get(20)).to.be.equal(0);
        expect(histogram.getCounts().get(30)).to.be.equal(0);
        expect(histogram.getCounts().get(40)).to.be.equal(0);
        expect(histogram.getCounts().get(50)).to.be.equal(1);
        expect(histogram.getCounts().get(60)).to.be.equal(1);
        expect(histogram.getCounts().get(70)).to.be.equal(1);
        expect(histogram.getCounts().get(80)).to.be.equal(1);
        expect(histogram.getCounts().get(90)).to.be.equal(1);
        expect(histogram.getCounts().get(100)).to.be.equal(1);
        histogram.update(10);
        expect(histogram.getCount()).to.be.equal(3);
        expect(histogram.getCounts().get(10)).to.be.equal(0);
        expect(histogram.getCounts().get(20)).to.be.equal(1);
        expect(histogram.getCounts().get(30)).to.be.equal(1);
        expect(histogram.getCounts().get(40)).to.be.equal(1);
        expect(histogram.getCounts().get(50)).to.be.equal(2);
        expect(histogram.getCounts().get(60)).to.be.equal(2);
        expect(histogram.getCounts().get(70)).to.be.equal(2);
        expect(histogram.getCounts().get(80)).to.be.equal(2);
        expect(histogram.getCounts().get(90)).to.be.equal(2);
        expect(histogram.getCounts().get(100)).to.be.equal(2);
    }
    "check bucket counting more than reservoir capacity"() {
        const buckets = metrics_1.Buckets.linear(10, 10, 5);
        const histogram = new hdr_histogram_1.HdrHistogram(5, 50, 3, "name", "description", buckets);
        expect(histogram.getBuckets()).to.be.equal(buckets);
        expect(histogram.getBuckets().boundaries).to.deep.equal([
            10, 20, 30, 40, 50,
        ]);
        expect(histogram.getCounts()).to.satisfy((map) => map.size === 5);
        histogram.update(5);
        histogram.update(10);
        histogram.update(15);
        histogram.update(20);
        histogram.update(25);
        histogram.update(30);
        histogram.update(35);
        histogram.update(40);
        histogram.update(45);
        histogram.update(50);
        expect(histogram.getCount()).to.be.equal(10);
        expect(histogram.getCounts().get(10)).to.be.equal(1);
        expect(histogram.getCounts().get(20)).to.be.equal(3);
        expect(histogram.getCounts().get(30)).to.be.equal(5);
        expect(histogram.getCounts().get(40)).to.be.equal(7);
        expect(histogram.getCounts().get(50)).to.be.equal(9);
    }
};
__decorate([
    mocha_typescript_1.test,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], HdrHistogramTest.prototype, "check name and description", null);
__decorate([
    mocha_typescript_1.test,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], HdrHistogramTest.prototype, "simple count and get", null);
__decorate([
    mocha_typescript_1.test,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], HdrHistogramTest.prototype, "simple count and get with fluent interface", null);
__decorate([
    mocha_typescript_1.test,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], HdrHistogramTest.prototype, "update negative values", null);
__decorate([
    mocha_typescript_1.test,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], HdrHistogramTest.prototype, "check snapshot from no values", null);
__decorate([
    mocha_typescript_1.test,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], HdrHistogramTest.prototype, "check snapshot from one value", null);
__decorate([
    mocha_typescript_1.test,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], HdrHistogramTest.prototype, "check snapshot from same value twice", null);
__decorate([
    mocha_typescript_1.test,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], HdrHistogramTest.prototype, "check snapshot from different values", null);
__decorate([
    mocha_typescript_1.test,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], HdrHistogramTest.prototype, "check snapshot from same value more times than capacity", null);
__decorate([
    mocha_typescript_1.test,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], HdrHistogramTest.prototype, "check snapshot from different values overloading capacity", null);
__decorate([
    mocha_typescript_1.test,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], HdrHistogramTest.prototype, "check bucket counting", null);
__decorate([
    mocha_typescript_1.test,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], HdrHistogramTest.prototype, "check bucket counting more than reservoir capacity", null);
HdrHistogramTest = __decorate([
    mocha_typescript_1.suite
], HdrHistogramTest);
exports.HdrHistogramTest = HdrHistogramTest;
//# sourceMappingURL=hdr-histogram-test.js.map