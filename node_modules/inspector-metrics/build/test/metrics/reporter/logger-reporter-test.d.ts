import "reflect-metadata";
import "source-map-support/register";
import { Clock, Logger, Time } from "../../../lib/metrics/";
export declare class MockedLogger implements Logger {
    log(): void;
    error(): void;
    warn(): void;
    info(): void;
    debug(): void;
    trace(): void;
}
export declare class MockedClock implements Clock {
    private currentTime;
    time(): Time;
    setCurrentTime(time: Time): void;
}
export declare class LoggerReporterTest {
    private clock;
    private registry;
    private logger;
    private loggerSpy;
    private internalCallback;
    private scheduler;
    private schedulerSpy;
    private reporter;
    before(): void;
    "remove metric-registry which was not added"(): Promise<void>;
    "no metric-registries added"(): Promise<void>;
    "counter reporting"(): Promise<void>;
    "gauge reporting"(): Promise<void>;
    "histogram reporting"(): Promise<void>;
    "meter reporting"(): Promise<void>;
    "timer reporting"(): Promise<void>;
    "registry tags"(): Promise<void>;
    "metric tags"(): Promise<void>;
    "registry and metric tags"(): Promise<void>;
    "ad-hoc event reporting without starting report"(): Promise<void>;
    "ad-hoc event reporting with starting reporter"(): Promise<void>;
    "ad-hoc event reporting with event tags"(): Promise<void>;
    "ad-hoc event reporting with event + reporter tags"(): Promise<void>;
    "check reporting if value has not changed"(): Promise<void>;
    "check reporting if value has not changed for longer than the minReportingTimeout"(): Promise<void>;
}
