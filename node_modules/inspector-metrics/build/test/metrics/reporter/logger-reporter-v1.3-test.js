"use strict";
/* tslint:disable:no-unused-expression */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
require("reflect-metadata");
require("source-map-support/register");
const chai = require("chai");
const mocha_typescript_1 = require("mocha-typescript");
const sinon_1 = require("sinon");
const sinonChai = require("sinon-chai");
const metrics_1 = require("../../../lib/metrics/");
chai.use(sinonChai);
const expect = chai.expect;
class MockedLogger {
    constructor() {
        this.calls = [];
    }
    log() { }
    error() { }
    warn() { }
    info(msg, metadata) {
        this.calls.push(Object.assign({}, metadata));
    }
    debug() { }
    trace() { }
}
exports.MockedLogger = MockedLogger;
class MockedClock {
    time() {
        return this.currentTime;
    }
    setCurrentTime(time) {
        this.currentTime = time;
    }
}
exports.MockedClock = MockedClock;
let LoggerReporterTest = class LoggerReporterTest {
    constructor() {
        this.clock = new MockedClock();
    }
    before() {
        this.clock.setCurrentTime({
            milliseconds: 0,
            nanoseconds: 0,
        });
        this.registry = new metrics_1.MetricRegistry();
        this.logger = new MockedLogger();
        this.scheduler = (prog, interval) => {
            this.internalCallback = prog;
            return null;
        };
        this.schedulerSpy = sinon_1.spy(this.scheduler);
        this.reporter = new metrics_1.LoggerReporter({
            clock: this.clock,
            log: this.logger,
            reportInterval: 1000,
            scheduler: this.schedulerSpy,
            tags: new Map(),
            unit: metrics_1.MILLISECOND,
        });
        this.registry.setDefaultClock(this.clock);
        this.reporter.addMetricRegistry(this.registry);
    }
    "report multiple metric with same name"() {
        return __awaiter(this, void 0, void 0, function* () {
            const gauge1 = new metrics_1.SimpleGauge("myValue");
            const gauge2 = new metrics_1.SimpleGauge("myValue");
            gauge1.setTag("type", "abc");
            gauge2.setTag("type", "def");
            this.registry.registerMetric(gauge1);
            this.registry.registerMetric(gauge2);
            const metrics = this.registry.getMetricList();
            expect(metrics).to.have.length(2);
            expect(metrics[0]).to.equal(gauge1);
            expect(metrics[1]).to.equal(gauge2);
            expect(this.schedulerSpy).to.not.have.been.called;
            yield this.reporter.start();
            expect(this.schedulerSpy).to.have.been.called;
            yield this.internalCallback();
            expect(this.logger.calls.length).to.equal(2);
            let logMetadata = this.logger.calls[0];
            expect(logMetadata.measurement).to.equal("myValue");
            expect(logMetadata.measurement_type).to.equal("gauge");
            expect(logMetadata.timestamp.getTime()).to.equal(0);
            expect(logMetadata.tags["type"]).to.equal("abc");
            logMetadata = this.logger.calls[1];
            expect(logMetadata.measurement).to.equal("myValue");
            expect(logMetadata.measurement_type).to.equal("gauge");
            expect(logMetadata.timestamp.getTime()).to.equal(0);
            expect(logMetadata.tags["type"]).to.equal("def");
        });
    }
};
__decorate([
    mocha_typescript_1.test,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], LoggerReporterTest.prototype, "report multiple metric with same name", null);
LoggerReporterTest = __decorate([
    mocha_typescript_1.suite
], LoggerReporterTest);
exports.LoggerReporterTest = LoggerReporterTest;
//# sourceMappingURL=logger-reporter-v1.3-test.js.map