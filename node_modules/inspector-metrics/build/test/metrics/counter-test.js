"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
// tslint:disable:no-unused-expression
require("reflect-metadata");
require("source-map-support/register");
const chai = require("chai");
const mocha_typescript_1 = require("mocha-typescript");
const counter_1 = require("../../lib/metrics/counter");
const assert = chai.assert;
const expect = chai.expect;
let CounterTest = class CounterTest {
    "check name and description"() {
        let counter = new counter_1.Counter();
        expect(counter.getName()).to.be.undefined;
        expect(counter.getDescription()).to.be.undefined;
        counter = new counter_1.Counter("counter-name");
        expect(counter.getName()).to.equal("counter-name");
        expect(counter.getDescription()).to.be.undefined;
        counter = new counter_1.Counter("counter-name", "counter-description");
        expect(counter.getName()).to.equal("counter-name");
        expect(counter.getDescription()).to.equal("counter-description");
    }
    "check count, reset and get"() {
        const counter = new counter_1.Counter();
        expect(counter.getCount()).to.equal(0);
        counter.increment(1);
        expect(counter.getCount()).to.equal(1);
        counter.reset();
        expect(counter.getCount()).to.equal(0);
        counter.decrement(1);
        expect(counter.getCount()).to.equal(-1);
        counter.reset();
        expect(counter.getCount()).to.equal(0);
        counter.increment(-1);
        expect(counter.getCount()).to.equal(-1);
        counter.reset();
        expect(counter.getCount()).to.equal(0);
        counter.decrement(-1);
        expect(counter.getCount()).to.equal(1);
    }
};
__decorate([
    mocha_typescript_1.test,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], CounterTest.prototype, "check name and description", null);
__decorate([
    mocha_typescript_1.test,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], CounterTest.prototype, "check count, reset and get", null);
CounterTest = __decorate([
    mocha_typescript_1.suite
], CounterTest);
exports.CounterTest = CounterTest;
let MonotoneCounterTest = class MonotoneCounterTest {
    "check name and description"() {
        let counter = new counter_1.MonotoneCounter();
        expect(counter.getName()).to.be.undefined;
        expect(counter.getDescription()).to.be.undefined;
        counter = new counter_1.MonotoneCounter("counter-name");
        expect(counter.getName()).to.equal("counter-name");
        expect(counter.getDescription()).to.be.undefined;
        counter = new counter_1.MonotoneCounter("counter-name", "counter-description");
        expect(counter.getName()).to.equal("counter-name");
        expect(counter.getDescription()).to.equal("counter-description");
    }
    "check count, reset and get"() {
        const counter = new counter_1.MonotoneCounter();
        expect(counter.getCount()).to.equal(0);
        counter.increment(1);
        expect(counter.getCount()).to.equal(1);
        counter.reset();
        expect(counter.getCount()).to.equal(0);
    }
    "check increase by negative value"() {
        const counter = new counter_1.MonotoneCounter();
        expect(counter.getCount()).to.equal(0);
        try {
            counter.increment(-1);
            assert.fail("An exception should be thrown");
        }
        catch (e) {
            expect(e).to.be.instanceOf(Error);
        }
    }
};
__decorate([
    mocha_typescript_1.test,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], MonotoneCounterTest.prototype, "check name and description", null);
__decorate([
    mocha_typescript_1.test,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], MonotoneCounterTest.prototype, "check count, reset and get", null);
__decorate([
    mocha_typescript_1.test,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], MonotoneCounterTest.prototype, "check increase by negative value", null);
MonotoneCounterTest = __decorate([
    mocha_typescript_1.suite
], MonotoneCounterTest);
exports.MonotoneCounterTest = MonotoneCounterTest;
//# sourceMappingURL=counter-test.js.map