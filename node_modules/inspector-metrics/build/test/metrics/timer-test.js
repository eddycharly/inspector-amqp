"use strict";
/* tslint:disable:no-unused-expression */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
require("reflect-metadata");
require("source-map-support/register");
const chai = require("chai");
const mocha_typescript_1 = require("mocha-typescript");
const metrics_1 = require("../../lib/metrics");
const reservoir_1 = require("../../lib/metrics/reservoir");
const time_unit_1 = require("../../lib/metrics/time-unit");
const timer_1 = require("../../lib/metrics/timer");
const mocked_clock_1 = require("./mocked-clock");
const expect = chai.expect;
let TimerTest = class TimerTest {
    constructor() {
        this.clock = new mocked_clock_1.MockedClock();
    }
    "check name and description"() {
        let timer = new timer_1.Timer(this.clock, new reservoir_1.SlidingWindowReservoir(3));
        expect(timer.getName()).to.be.undefined;
        expect(timer.getDescription()).to.be.undefined;
        timer = new timer_1.Timer(this.clock, new reservoir_1.SlidingWindowReservoir(3), "timer-name");
        expect(timer.getName()).to.equal("timer-name");
        expect(timer.getDescription()).to.be.undefined;
        timer = new timer_1.Timer(this.clock, new reservoir_1.SlidingWindowReservoir(3), "timer-name", "timer-description");
        expect(timer.getName()).to.equal("timer-name");
        expect(timer.getDescription()).to.equal("timer-description");
    }
    "negative duration"() {
        this.clock.setCurrentTime({
            milliseconds: 0,
            nanoseconds: 0,
        });
        const timer = new timer_1.Timer(this.clock, new reservoir_1.SlidingWindowReservoir(3));
        expect(timer.getCount()).to.equal(0);
        expect(timer.getSum().toNumber()).to.equal(0);
        expect(timer.get15MinuteRate()).to.equal(0);
        expect(timer.get5MinuteRate()).to.equal(0);
        expect(timer.get1MinuteRate()).to.equal(0);
        expect(timer.getMeanRate()).to.equal(0);
        let snapshot = timer.getSnapshot();
        expect(snapshot.get75thPercentile()).to.equal(0);
        expect(snapshot.get95thPercentile()).to.equal(0);
        expect(snapshot.get98thPercentile()).to.equal(0);
        expect(snapshot.get99thPercentile()).to.equal(0);
        expect(snapshot.get999thPercentile()).to.equal(0);
        expect(snapshot.getMax()).to.be.undefined;
        expect(snapshot.getMean()).to.equal(0);
        expect(snapshot.getMedian()).to.equal(0);
        expect(snapshot.getMin()).to.be.undefined;
        expect(snapshot.getStdDev()).to.equal(0);
        timer.addDuration(-1, time_unit_1.NANOSECOND);
        expect(timer.getCount()).to.equal(0);
        expect(timer.getSum().toNumber()).to.equal(0);
        expect(timer.get15MinuteRate()).to.equal(0);
        expect(timer.get5MinuteRate()).to.equal(0);
        expect(timer.get1MinuteRate()).to.equal(0);
        expect(timer.getMeanRate()).to.equal(0);
        snapshot = timer.getSnapshot();
        expect(snapshot.get75thPercentile()).to.equal(0);
        expect(snapshot.get95thPercentile()).to.equal(0);
        expect(snapshot.get98thPercentile()).to.equal(0);
        expect(snapshot.get99thPercentile()).to.equal(0);
        expect(snapshot.get999thPercentile()).to.equal(0);
        expect(snapshot.getMax()).to.be.undefined;
        expect(snapshot.getMean()).to.equal(0);
        expect(snapshot.getMedian()).to.equal(0);
        expect(snapshot.getMin()).to.be.undefined;
        expect(snapshot.getStdDev()).to.equal(0);
    }
    "single duration measuring with no tick"() {
        this.clock.setCurrentTime({
            milliseconds: 0,
            nanoseconds: 0,
        });
        const timer = new timer_1.Timer(this.clock, new reservoir_1.SlidingWindowReservoir(3));
        expect(timer.getCount()).to.equal(0);
        expect(timer.getSum().toNumber()).to.equal(0);
        expect(timer.get15MinuteRate()).to.equal(0);
        expect(timer.get5MinuteRate()).to.equal(0);
        expect(timer.get1MinuteRate()).to.equal(0);
        expect(timer.getMeanRate()).to.equal(0);
        let snapshot = timer.getSnapshot();
        expect(snapshot.get75thPercentile()).to.equal(0);
        expect(snapshot.get95thPercentile()).to.equal(0);
        expect(snapshot.get98thPercentile()).to.equal(0);
        expect(snapshot.get99thPercentile()).to.equal(0);
        expect(snapshot.get999thPercentile()).to.equal(0);
        expect(snapshot.getMax()).to.be.undefined;
        expect(snapshot.getMean()).to.equal(0);
        expect(snapshot.getMedian()).to.equal(0);
        expect(snapshot.getMin()).to.be.undefined;
        expect(snapshot.getStdDev()).to.equal(0);
        timer.addDuration(10, time_unit_1.MICROSECOND);
        expect(timer.getCount()).to.equal(1);
        expect(timer.getSum().toNumber()).to.equal(10000);
        expect(timer.get15MinuteRate()).to.equal(0);
        expect(timer.get5MinuteRate()).to.equal(0);
        expect(timer.get1MinuteRate()).to.equal(0);
        expect(timer.getMeanRate()).to.equal(Infinity);
        snapshot = timer.getSnapshot();
        expect(snapshot.get75thPercentile()).to.equal(10000);
        expect(snapshot.get95thPercentile()).to.equal(10000);
        expect(snapshot.get98thPercentile()).to.equal(10000);
        expect(snapshot.get99thPercentile()).to.equal(10000);
        expect(snapshot.get999thPercentile()).to.equal(10000);
        expect(snapshot.getMax()).to.equal(10000);
        expect(snapshot.getMean()).to.equal(10000);
        expect(snapshot.getMedian()).to.equal(10000);
        expect(snapshot.getMin()).to.equal(10000);
        expect(snapshot.getStdDev()).to.be.NaN;
    }
    "multiple duration measuring with no tick"() {
        this.clock.setCurrentTime({
            milliseconds: 0,
            nanoseconds: 0,
        });
        const timer = new timer_1.Timer(this.clock, new reservoir_1.SlidingWindowReservoir(3));
        expect(timer.getCount()).to.equal(0);
        expect(timer.getSum().toNumber()).to.equal(0);
        expect(timer.get15MinuteRate()).to.equal(0);
        expect(timer.get5MinuteRate()).to.equal(0);
        expect(timer.get1MinuteRate()).to.equal(0);
        expect(timer.getMeanRate()).to.equal(0);
        let snapshot = timer.getSnapshot();
        expect(snapshot.get75thPercentile()).to.equal(0);
        expect(snapshot.get95thPercentile()).to.equal(0);
        expect(snapshot.get98thPercentile()).to.equal(0);
        expect(snapshot.get99thPercentile()).to.equal(0);
        expect(snapshot.get999thPercentile()).to.equal(0);
        expect(snapshot.getMax()).to.be.undefined;
        expect(snapshot.getMean()).to.equal(0);
        expect(snapshot.getMedian()).to.equal(0);
        expect(snapshot.getMin()).to.be.undefined;
        expect(snapshot.getStdDev()).to.equal(0);
        timer.addDuration(10, time_unit_1.MICROSECOND);
        timer.addDuration(20, time_unit_1.MICROSECOND);
        timer.addDuration(30, time_unit_1.MICROSECOND);
        expect(timer.getCount()).to.equal(3);
        expect(timer.getSum().toNumber()).to.equal(60000);
        expect(timer.get15MinuteRate()).to.equal(0);
        expect(timer.get5MinuteRate()).to.equal(0);
        expect(timer.get1MinuteRate()).to.equal(0);
        expect(timer.getMeanRate()).to.equal(Infinity);
        snapshot = timer.getSnapshot();
        expect(snapshot.get75thPercentile()).to.equal(30000);
        expect(snapshot.get95thPercentile()).to.equal(30000);
        expect(snapshot.get98thPercentile()).to.equal(30000);
        expect(snapshot.get99thPercentile()).to.equal(30000);
        expect(snapshot.get999thPercentile()).to.equal(30000);
        expect(snapshot.getMax()).to.equal(30000);
        expect(snapshot.getMean()).to.equal(20000);
        expect(snapshot.getMedian()).to.equal(20000);
        expect(snapshot.getMin()).to.equal(10000);
        expect(snapshot.getStdDev()).to.equal(10000);
    }
    "single duration measuring with one tick"() {
        this.clock.setCurrentTime({
            milliseconds: 0,
            nanoseconds: 0,
        });
        const timer = new timer_1.Timer(this.clock, new reservoir_1.SlidingWindowReservoir(3));
        expect(timer.getCount()).to.equal(0);
        expect(timer.getSum().toNumber()).to.equal(0);
        expect(timer.get15MinuteRate()).to.equal(0);
        expect(timer.get5MinuteRate()).to.equal(0);
        expect(timer.get1MinuteRate()).to.equal(0);
        expect(timer.getMeanRate()).to.equal(0);
        let snapshot = timer.getSnapshot();
        expect(snapshot.get75thPercentile()).to.equal(0);
        expect(snapshot.get95thPercentile()).to.equal(0);
        expect(snapshot.get98thPercentile()).to.equal(0);
        expect(snapshot.get99thPercentile()).to.equal(0);
        expect(snapshot.get999thPercentile()).to.equal(0);
        expect(snapshot.getMax()).to.be.undefined;
        expect(snapshot.getMean()).to.equal(0);
        expect(snapshot.getMedian()).to.equal(0);
        expect(snapshot.getMin()).to.be.undefined;
        expect(snapshot.getStdDev()).to.equal(0);
        this.clock.setCurrentTime({
            milliseconds: 1001,
            nanoseconds: 0,
        });
        timer.addDuration(10, time_unit_1.MICROSECOND);
        expect(timer.getCount()).to.equal(1);
        expect(timer.getSum().toNumber()).to.equal(10000);
        expect(timer.get15MinuteRate()).to.equal(0);
        expect(timer.get5MinuteRate()).to.equal(0);
        expect(timer.get1MinuteRate()).to.equal(0);
        expect(timer.getMeanRate()).to.lessThan(1);
        snapshot = timer.getSnapshot();
        expect(snapshot.get75thPercentile()).to.equal(10000);
        expect(snapshot.get95thPercentile()).to.equal(10000);
        expect(snapshot.get98thPercentile()).to.equal(10000);
        expect(snapshot.get99thPercentile()).to.equal(10000);
        expect(snapshot.get999thPercentile()).to.equal(10000);
        expect(snapshot.getMax()).to.equal(10000);
        expect(snapshot.getMean()).to.equal(10000);
        expect(snapshot.getMedian()).to.equal(10000);
        expect(snapshot.getMin()).to.equal(10000);
        expect(snapshot.getStdDev()).to.be.NaN;
    }
    "multiple duration measuring with one tick"() {
        this.clock.setCurrentTime({
            milliseconds: 0,
            nanoseconds: 0,
        });
        const timer = new timer_1.Timer(this.clock, new reservoir_1.SlidingWindowReservoir(3));
        expect(timer.getCount()).to.equal(0);
        expect(timer.getSum().toNumber()).to.equal(0);
        expect(timer.get15MinuteRate()).to.equal(0);
        expect(timer.get5MinuteRate()).to.equal(0);
        expect(timer.get1MinuteRate()).to.equal(0);
        expect(timer.getMeanRate()).to.equal(0);
        let snapshot = timer.getSnapshot();
        expect(snapshot.get75thPercentile()).to.equal(0);
        expect(snapshot.get95thPercentile()).to.equal(0);
        expect(snapshot.get98thPercentile()).to.equal(0);
        expect(snapshot.get99thPercentile()).to.equal(0);
        expect(snapshot.get999thPercentile()).to.equal(0);
        expect(snapshot.getMax()).to.be.undefined;
        expect(snapshot.getMean()).to.equal(0);
        expect(snapshot.getMedian()).to.equal(0);
        expect(snapshot.getMin()).to.be.undefined;
        expect(snapshot.getStdDev()).to.equal(0);
        this.clock.setCurrentTime({
            milliseconds: 1001,
            nanoseconds: 0,
        });
        timer.addDuration(10, time_unit_1.MICROSECOND);
        timer.addDuration(20, time_unit_1.MICROSECOND);
        timer.addDuration(30, time_unit_1.MICROSECOND);
        expect(timer.getCount()).to.equal(3);
        expect(timer.getSum().toNumber()).to.equal(60000);
        expect(timer.get15MinuteRate()).to.equal(0);
        expect(timer.get5MinuteRate()).to.equal(0);
        expect(timer.get1MinuteRate()).to.equal(0);
        expect(timer.getMeanRate()).to.lessThan(3);
        snapshot = timer.getSnapshot();
        expect(snapshot.get75thPercentile()).to.equal(30000);
        expect(snapshot.get95thPercentile()).to.equal(30000);
        expect(snapshot.get98thPercentile()).to.equal(30000);
        expect(snapshot.get99thPercentile()).to.equal(30000);
        expect(snapshot.get999thPercentile()).to.equal(30000);
        expect(snapshot.getMax()).to.equal(30000);
        expect(snapshot.getMean()).to.equal(20000);
        expect(snapshot.getMedian()).to.equal(20000);
        expect(snapshot.getMin()).to.equal(10000);
        expect(snapshot.getStdDev()).to.equal(10000);
    }
    "multiple duration measuring with multiple ticks"() {
        this.clock.setCurrentTime({
            milliseconds: 0,
            nanoseconds: 0,
        });
        const timer = new timer_1.Timer(this.clock, new reservoir_1.SlidingWindowReservoir(3));
        expect(timer.getCount()).to.equal(0);
        expect(timer.getSum().toNumber()).to.equal(0);
        expect(timer.get15MinuteRate()).to.equal(0);
        expect(timer.get5MinuteRate()).to.equal(0);
        expect(timer.get1MinuteRate()).to.equal(0);
        expect(timer.getMeanRate()).to.equal(0);
        let snapshot = timer.getSnapshot();
        expect(snapshot.get75thPercentile()).to.equal(0);
        expect(snapshot.get95thPercentile()).to.equal(0);
        expect(snapshot.get98thPercentile()).to.equal(0);
        expect(snapshot.get99thPercentile()).to.equal(0);
        expect(snapshot.get999thPercentile()).to.equal(0);
        expect(snapshot.getMax()).to.be.undefined;
        expect(snapshot.getMean()).to.equal(0);
        expect(snapshot.getMedian()).to.equal(0);
        expect(snapshot.getMin()).to.be.undefined;
        expect(snapshot.getStdDev()).to.equal(0);
        this.clock.setCurrentTime({
            milliseconds: 1001,
            nanoseconds: 0,
        });
        timer.addDuration(10, time_unit_1.MICROSECOND);
        timer.addDuration(20, time_unit_1.MICROSECOND);
        timer.addDuration(30, time_unit_1.MICROSECOND);
        expect(timer.getCount()).to.equal(3);
        expect(timer.getSum().toNumber()).to.equal(60000);
        expect(timer.get15MinuteRate()).to.equal(0);
        expect(timer.get5MinuteRate()).to.equal(0);
        expect(timer.get1MinuteRate()).to.equal(0);
        expect(timer.getMeanRate()).to.lessThan(3);
        snapshot = timer.getSnapshot();
        expect(snapshot.get75thPercentile()).to.equal(30000);
        expect(snapshot.get95thPercentile()).to.equal(30000);
        expect(snapshot.get98thPercentile()).to.equal(30000);
        expect(snapshot.get99thPercentile()).to.equal(30000);
        expect(snapshot.get999thPercentile()).to.equal(30000);
        expect(snapshot.getMax()).to.equal(30000);
        expect(snapshot.getMean()).to.equal(20000);
        expect(snapshot.getMedian()).to.equal(20000);
        expect(snapshot.getMin()).to.equal(10000);
        expect(snapshot.getStdDev()).to.equal(10000);
        this.clock.setCurrentTime({
            milliseconds: 2001,
            nanoseconds: 0,
        });
        timer.addDuration(10, time_unit_1.MICROSECOND);
        timer.addDuration(20, time_unit_1.MICROSECOND);
        timer.addDuration(30, time_unit_1.MICROSECOND);
        expect(timer.getCount()).to.equal(6);
        expect(timer.getSum().toNumber()).to.equal(120000);
        expect(timer.get15MinuteRate()).to.equal(0);
        expect(timer.get5MinuteRate()).to.equal(0);
        expect(timer.get1MinuteRate()).to.equal(0);
        expect(timer.getMeanRate()).to.lessThan(3);
        snapshot = timer.getSnapshot();
        expect(snapshot.get75thPercentile()).to.equal(30000);
        expect(snapshot.get95thPercentile()).to.equal(30000);
        expect(snapshot.get98thPercentile()).to.equal(30000);
        expect(snapshot.get99thPercentile()).to.equal(30000);
        expect(snapshot.get999thPercentile()).to.equal(30000);
        expect(snapshot.getMax()).to.equal(30000);
        expect(snapshot.getMean()).to.equal(20000);
        expect(snapshot.getMedian()).to.equal(20000);
        expect(snapshot.getMin()).to.equal(10000);
        expect(snapshot.getStdDev()).to.equal(10000);
    }
    "multiple duration measuring with multiple ticks within different rate-intervals"() {
        this.clock.setCurrentTime({
            milliseconds: 0,
            nanoseconds: 0,
        });
        const timer = new timer_1.Timer(this.clock, new reservoir_1.SlidingWindowReservoir(3));
        expect(timer.getCount()).to.equal(0);
        expect(timer.getSum().toNumber()).to.equal(0);
        expect(timer.get15MinuteRate()).to.equal(0);
        expect(timer.get5MinuteRate()).to.equal(0);
        expect(timer.get1MinuteRate()).to.equal(0);
        expect(timer.getMeanRate()).to.equal(0);
        let snapshot = timer.getSnapshot();
        expect(snapshot.get75thPercentile()).to.equal(0);
        expect(snapshot.get95thPercentile()).to.equal(0);
        expect(snapshot.get98thPercentile()).to.equal(0);
        expect(snapshot.get99thPercentile()).to.equal(0);
        expect(snapshot.get999thPercentile()).to.equal(0);
        expect(snapshot.getMax()).to.be.undefined;
        expect(snapshot.getMean()).to.equal(0);
        expect(snapshot.getMedian()).to.equal(0);
        expect(snapshot.getMin()).to.be.undefined;
        expect(snapshot.getStdDev()).to.equal(0);
        this.clock.setCurrentTime({
            milliseconds: 1001,
            nanoseconds: 0,
        });
        timer.addDuration(10, time_unit_1.MICROSECOND);
        timer.addDuration(20, time_unit_1.MICROSECOND);
        timer.addDuration(30, time_unit_1.MICROSECOND);
        expect(timer.getCount()).to.equal(3);
        expect(timer.getSum().toNumber()).to.equal(60000);
        expect(timer.get15MinuteRate()).to.equal(0);
        expect(timer.get5MinuteRate()).to.equal(0);
        expect(timer.get1MinuteRate()).to.equal(0);
        expect(timer.getMeanRate()).to.lessThan(3);
        snapshot = timer.getSnapshot();
        expect(snapshot.get75thPercentile()).to.equal(30000);
        expect(snapshot.get95thPercentile()).to.equal(30000);
        expect(snapshot.get98thPercentile()).to.equal(30000);
        expect(snapshot.get99thPercentile()).to.equal(30000);
        expect(snapshot.get999thPercentile()).to.equal(30000);
        expect(snapshot.getMax()).to.equal(30000);
        expect(snapshot.getMean()).to.equal(20000);
        expect(snapshot.getMedian()).to.equal(20000);
        expect(snapshot.getMin()).to.equal(10000);
        expect(snapshot.getStdDev()).to.equal(10000);
        this.clock.setCurrentTime({
            milliseconds: 5001,
            nanoseconds: 0,
        });
        timer.addDuration(10, time_unit_1.MICROSECOND);
        timer.addDuration(20, time_unit_1.MICROSECOND);
        timer.addDuration(30, time_unit_1.MICROSECOND);
        expect(timer.getCount()).to.equal(6);
        expect(timer.getSum().toNumber()).to.equal(120000);
        expect(timer.get15MinuteRate()).to.greaterThan(0);
        expect(timer.get5MinuteRate()).to.greaterThan(0);
        expect(timer.get1MinuteRate()).to.greaterThan(0);
        expect(timer.getMeanRate()).to.lessThan(3);
        snapshot = timer.getSnapshot();
        expect(snapshot.get75thPercentile()).to.equal(30000);
        expect(snapshot.get95thPercentile()).to.equal(30000);
        expect(snapshot.get98thPercentile()).to.equal(30000);
        expect(snapshot.get99thPercentile()).to.equal(30000);
        expect(snapshot.get999thPercentile()).to.equal(30000);
        expect(snapshot.getMax()).to.equal(30000);
        expect(snapshot.getMean()).to.equal(20000);
        expect(snapshot.getMedian()).to.equal(20000);
        expect(snapshot.getMin()).to.equal(10000);
        expect(snapshot.getStdDev()).to.equal(10000);
    }
    "add duration with time function"() {
        this.clock.setCurrentTime({
            milliseconds: 0,
            nanoseconds: 0,
        });
        const timer = new timer_1.Timer(this.clock, new reservoir_1.SlidingWindowReservoir(3));
        expect(timer.getCount()).to.equal(0);
        expect(timer.getSum().toNumber()).to.equal(0);
        expect(timer.get15MinuteRate()).to.equal(0);
        expect(timer.get5MinuteRate()).to.equal(0);
        expect(timer.get1MinuteRate()).to.equal(0);
        expect(timer.getMeanRate()).to.equal(0);
        let snapshot = timer.getSnapshot();
        expect(snapshot.get75thPercentile()).to.equal(0);
        expect(snapshot.get95thPercentile()).to.equal(0);
        expect(snapshot.get98thPercentile()).to.equal(0);
        expect(snapshot.get99thPercentile()).to.equal(0);
        expect(snapshot.get999thPercentile()).to.equal(0);
        expect(snapshot.getMax()).to.be.undefined;
        expect(snapshot.getMean()).to.equal(0);
        expect(snapshot.getMedian()).to.equal(0);
        expect(snapshot.getMin()).to.be.undefined;
        expect(snapshot.getStdDev()).to.equal(0);
        timer.time(() => {
            this.clock.setCurrentTime({
                milliseconds: 10,
                nanoseconds: 0,
            });
        });
        this.clock.setCurrentTime({
            milliseconds: 1001,
            nanoseconds: 0,
        });
        expect(timer.getCount()).to.equal(1);
        expect(timer.getSum().toNumber()).to.equal(10000000);
        expect(timer.get15MinuteRate()).to.greaterThan(0);
        expect(timer.get5MinuteRate()).to.greaterThan(0);
        expect(timer.get1MinuteRate()).to.greaterThan(0);
        expect(timer.getMeanRate()).to.lessThan(1);
        snapshot = timer.getSnapshot();
        expect(snapshot.get75thPercentile()).to.equal(10000000);
        expect(snapshot.get95thPercentile()).to.equal(10000000);
        expect(snapshot.get98thPercentile()).to.equal(10000000);
        expect(snapshot.get99thPercentile()).to.equal(10000000);
        expect(snapshot.get999thPercentile()).to.equal(10000000);
        expect(snapshot.getMax()).to.equal(10000000);
        expect(snapshot.getMean()).to.equal(10000000);
        expect(snapshot.getMedian()).to.equal(10000000);
        expect(snapshot.getMin()).to.equal(10000000);
        expect(snapshot.getStdDev()).to.be.NaN;
    }
    "add duration with async time function"(callback) {
        this.clock.setCurrentTime({
            milliseconds: 0,
            nanoseconds: 0,
        });
        const timer = new timer_1.Timer(this.clock, new reservoir_1.SlidingWindowReservoir(3));
        expect(timer.getCount()).to.equal(0);
        expect(timer.getSum().toNumber()).to.equal(0);
        expect(timer.get15MinuteRate()).to.equal(0);
        expect(timer.get5MinuteRate()).to.equal(0);
        expect(timer.get1MinuteRate()).to.equal(0);
        expect(timer.getMeanRate()).to.equal(0);
        let snapshot = timer.getSnapshot();
        expect(snapshot.get75thPercentile()).to.equal(0);
        expect(snapshot.get95thPercentile()).to.equal(0);
        expect(snapshot.get98thPercentile()).to.equal(0);
        expect(snapshot.get99thPercentile()).to.equal(0);
        expect(snapshot.get999thPercentile()).to.equal(0);
        expect(snapshot.getMax()).to.be.undefined;
        expect(snapshot.getMean()).to.equal(0);
        expect(snapshot.getMedian()).to.equal(0);
        expect(snapshot.getMin()).to.be.undefined;
        expect(snapshot.getStdDev()).to.equal(0);
        timer.timeAsync(() => {
            return new Promise((resolve) => {
                this.clock.setCurrentTime({
                    milliseconds: 10,
                    nanoseconds: 0,
                });
                resolve();
            });
        })
            .then(() => {
            this.clock.setCurrentTime({
                milliseconds: 1001,
                nanoseconds: 0,
            });
            expect(timer.getCount()).to.equal(1);
            expect(timer.getSum().toNumber()).to.equal(10000000);
            expect(timer.get15MinuteRate()).to.greaterThan(0);
            expect(timer.get5MinuteRate()).to.greaterThan(0);
            expect(timer.get1MinuteRate()).to.greaterThan(0);
            expect(timer.getMeanRate()).to.lessThan(1);
            snapshot = timer.getSnapshot();
            expect(snapshot.get75thPercentile()).to.equal(10000000);
            expect(snapshot.get95thPercentile()).to.equal(10000000);
            expect(snapshot.get98thPercentile()).to.equal(10000000);
            expect(snapshot.get99thPercentile()).to.equal(10000000);
            expect(snapshot.get999thPercentile()).to.equal(10000000);
            expect(snapshot.getMax()).to.equal(10000000);
            expect(snapshot.getMean()).to.equal(10000000);
            expect(snapshot.getMedian()).to.equal(10000000);
            expect(snapshot.getMin()).to.equal(10000000);
            expect(snapshot.getStdDev()).to.be.NaN;
        })
            .then(callback);
    }
    "check bucket counting"() {
        const buckets = metrics_1.Buckets.linear(100, 200, 5);
        const timer = new timer_1.Timer(this.clock, new reservoir_1.SlidingWindowReservoir(3), "name", "description", buckets);
        expect(timer.getBuckets()).to.be.equal(buckets);
        expect(timer.getBuckets().boundaries).to.deep.equal([
            100, 300, 500, 700, 900,
        ]);
        expect(timer.getCounts()).to.satisfy((map) => map.size === 5);
        timer.addDuration(101, time_unit_1.NANOSECOND);
        expect(timer.getCount()).to.be.equal(1);
        expect(timer.getCounts().get(100)).to.be.equal(0);
        expect(timer.getCounts().get(300)).to.be.equal(1);
        expect(timer.getCounts().get(500)).to.be.equal(1);
        expect(timer.getCounts().get(700)).to.be.equal(1);
        expect(timer.getCounts().get(900)).to.be.equal(1);
        timer.addDuration(1001, time_unit_1.NANOSECOND);
        expect(timer.getCount()).to.be.equal(2);
        expect(timer.getCounts().get(100)).to.be.equal(0);
        expect(timer.getCounts().get(300)).to.be.equal(1);
        expect(timer.getCounts().get(500)).to.be.equal(1);
        expect(timer.getCounts().get(700)).to.be.equal(1);
        expect(timer.getCounts().get(900)).to.be.equal(1);
        timer.addDuration(50, time_unit_1.NANOSECOND);
        expect(timer.getCount()).to.be.equal(3);
        expect(timer.getCounts().get(100)).to.be.equal(1);
        expect(timer.getCounts().get(300)).to.be.equal(2);
        expect(timer.getCounts().get(500)).to.be.equal(2);
        expect(timer.getCounts().get(700)).to.be.equal(2);
        expect(timer.getCounts().get(900)).to.be.equal(2);
    }
    "check bucket counting more than reservoir capacity"() {
        const buckets = metrics_1.Buckets.linear(100, 200, 5);
        const timer = new timer_1.Timer(this.clock, new reservoir_1.SlidingWindowReservoir(3), "name", "description", buckets);
        expect(timer.getBuckets()).to.be.equal(buckets);
        expect(timer.getBuckets().boundaries).to.deep.equal([
            100, 300, 500, 700, 900,
        ]);
        expect(timer.getCounts()).to.satisfy((map) => map.size === 5);
        timer.addDuration(50, time_unit_1.NANOSECOND);
        timer.addDuration(100, time_unit_1.NANOSECOND);
        timer.addDuration(150, time_unit_1.NANOSECOND);
        timer.addDuration(200, time_unit_1.NANOSECOND);
        timer.addDuration(250, time_unit_1.NANOSECOND);
        timer.addDuration(300, time_unit_1.NANOSECOND);
        timer.addDuration(350, time_unit_1.NANOSECOND);
        timer.addDuration(400, time_unit_1.NANOSECOND);
        timer.addDuration(450, time_unit_1.NANOSECOND);
        timer.addDuration(500, time_unit_1.NANOSECOND);
        expect(timer.getCount()).to.be.equal(10);
        expect(timer.getCounts().get(100)).to.be.equal(1);
        expect(timer.getCounts().get(300)).to.be.equal(5);
        expect(timer.getCounts().get(500)).to.be.equal(9);
        expect(timer.getCounts().get(700)).to.be.equal(10);
        expect(timer.getCounts().get(900)).to.be.equal(10);
    }
};
__decorate([
    mocha_typescript_1.test,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], TimerTest.prototype, "check name and description", null);
__decorate([
    mocha_typescript_1.test,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], TimerTest.prototype, "negative duration", null);
__decorate([
    mocha_typescript_1.test,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], TimerTest.prototype, "single duration measuring with no tick", null);
__decorate([
    mocha_typescript_1.test,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], TimerTest.prototype, "multiple duration measuring with no tick", null);
__decorate([
    mocha_typescript_1.test,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], TimerTest.prototype, "single duration measuring with one tick", null);
__decorate([
    mocha_typescript_1.test,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], TimerTest.prototype, "multiple duration measuring with one tick", null);
__decorate([
    mocha_typescript_1.test,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], TimerTest.prototype, "multiple duration measuring with multiple ticks", null);
__decorate([
    mocha_typescript_1.test,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], TimerTest.prototype, "multiple duration measuring with multiple ticks within different rate-intervals", null);
__decorate([
    mocha_typescript_1.test,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], TimerTest.prototype, "add duration with time function", null);
__decorate([
    mocha_typescript_1.test,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Function]),
    __metadata("design:returntype", void 0)
], TimerTest.prototype, "add duration with async time function", null);
__decorate([
    mocha_typescript_1.test,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], TimerTest.prototype, "check bucket counting", null);
__decorate([
    mocha_typescript_1.test,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], TimerTest.prototype, "check bucket counting more than reservoir capacity", null);
TimerTest = __decorate([
    mocha_typescript_1.suite
], TimerTest);
exports.TimerTest = TimerTest;
let StopWatchTest = class StopWatchTest {
    constructor() {
        this.clock = new mocked_clock_1.MockedClock();
    }
    "start and stop without time difference"() {
        this.clock.setCurrentTime({
            milliseconds: 0,
            nanoseconds: 0,
        });
        const timer = new timer_1.Timer(this.clock, new reservoir_1.SlidingWindowReservoir(3));
        const stopWatch = timer.newStopWatch();
        expect(timer.getCount()).to.equal(0);
        expect(timer.getSum().toNumber()).to.equal(0);
        expect(timer.get15MinuteRate()).to.equal(0);
        expect(timer.get5MinuteRate()).to.equal(0);
        expect(timer.get1MinuteRate()).to.equal(0);
        expect(timer.getMeanRate()).to.equal(0);
        let snapshot = timer.getSnapshot();
        expect(snapshot.get75thPercentile()).to.equal(0);
        expect(snapshot.get95thPercentile()).to.equal(0);
        expect(snapshot.get98thPercentile()).to.equal(0);
        expect(snapshot.get99thPercentile()).to.equal(0);
        expect(snapshot.get999thPercentile()).to.equal(0);
        expect(snapshot.getMax()).to.be.undefined;
        expect(snapshot.getMean()).to.equal(0);
        expect(snapshot.getMedian()).to.equal(0);
        expect(snapshot.getMin()).to.be.undefined;
        expect(snapshot.getStdDev()).to.equal(0);
        stopWatch.start();
        stopWatch.stop();
        expect(timer.getCount()).to.equal(1);
        expect(timer.getSum().toNumber()).to.equal(0);
        expect(timer.get15MinuteRate()).to.equal(0);
        expect(timer.get5MinuteRate()).to.equal(0);
        expect(timer.get1MinuteRate()).to.equal(0);
        expect(timer.getMeanRate()).to.equal(Infinity);
        snapshot = timer.getSnapshot();
        expect(snapshot.get75thPercentile()).to.equal(0);
        expect(snapshot.get95thPercentile()).to.equal(0);
        expect(snapshot.get98thPercentile()).to.equal(0);
        expect(snapshot.get99thPercentile()).to.equal(0);
        expect(snapshot.get999thPercentile()).to.equal(0);
        expect(snapshot.getMax()).to.equal(0);
        expect(snapshot.getMean()).to.equal(0);
        expect(snapshot.getMedian()).to.equal(0);
        expect(snapshot.getMin()).to.equal(0);
        expect(snapshot.getStdDev()).to.be.NaN;
    }
    "start and stop with time difference"() {
        this.clock.setCurrentTime({
            milliseconds: 0,
            nanoseconds: 0,
        });
        const timer = new timer_1.Timer(this.clock, new reservoir_1.SlidingWindowReservoir(3));
        const stopWatch = timer.newStopWatch();
        expect(timer.getCount()).to.equal(0);
        expect(timer.getSum().toNumber()).to.equal(0);
        expect(timer.get15MinuteRate()).to.equal(0);
        expect(timer.get5MinuteRate()).to.equal(0);
        expect(timer.get1MinuteRate()).to.equal(0);
        expect(timer.getMeanRate()).to.equal(0);
        let snapshot = timer.getSnapshot();
        expect(snapshot.get75thPercentile()).to.equal(0);
        expect(snapshot.get95thPercentile()).to.equal(0);
        expect(snapshot.get98thPercentile()).to.equal(0);
        expect(snapshot.get99thPercentile()).to.equal(0);
        expect(snapshot.get999thPercentile()).to.equal(0);
        expect(snapshot.getMax()).to.be.undefined;
        expect(snapshot.getMean()).to.equal(0);
        expect(snapshot.getMedian()).to.equal(0);
        expect(snapshot.getMin()).to.be.undefined;
        expect(snapshot.getStdDev()).to.equal(0);
        stopWatch.start();
        this.clock.setCurrentTime({
            milliseconds: 10,
            nanoseconds: 0,
        });
        stopWatch.stop();
        this.clock.setCurrentTime({
            milliseconds: 1001,
            nanoseconds: 0,
        });
        expect(timer.getCount()).to.equal(1);
        expect(timer.getSum().toNumber()).to.equal(10000000);
        expect(timer.get15MinuteRate()).to.greaterThan(0);
        expect(timer.get5MinuteRate()).to.greaterThan(0);
        expect(timer.get1MinuteRate()).to.greaterThan(0);
        expect(timer.getMeanRate()).to.lessThan(1);
        snapshot = timer.getSnapshot();
        expect(snapshot.get75thPercentile()).to.equal(10000000);
        expect(snapshot.get95thPercentile()).to.equal(10000000);
        expect(snapshot.get98thPercentile()).to.equal(10000000);
        expect(snapshot.get99thPercentile()).to.equal(10000000);
        expect(snapshot.get999thPercentile()).to.equal(10000000);
        expect(snapshot.getMax()).to.equal(10000000);
        expect(snapshot.getMean()).to.equal(10000000);
        expect(snapshot.getMedian()).to.equal(10000000);
        expect(snapshot.getMin()).to.equal(10000000);
        expect(snapshot.getStdDev()).to.be.NaN;
    }
    "start and stop with time difference within different rate-intervals"() {
        this.clock.setCurrentTime({
            milliseconds: 0,
            nanoseconds: 0,
        });
        const timer = new timer_1.Timer(this.clock, new reservoir_1.SlidingWindowReservoir(3));
        const stopWatch = timer.newStopWatch();
        expect(timer.getCount()).to.equal(0);
        expect(timer.getSum().toNumber()).to.equal(0);
        expect(timer.get15MinuteRate()).to.equal(0);
        expect(timer.get5MinuteRate()).to.equal(0);
        expect(timer.get1MinuteRate()).to.equal(0);
        expect(timer.getMeanRate()).to.equal(0);
        let snapshot = timer.getSnapshot();
        expect(snapshot.get75thPercentile()).to.equal(0);
        expect(snapshot.get95thPercentile()).to.equal(0);
        expect(snapshot.get98thPercentile()).to.equal(0);
        expect(snapshot.get99thPercentile()).to.equal(0);
        expect(snapshot.get999thPercentile()).to.equal(0);
        expect(snapshot.getMax()).to.be.undefined;
        expect(snapshot.getMean()).to.equal(0);
        expect(snapshot.getMedian()).to.equal(0);
        expect(snapshot.getMin()).to.be.undefined;
        expect(snapshot.getStdDev()).to.equal(0);
        stopWatch.start();
        this.clock.setCurrentTime({
            milliseconds: 10,
            nanoseconds: 0,
        });
        stopWatch.stop();
        this.clock.setCurrentTime({
            milliseconds: 1001,
            nanoseconds: 0,
        });
        expect(timer.getCount()).to.equal(1);
        expect(timer.getSum().toNumber()).to.equal(10000000);
        expect(timer.get15MinuteRate()).to.greaterThan(0);
        expect(timer.get5MinuteRate()).to.greaterThan(0);
        expect(timer.get1MinuteRate()).to.greaterThan(0);
        expect(timer.getMeanRate()).to.lessThan(1);
        snapshot = timer.getSnapshot();
        expect(snapshot.get75thPercentile()).to.equal(10000000);
        expect(snapshot.get95thPercentile()).to.equal(10000000);
        expect(snapshot.get98thPercentile()).to.equal(10000000);
        expect(snapshot.get99thPercentile()).to.equal(10000000);
        expect(snapshot.get999thPercentile()).to.equal(10000000);
        expect(snapshot.getMax()).to.equal(10000000);
        expect(snapshot.getMean()).to.equal(10000000);
        expect(snapshot.getMedian()).to.equal(10000000);
        expect(snapshot.getMin()).to.equal(10000000);
        expect(snapshot.getStdDev()).to.be.NaN;
        stopWatch.start();
        this.clock.setCurrentTime({
            milliseconds: 1011,
            nanoseconds: 0,
        });
        stopWatch.stop();
        this.clock.setCurrentTime({
            milliseconds: 5001,
            nanoseconds: 0,
        });
        expect(timer.getCount()).to.equal(2);
        expect(timer.getSum().toNumber()).to.equal(20000000);
        expect(timer.get15MinuteRate()).to.greaterThan(0);
        expect(timer.get5MinuteRate()).to.greaterThan(0);
        expect(timer.get1MinuteRate()).to.greaterThan(0);
        expect(timer.getMeanRate()).to.lessThan(1);
        snapshot = timer.getSnapshot();
        expect(snapshot.get75thPercentile()).to.equal(10000000);
        expect(snapshot.get95thPercentile()).to.equal(10000000);
        expect(snapshot.get98thPercentile()).to.equal(10000000);
        expect(snapshot.get99thPercentile()).to.equal(10000000);
        expect(snapshot.get999thPercentile()).to.equal(10000000);
        expect(snapshot.getMax()).to.equal(10000000);
        expect(snapshot.getMean()).to.equal(10000000);
        expect(snapshot.getMedian()).to.equal(10000000);
        expect(snapshot.getMin()).to.equal(10000000);
        expect(snapshot.getStdDev()).to.equal(0);
    }
};
__decorate([
    mocha_typescript_1.test,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], StopWatchTest.prototype, "start and stop without time difference", null);
__decorate([
    mocha_typescript_1.test,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], StopWatchTest.prototype, "start and stop with time difference", null);
__decorate([
    mocha_typescript_1.test,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], StopWatchTest.prototype, "start and stop with time difference within different rate-intervals", null);
StopWatchTest = __decorate([
    mocha_typescript_1.suite
], StopWatchTest);
exports.StopWatchTest = StopWatchTest;
//# sourceMappingURL=timer-test.js.map