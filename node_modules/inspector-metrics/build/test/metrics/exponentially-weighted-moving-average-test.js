"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
require("reflect-metadata");
require("source-map-support/register");
const chai = require("chai");
const mocha_typescript_1 = require("mocha-typescript");
const moving_average_1 = require("../../lib/metrics/moving-average");
const time_unit_1 = require("../../lib/metrics/time-unit");
const expect = chai.expect;
let ExponentiallyWeightedMovingAverageTest = class ExponentiallyWeightedMovingAverageTest {
    before() {
        this.movingAverage = new moving_average_1.ExponentiallyWeightedMovingAverage(0.5, 1, time_unit_1.MILLISECOND);
    }
    "check basics"() {
        expect(this.movingAverage.getAlpha()).to.equal(0.5);
        expect(this.movingAverage.getUnit()).to.equal(time_unit_1.MILLISECOND);
    }
    "no values"() {
        expect(this.movingAverage.getAverage(time_unit_1.MILLISECOND)).to.equal(0);
    }
    "1 value average"() {
        expect(this.movingAverage.getAverage(time_unit_1.MILLISECOND)).to.equal(0);
        this.movingAverage.update(5);
        expect(this.movingAverage.getAverage(time_unit_1.MILLISECOND)).to.equal(0);
        this.movingAverage.tick();
        expect(this.movingAverage.getAverage(time_unit_1.MILLISECOND)).to.equal(5.0);
    }
    "multiple values"() {
        this.movingAverage.update(5);
        this.movingAverage.tick();
        this.movingAverage.update(6);
        this.movingAverage.tick();
        this.movingAverage.update(7);
        this.movingAverage.tick();
        expect(this.movingAverage.getAverage(time_unit_1.MILLISECOND)).to.equal(6.25);
    }
    "multiple values using fluent interface"() {
        this.movingAverage
            .update(5)
            .tick()
            .update(6)
            .tick()
            .update(7)
            .tick();
        expect(this.movingAverage.getAverage(time_unit_1.MILLISECOND)).to.equal(6.25);
    }
    "multiple values - degraded"() {
        this.movingAverage.update(5);
        this.movingAverage.tick();
        this.movingAverage.update(6);
        this.movingAverage.tick();
        this.movingAverage.update(7);
        this.movingAverage.tick();
        expect(this.movingAverage.getAverage(time_unit_1.MILLISECOND)).to.equal(6.25);
        this.movingAverage.tick();
        expect(this.movingAverage.getAverage(time_unit_1.MILLISECOND)).to.equal(3.125);
        this.movingAverage.tick();
        expect(this.movingAverage.getAverage(time_unit_1.MILLISECOND)).to.equal(1.5625);
        this.movingAverage.tick();
        expect(this.movingAverage.getAverage(time_unit_1.MILLISECOND)).to.equal(0.78125);
    }
    "multiple values - all same"() {
        this.movingAverage.update(5);
        this.movingAverage.tick();
        this.movingAverage.update(5);
        this.movingAverage.tick();
        this.movingAverage.update(5);
        this.movingAverage.tick();
        expect(this.movingAverage.getAverage(time_unit_1.MILLISECOND)).to.equal(5);
        this.movingAverage.update(5);
        this.movingAverage.tick();
        expect(this.movingAverage.getAverage(time_unit_1.MILLISECOND)).to.equal(5);
        this.movingAverage.update(5);
        this.movingAverage.tick();
        expect(this.movingAverage.getAverage(time_unit_1.MILLISECOND)).to.equal(5);
        this.movingAverage.update(5);
        this.movingAverage.tick();
        expect(this.movingAverage.getAverage(time_unit_1.MILLISECOND)).to.equal(5);
        this.movingAverage.update(5);
        this.movingAverage.tick();
        expect(this.movingAverage.getAverage(time_unit_1.MILLISECOND)).to.equal(5);
    }
    "multiple values - increasing"() {
        this.movingAverage.update(5);
        this.movingAverage.tick();
        expect(this.movingAverage.getAverage(time_unit_1.MILLISECOND)).to.equal(5);
        this.movingAverage.update(7);
        this.movingAverage.tick();
        expect(this.movingAverage.getAverage(time_unit_1.MILLISECOND)).to.equal(6);
        this.movingAverage.update(8);
        this.movingAverage.tick();
        expect(this.movingAverage.getAverage(time_unit_1.MILLISECOND)).to.equal(7);
        this.movingAverage.update(9);
        this.movingAverage.tick();
        expect(this.movingAverage.getAverage(time_unit_1.MILLISECOND)).to.equal(8);
        this.movingAverage.update(9);
        this.movingAverage.tick();
        expect(this.movingAverage.getAverage(time_unit_1.MILLISECOND)).to.equal(8.5);
        this.movingAverage.update(9);
        this.movingAverage.tick();
        expect(this.movingAverage.getAverage(time_unit_1.MILLISECOND)).to.equal(8.75);
        this.movingAverage.update(9);
        this.movingAverage.tick();
        expect(this.movingAverage.getAverage(time_unit_1.MILLISECOND)).to.equal(8.875);
    }
};
__decorate([
    mocha_typescript_1.test,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], ExponentiallyWeightedMovingAverageTest.prototype, "check basics", null);
__decorate([
    mocha_typescript_1.test,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], ExponentiallyWeightedMovingAverageTest.prototype, "no values", null);
__decorate([
    mocha_typescript_1.test,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], ExponentiallyWeightedMovingAverageTest.prototype, "1 value average", null);
__decorate([
    mocha_typescript_1.test,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], ExponentiallyWeightedMovingAverageTest.prototype, "multiple values", null);
__decorate([
    mocha_typescript_1.test,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], ExponentiallyWeightedMovingAverageTest.prototype, "multiple values using fluent interface", null);
__decorate([
    mocha_typescript_1.test,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], ExponentiallyWeightedMovingAverageTest.prototype, "multiple values - degraded", null);
__decorate([
    mocha_typescript_1.test,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], ExponentiallyWeightedMovingAverageTest.prototype, "multiple values - all same", null);
__decorate([
    mocha_typescript_1.test,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], ExponentiallyWeightedMovingAverageTest.prototype, "multiple values - increasing", null);
ExponentiallyWeightedMovingAverageTest = __decorate([
    mocha_typescript_1.suite
], ExponentiallyWeightedMovingAverageTest);
exports.ExponentiallyWeightedMovingAverageTest = ExponentiallyWeightedMovingAverageTest;
//# sourceMappingURL=exponentially-weighted-moving-average-test.js.map