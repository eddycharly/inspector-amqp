"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
require("reflect-metadata");
require("source-map-support/register");
const chai = require("chai");
const mocha_typescript_1 = require("mocha-typescript");
const snapshot_1 = require("../../lib/metrics/snapshot");
const expect = chai.expect;
let SnapshotTest = class SnapshotTest {
    "check sort of values"() {
        const snapshot = new snapshot_1.SimpleSnapshot([1, 2, 3, 5, 100, 300, -1, -999, -100, 200, 0, 400, 999, 4, 846]);
        expect(`${snapshot.getValues()}`)
            .to.deep.equal(`${[-999, -100, -1, 0, 1, 2, 3, 4, 5, 100, 200, 300, 400, 846, 999]}`);
        expect(snapshot.getMax()).to.equal(999);
        expect(snapshot.getMin()).to.equal(-999);
    }
};
__decorate([
    mocha_typescript_1.test,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], SnapshotTest.prototype, "check sort of values", null);
SnapshotTest = __decorate([
    mocha_typescript_1.suite
], SnapshotTest);
exports.SnapshotTest = SnapshotTest;
//# sourceMappingURL=snapshot-test.js.map