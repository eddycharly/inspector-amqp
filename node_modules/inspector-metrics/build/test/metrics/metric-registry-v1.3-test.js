"use strict";
/* tslint:disable:no-unused-expression */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
require("reflect-metadata");
require("source-map-support/register");
const chai = require("chai");
const mocha_typescript_1 = require("mocha-typescript");
const sinonChai = require("sinon-chai");
const gauge_1 = require("../../lib/metrics/gauge");
const metric_registry_1 = require("../../lib/metrics/metric-registry");
chai.use(sinonChai);
const expect = chai.expect;
let MetricRegistryTest = class MetricRegistryTest {
    "register multiple metrics with same name"() {
        const registry = new metric_registry_1.MetricRegistry();
        expect(registry.getMetricList()).to.have.length(0);
        const gauge1 = new gauge_1.SimpleGauge("myValue");
        gauge1.setTag("type", "type1");
        const gauge2 = new gauge_1.SimpleGauge("myValue");
        gauge2.setTag("type", "type2");
        registry.registerMetric(gauge1);
        registry.registerMetric(gauge2);
        expect(registry.getMetricsByName("myValue")).to.have.length(2);
        const metrics = registry.getMetricList();
        expect(metrics).to.have.length(2);
        expect(metrics[0]).to.equal(gauge1);
        expect(metrics[1]).to.equal(gauge2);
        registry.removeMetrics("myValue");
        expect(registry.getMetricList()).to.have.length(0);
    }
    "register metrics-set within metrics-registry"() {
        const registry1 = new metric_registry_1.MetricRegistry();
        const registry2 = new metric_registry_1.MetricRegistry();
        expect(registry1.getMetricList()).to.have.length(0);
        expect(registry2.getMetricList()).to.have.length(0);
        const gauge1 = new gauge_1.SimpleGauge("myValue");
        gauge1.setTag("type", "type1");
        const gauge2 = new gauge_1.SimpleGauge("myValue");
        gauge2.setTag("type", "type2");
        const gauge3 = new gauge_1.SimpleGauge("myValue");
        gauge3.setTag("type", "type3");
        const gauge4 = new gauge_1.SimpleGauge("myValue");
        gauge4.setTag("type", "type4");
        registry1.registerMetric(gauge1);
        registry1.registerMetric(gauge2);
        registry2.registerMetric(gauge3);
        registry2.registerMetric(gauge4);
        registry1.registerMetric(registry2);
        expect(registry1.getMetricsByName("myValue")).to.have.length(4);
        expect(registry2.getMetricsByName("myValue")).to.have.length(2);
        let metrics = registry2.getMetricList();
        expect(metrics).to.have.length(2);
        expect(metrics[0]).to.equal(gauge3);
        expect(metrics[1]).to.equal(gauge4);
        registry2.removeMetrics("myValue");
        expect(registry1.getMetricList()).to.have.length(4);
        expect(registry2.getMetricList()).to.have.length(0);
        metrics = registry1.getMetricList();
        expect(metrics).to.have.length(4);
        expect(metrics[0]).to.equal(gauge1);
        expect(metrics[1]).to.equal(gauge2);
        expect(metrics[2]).to.equal(gauge3);
        expect(metrics[3]).to.equal(gauge4);
        registry1.removeMetrics("myValue");
        expect(registry1.getMetricList()).to.have.length(0);
        expect(registry2.getMetricList()).to.have.length(0);
    }
};
__decorate([
    mocha_typescript_1.test,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], MetricRegistryTest.prototype, "register multiple metrics with same name", null);
__decorate([
    mocha_typescript_1.test,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], MetricRegistryTest.prototype, "register metrics-set within metrics-registry", null);
MetricRegistryTest = __decorate([
    mocha_typescript_1.suite
], MetricRegistryTest);
exports.MetricRegistryTest = MetricRegistryTest;
//# sourceMappingURL=metric-registry-v1.3-test.js.map