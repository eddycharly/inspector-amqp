"use strict";
// tslint:disable:no-unused-expression
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
require("reflect-metadata");
require("source-map-support/register");
const chai = require("chai");
const mocha_typescript_1 = require("mocha-typescript");
const metric_1 = require("../../lib/metrics/metric");
const expect = chai.expect;
class TestMetric extends metric_1.BaseMetric {
}
exports.TestMetric = TestMetric;
let BaseMetricTest = class BaseMetricTest {
    "add tag, set tag, remove tag, check tag"() {
        const baseMetric = new TestMetric();
        expect(baseMetric.getTags()).to.be.a("Map");
        expect(baseMetric.getTags()).to.satisfy((map) => map.size === 0);
        baseMetric.setTag("application", "metric-app");
        expect(baseMetric.getTags()).to.satisfy((map) => map.size === 1);
        expect(baseMetric.getTag("application")).to.equal("metric-app");
        baseMetric.setTag("application", "metric-app2");
        expect(baseMetric.getTags()).to.satisfy((map) => map.size === 1);
        expect(baseMetric.getTag("application")).to.equal("metric-app2");
        baseMetric.removeTag("application");
        expect(baseMetric.getTags()).to.satisfy((map) => map.size === 0);
    }
    "add metadata, set metadata, remove metadata, check metadata"() {
        const baseMetric = new TestMetric();
        expect(baseMetric.getMetadataMap()).to.be.a("Map");
        expect(baseMetric.getMetadataMap()).to.satisfy((map) => map.size === 0);
        baseMetric.setMetadata("config1", 123);
        baseMetric.setMetadata("config2", "Test");
        expect(baseMetric.getMetadataMap()).to.satisfy((map) => map.size === 2);
        expect(baseMetric.getMetadata("config1")).to.equal(123);
        expect(baseMetric.getMetadata("config2")).to.equal("Test");
        baseMetric.setMetadata("config1", 456);
        baseMetric.setMetadata("config2", "config test 2");
        expect(baseMetric.getMetadataMap()).to.satisfy((map) => map.size === 2);
        expect(baseMetric.getMetadata("config1")).to.equal(456);
        expect(baseMetric.getMetadata("config2")).to.equal("config test 2");
        baseMetric.removeMetadata("config2");
        expect(baseMetric.getMetadataMap()).to.satisfy((map) => map.size === 1);
        expect(baseMetric.getMetadata("config1")).to.equal(456);
    }
    "set group, check group"() {
        const baseMetric = new TestMetric();
        expect(baseMetric.getGroup()).to.be.undefined;
        baseMetric.setGroup("group1");
        expect(baseMetric.getGroup()).to.equal("group1");
    }
    "set description, check description"() {
        const baseMetric = new TestMetric();
        expect(baseMetric.getDescription()).to.be.undefined;
        baseMetric.setDescription("description1");
        expect(baseMetric.getDescription()).to.equal("description1");
    }
    "set multiple values with fluent interface"() {
        const baseMetric = new TestMetric();
        expect(baseMetric.getDescription()).to.be.undefined;
        expect(baseMetric.getGroup()).to.be.undefined;
        expect(baseMetric.getMetadataMap()).to.be.a("Map");
        expect(baseMetric.getMetadataMap()).to.satisfy((map) => map.size === 0);
        expect(baseMetric.getTags()).to.be.a("Map");
        expect(baseMetric.getTags()).to.satisfy((map) => map.size === 0);
        baseMetric
            .setDescription("description1")
            .setGroup("group1")
            .setMetadata("config1", 123)
            .setMetadata("config2", "Test")
            .setTag("application", "metric-app");
        expect(baseMetric.getDescription()).to.equal("description1");
        expect(baseMetric.getGroup()).to.equal("group1");
        expect(baseMetric.getMetadataMap()).to.satisfy((map) => map.size === 2);
        expect(baseMetric.getMetadata("config1")).to.equal(123);
        expect(baseMetric.getMetadata("config2")).to.equal("Test");
        expect(baseMetric.getTags()).to.satisfy((map) => map.size === 1);
        expect(baseMetric.getTag("application")).to.equal("metric-app");
        baseMetric
            .setMetadata("config1", 456)
            .setMetadata("config2", "config test 2")
            .setTag("application", "metric-app2");
        expect(baseMetric.getMetadataMap()).to.satisfy((map) => map.size === 2);
        expect(baseMetric.getMetadata("config1")).to.equal(456);
        expect(baseMetric.getMetadata("config2")).to.equal("config test 2");
        expect(baseMetric.getTags()).to.satisfy((map) => map.size === 1);
        expect(baseMetric.getTag("application")).to.equal("metric-app2");
        baseMetric
            .removeTag("application")
            .removeMetadata("config2");
        expect(baseMetric.getMetadataMap()).to.satisfy((map) => map.size === 1);
        expect(baseMetric.getMetadata("config1")).to.equal(456);
        expect(baseMetric.getTags()).to.satisfy((map) => map.size === 0);
    }
};
__decorate([
    mocha_typescript_1.test,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], BaseMetricTest.prototype, "add tag, set tag, remove tag, check tag", null);
__decorate([
    mocha_typescript_1.test,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], BaseMetricTest.prototype, "add metadata, set metadata, remove metadata, check metadata", null);
__decorate([
    mocha_typescript_1.test,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], BaseMetricTest.prototype, "set group, check group", null);
__decorate([
    mocha_typescript_1.test,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], BaseMetricTest.prototype, "set description, check description", null);
__decorate([
    mocha_typescript_1.test,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], BaseMetricTest.prototype, "set multiple values with fluent interface", null);
BaseMetricTest = __decorate([
    mocha_typescript_1.suite
], BaseMetricTest);
exports.BaseMetricTest = BaseMetricTest;
//# sourceMappingURL=base-metric-test.js.map