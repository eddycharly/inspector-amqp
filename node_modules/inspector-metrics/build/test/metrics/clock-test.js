"use strict";
/* tslint:disable:no-unused-expression */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
require("reflect-metadata");
require("source-map-support/register");
const chai = require("chai");
const mocha_typescript_1 = require("mocha-typescript");
const clock_1 = require("../../lib/metrics/clock");
const expect = chai.expect;
let DiffTest = class DiffTest {
    "diff with null values"() {
        expect(clock_1.diff(null, null)).to.equal(0);
    }
    "diff with same value"() {
        const time = {
            milliseconds: 0,
            nanoseconds: 0,
        };
        expect(clock_1.diff(time, time)).to.equal(0);
    }
    "diff with different nanoseconds"() {
        const one = {
            milliseconds: 0,
            nanoseconds: 0,
        };
        const two = {
            milliseconds: 0,
            nanoseconds: 1,
        };
        expect(clock_1.diff(one, two)).to.equal(1);
    }
    "diff with different milliseconds"() {
        const one = {
            milliseconds: 0,
            nanoseconds: 0,
        };
        const two = {
            milliseconds: 1,
            nanoseconds: 0,
        };
        expect(clock_1.diff(one, two)).to.equal(1000000);
    }
    "diff with different milliseconds and nanoseconds"() {
        const one = {
            milliseconds: 0,
            nanoseconds: 0,
        };
        const two = {
            milliseconds: 1,
            nanoseconds: 2,
        };
        expect(clock_1.diff(one, two)).to.equal(1000002);
    }
};
__decorate([
    mocha_typescript_1.test,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], DiffTest.prototype, "diff with null values", null);
__decorate([
    mocha_typescript_1.test,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], DiffTest.prototype, "diff with same value", null);
__decorate([
    mocha_typescript_1.test,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], DiffTest.prototype, "diff with different nanoseconds", null);
__decorate([
    mocha_typescript_1.test,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], DiffTest.prototype, "diff with different milliseconds", null);
__decorate([
    mocha_typescript_1.test,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], DiffTest.prototype, "diff with different milliseconds and nanoseconds", null);
DiffTest = __decorate([
    mocha_typescript_1.suite
], DiffTest);
exports.DiffTest = DiffTest;
let StdClockTest = class StdClockTest {
    "check time function"() {
        const time = new clock_1.StdClock().time();
        expect(time).to.be.not.null;
    }
};
__decorate([
    mocha_typescript_1.test,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], StdClockTest.prototype, "check time function", null);
StdClockTest = __decorate([
    mocha_typescript_1.suite
], StdClockTest);
exports.StdClockTest = StdClockTest;
//# sourceMappingURL=clock-test.js.map