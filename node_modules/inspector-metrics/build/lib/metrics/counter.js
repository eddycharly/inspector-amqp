"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("source-map-support/register");
const metric_1 = require("./metric");
/**
 * A monotonically increasing number.
 * The initial value is 0.
 *
 * @export
 * @class MonotoneCounter
 * @extends {BaseMetric}
 * @implements {Counting}
 * @implements {Metric}
 */
class MonotoneCounter extends metric_1.BaseMetric {
    /**
     * Creates an instance of MonotoneCounter.
     *
     * @param {string} [name] optional name of the counter
     * @param {string} [description] optional description of the counter
     * @memberof MonotoneCounter
     */
    constructor(name, description) {
        super();
        /**
         * Holds the current value.
         *
         * @private
         * @type {number}
         * @memberof MonotoneCounter
         */
        this.count = 0;
        this.name = name;
        this.description = description;
    }
    /**
     * Increases the current count by the given value - a negative value is causing an error.
     *
     * @param {number} value
     * @returns {this}
     * @memberof MonotoneCounter
     */
    increment(value) {
        if (value < 0) {
            throw new Error("MonotoneCounter must not be increased by a negative value");
        }
        this.count += value;
        return this;
    }
    /**
     * Gets the current count.
     *
     * @returns {number}
     * @memberof MonotoneCounter
     */
    getCount() {
        return this.count;
    }
    /**
     * Sets the current count to 0.
     *
     * @returns {this}
     * @memberof MonotoneCounter
     */
    reset() {
        this.count = 0;
        return this;
    }
}
exports.MonotoneCounter = MonotoneCounter;
/**
 * A counter represents a number that can be increased or decreased in steps.
 * The initial value is 0.
 *
 * @export
 * @class Counter
 * @extends {MonotoneCounter}
 * @implements {Counting}
 * @implements {Metric}
 */
class Counter extends MonotoneCounter {
    /**
     * Creates an instance of Counter.
     *
     * @param {string} [name] optional name of the counter
     * @param {string} [description] optional description of the counter
     * @memberof Counter
     */
    constructor(name, description) {
        super(name, description);
    }
    /**
     * Increases the current count by the given value - a negative value is decreasing the current count.
     *
     * @param {number} value
     * @returns {this}
     * @memberof MonotoneCounter
     */
    increment(value) {
        this.count += value;
        return this;
    }
    /**
     * Decreases the current count by the given value - a negative value is increasing the current count.
     *
     * @param {number} value
     * @returns {this}
     * @memberof Counter
     */
    decrement(value) {
        this.count -= value;
        return this;
    }
}
exports.Counter = Counter;
//# sourceMappingURL=counter.js.map