import "source-map-support/register";
import { TimeUnit } from "./time-unit";
/**
 * Represents an average value which depends on an alpha factor.
 *
 * @export
 * @interface MovingAverage
 */
export interface MovingAverage {
    /**
     * Gets the alpha value.
     *
     * @returns {number}
     * @memberof MovingAverage
     */
    getAlpha(): number;
    /**
     * Gets the average for the specified time unit -
     * e.g. 500 per second or 0.5 per millisecond or 30.000 per minute.
     *
     * @param {TimeUnit} unit
     * @returns {number}
     * @memberof MovingAverage
     */
    getAverage(unit: TimeUnit): number;
    /**
     * Adds the given value to the logic of the implementation.
     *
     * @param {number} value
     * @returns {this}
     * @memberof MovingAverage
     */
    update(value: number): this;
    /**
     * Triggers the actual average to be updated.
     * A tick represents an update event.
     *
     * @returns {this}
     * @memberof MovingAverage
     */
    tick(): this;
}
/**
 * Calculates the moving average with an exponential alpha value.
 *
 * @export
 * @class ExponentiallyWeightedMovingAverage
 * @implements {MovingAverage}
 */
export declare class ExponentiallyWeightedMovingAverage implements MovingAverage {
    static ALPHA_1_MINUTE_1_SECOND_SAMPLERATE: number;
    static ALPHA_1_MINUTE_5_SECOND_SAMPLERATE: number;
    static ALPHA_5_MINUTE_1_SECOND_SAMPLERATE: number;
    static ALPHA_5_MINUTE_5_SECOND_SAMPLERATE: number;
    static ALPHA_15_MINUTE_1_SECOND_SAMPLERATE: number;
    static ALPHA_15_MINUTE_5_SECOND_SAMPLERATE: number;
    /**
     * Alpha component (weight) of the moving average.
     *
     * @private
     * @type {number}
     * @memberof ExponentiallyWeightedMovingAverage
     */
    private alpha;
    /**
     * The sampling interval.
     *
     * @private
     * @type {number}
     * @memberof ExponentiallyWeightedMovingAverage
     */
    private interval;
    /**
     * The sum of all values passed to the update function.
     *
     * @private
     * @type {number}
     * @memberof ExponentiallyWeightedMovingAverage
     */
    private sum;
    /**
     * The current average.
     *
     * @private
     * @type {number}
     * @memberof ExponentiallyWeightedMovingAverage
     */
    private avg;
    /**
     * Multiplier of the time unit specified in the constructor in nanoseconds.
     *
     * @private
     * @type {number}
     * @memberof ExponentiallyWeightedMovingAverage
     */
    private timeUnitInNanoseconds;
    /**
     * The time unit of the sampling rate.
     *
     * @private
     * @type {TimeUnit}
     * @memberof ExponentiallyWeightedMovingAverage
     */
    private unit;
    /**
     * Creates an instance of ExponentiallyWeightedMovingAverage.
     *
     * @param {number} alpha
     * @param {number} interval
     * @param {TimeUnit} unit
     * @memberof ExponentiallyWeightedMovingAverage
     */
    constructor(alpha: number, interval: number, unit: TimeUnit);
    /**
     * Gets the alpha value.
     *
     * @returns {number}
     * @memberof ExponentiallyWeightedMovingAverage
     */
    getAlpha(): number;
    /**
     * Gets the time unit.
     *
     * @returns {TimeUnit}
     * @memberof ExponentiallyWeightedMovingAverage
     */
    getUnit(): TimeUnit;
    /**
     * Gets the average in the specified time unit.
     *
     * @param {TimeUnit} unit
     * @returns {number}
     * @memberof ExponentiallyWeightedMovingAverage
     */
    getAverage(unit: TimeUnit): number;
    /**
     * Adds the value to the current sum.
     *
     * @param {number} value
     * @returns {this}
     * @memberof ExponentiallyWeightedMovingAverage
     */
    update(value: number): this;
    /**
     * Updates the current average by multiplying the alpha value with the difference
     * of the last average and the current average.
     *
     * Averages are calculated by dividing the sum through the sampling interval.
     *
     * If the alpha value is high the last average has more weight and vice versa.
     *
     * @returns {this}
     * @memberof ExponentiallyWeightedMovingAverage
     */
    tick(): this;
}
