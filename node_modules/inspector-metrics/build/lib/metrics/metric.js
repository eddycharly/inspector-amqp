"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("source-map-support/register");
/**
 * Abstract base-class for a metric which implements commonly needed functions:
 * - get / set name
 * - get / set tags
 * - get / set group
 *
 * @export
 * @abstract
 * @class BaseMetric
 * @implements {Metric}
 */
class BaseMetric {
    constructor() {
        /**
         * The unique id of this metric instance.
         *
         * @type {number}
         * @memberof BaseMetric
         */
        this.id = BaseMetric.COUNTER++;
        /**
         * Maps of tags for this metric.
         *
         * @protected
         * @type {Map<string, string>}
         * @memberof BaseMetric
         */
        this.tags = new Map();
        /**
         * The metadata associated with an instance of class.
         *
         * @protected
         * @type {Map<string, any>}
         * @memberof BaseMetric
         */
        this.metadata = new Map();
    }
    getMetadataMap() {
        return this.metadata;
    }
    getMetadata(name) {
        return this.metadata.get(name);
    }
    removeMetadata(name) {
        const value = this.metadata.get(name);
        this.metadata.delete(name);
        return value;
    }
    setMetadata(name, value) {
        this.metadata.set(name, value);
        return this;
    }
    getName() {
        return this.name;
    }
    setName(name) {
        this.name = name;
        return this;
    }
    getDescription() {
        return this.description;
    }
    setDescription(description) {
        this.description = description;
        return this;
    }
    getGroup() {
        return this.group;
    }
    setGroup(group) {
        this.group = group;
        return this;
    }
    getTags() {
        return this.tags;
    }
    getTag(name) {
        return this.tags.get(name);
    }
    setTag(name, value) {
        this.tags.set(name, value);
        return this;
    }
    setTags(tags) {
        this.tags = tags;
        return this;
    }
    addTags(tags) {
        tags.forEach((value, key) => this.tags.set(key, value));
        return this;
    }
    removeTag(name) {
        this.tags.delete(name);
        return this;
    }
    removeTags(...names) {
        names.forEach((name) => this.removeTag(name));
        return this;
    }
    toString() {
        if (this.group) {
            return `${this.group}.${this.name}`;
        }
        return this.name;
    }
}
/**
 * A static number instance to give an unique id within an application instance.
 *
 * @private
 * @static
 * @memberof BaseMetric
 */
BaseMetric.COUNTER = 0;
exports.BaseMetric = BaseMetric;
//# sourceMappingURL=metric.js.map