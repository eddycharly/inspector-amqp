"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("source-map-support/register");
/**
 * Default implementation of the {@link Snapshot} interface.
 *
 * @export
 * @class SimpleSnapshot
 * @implements {Snapshot}
 */
class SimpleSnapshot {
    /**
     * Creates an instance of SimpleSnapshot.
     *
     * @param {number[]} values
     * @memberof SimpleSnapshot
     */
    constructor(values) {
        /**
         * Sorted collection of values.
         *
         * @private
         * @type {number[]}
         * @memberof SimpleSnapshot
         */
        this.values = [];
        this.values = values.slice(0, values.length);
        this.values = this.values.sort((a, b) => a - b);
    }
    /**
     * Calls getValue(0.75) to get the value of the 75% boundary
     *
     * @returns {number}
     * @memberof SimpleSnapshot
     */
    get75thPercentile() {
        return this.getValue(0.75);
    }
    /**
     * Calls getValue(0.95) to get the value of the 95% boundary
     *
     * @returns {number}
     * @memberof SimpleSnapshot
     */
    get95thPercentile() {
        return this.getValue(0.95);
    }
    /**
     * Calls getValue(0.98) to get the value of the 98% boundary
     *
     * @returns {number}
     * @memberof SimpleSnapshot
     */
    get98thPercentile() {
        return this.getValue(0.98);
    }
    /**
     * Calls getValue(0.999) to get the value of the 99.9% boundary
     *
     * @returns {number}
     * @memberof SimpleSnapshot
     */
    get999thPercentile() {
        return this.getValue(0.999);
    }
    /**
     * Calls getValue(0.99) to get the value of the 99% boundary
     *
     * @returns {number}
     * @memberof SimpleSnapshot
     */
    get99thPercentile() {
        return this.getValue(0.99);
    }
    /**
     * Calls getValue(0.5) to get the value of the 50% boundary
     *
     * @returns {number}
     * @memberof SimpleSnapshot
     */
    getMedian() {
        return this.getValue(0.5);
    }
    /**
     * Gets the last value of the value array.
     *
     * @returns {number}
     * @memberof SimpleSnapshot
     */
    getMax() {
        return this.values[this.values.length - 1];
    }
    /**
     * Gets the first value of the value array.
     *
     * @returns {number}
     * @memberof SimpleSnapshot
     */
    getMin() {
        return this.values[0];
    }
    /**
     * Gets the value array.
     *
     * @returns {number[]}
     * @memberof SimpleSnapshot
     */
    getValues() {
        return this.values;
    }
    /**
     * Gets the length of the value array.
     *
     * @returns {number}
     * @memberof SimpleSnapshot
     */
    size() {
        return this.values.length;
    }
    /**
     * Gets average value of the value array.
     *
     * @returns {number}
     * @memberof SimpleSnapshot
     */
    getMean() {
        if (this.values.length === 0) {
            return 0;
        }
        let sum = 0;
        this.values.forEach((value) => sum += value);
        return sum / this.values.length;
    }
    /**
     * Gets the average deviation among the values.
     *
     * @returns {number}
     * @memberof SimpleSnapshot
     */
    getStdDev() {
        if (this.values.length === 0) {
            return 0;
        }
        const mean = this.getMean();
        let sum = 0;
        this.values.forEach((value) => {
            const diff = value - mean;
            sum += diff * diff;
        });
        return Math.sqrt(sum / (this.values.length - 1));
    }
    /**
     * Gets the value of the boundary specified.
     *
     * E.g. considering the following values (sorted): [12, 20, 22, 25, 30, 32, 40, 50, 55, 56]
     *
     * quantile | position / index | value
     *
     * 0.25 | 3 | 24.25
     *
     * 0.5 | 5 | 36
     *
     * 0.75 | 8 | 51,25
     *
     * 0.95 | 10 | NaN
     *
     * @param {number} quantile
     * @returns {number}
     * @memberof SimpleSnapshot
     */
    getValue(quantile) {
        if (quantile < 0.0 || quantile > 1.0 || isNaN(quantile)) {
            return NaN;
        }
        if (this.values.length === 0) {
            return 0;
        }
        const pos = quantile * (this.values.length + 1);
        const index = Math.round(pos);
        if (index < 1) {
            return this.getMin();
        }
        else if (index >= this.values.length) {
            return this.getMax();
        }
        const lower = this.values[index - 1];
        const upper = this.values[index];
        return lower + (pos - Math.floor(pos)) * (upper - lower);
    }
}
exports.SimpleSnapshot = SimpleSnapshot;
//# sourceMappingURL=snapshot.js.map