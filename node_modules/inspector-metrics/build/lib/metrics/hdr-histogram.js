"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("source-map-support/register");
const counting_1 = require("./counting");
const histogram_1 = require("./histogram");
/**
 * The 'native-hdr-histogram' module (optional).
 */
let NativeHistogram = null;
try {
    NativeHistogram = require("native-hdr-histogram");
}
catch (e) {
}
/**
 * Snapshot implementation for a {@link HdrHistogram} reference.
 *
 * @export
 * @class HdrSnapshot
 * @implements {Snapshot}
 */
class HdrSnapshot {
    /**
     * Creates an instance of HdrSnapshot.
     * @param {*} reference
     * @memberof HdrSnapshot
     */
    constructor(reference) {
        this.reference = reference;
    }
    /**
     * Calls the native hrd-histogram implementation of the
     * referenced {@link HdrHistogram} for the 75th percentile.
     *
     * @returns {number}
     * @memberof HdrSnapshot
     */
    get75thPercentile() {
        return this.reference.histogram.percentile(75);
    }
    /**
     * Calls the native hrd-histogram implementation of the
     * referenced {@link HdrHistogram} for the 95th percentile.
     *
     * @returns {number}
     * @memberof HdrSnapshot
     */
    get95thPercentile() {
        return this.reference.histogram.percentile(95);
    }
    /**
     * Calls the native hrd-histogram implementation of the
     * referenced {@link HdrHistogram} for the 98th percentile.
     *
     * @returns {number}
     * @memberof HdrSnapshot
     */
    get98thPercentile() {
        return this.reference.histogram.percentile(98);
    }
    /**
     * Calls the native hrd-histogram implementation of the
     * referenced {@link HdrHistogram} for the 99.9th percentile.
     *
     * @returns {number}
     * @memberof HdrSnapshot
     */
    get999thPercentile() {
        return this.reference.histogram.percentile(99.9);
    }
    /**
     * Calls the native hrd-histogram implementation of the
     * referenced {@link HdrHistogram} for the 99th percentile.
     *
     * @returns {number}
     * @memberof HdrSnapshot
     */
    get99thPercentile() {
        return this.reference.histogram.percentile(99);
    }
    /**
     * Calls the native hrd-histogram implementation of the
     * referenced {@link HdrHistogram} for the 50th percentile.
     *
     * @returns {number}
     * @memberof HdrSnapshot
     */
    getMedian() {
        return this.reference.histogram.percentile(50);
    }
    /**
     * Calls the native hrd-histogram implementation of the
     * referenced {@link HdrHistogram} for the max value - if NaN returns 0.
     *
     * @returns {number}
     * @memberof HdrSnapshot
     */
    getMax() {
        return this.reference.histogram.max() || 0;
    }
    /**
     * Calls the native hrd-histogram implementation of the
     * referenced {@link HdrHistogram} for the min value - if NaN returns 0.
     *
     * @returns {number}
     * @memberof HdrSnapshot
     */
    getMin() {
        return this.reference.histogram.min() || 0;
    }
    /**
     * Always returns an empty array.
     *
     * @returns {number[]}
     * @memberof HdrSnapshot
     */
    getValues() {
        return [];
    }
    /**
     * Returns the count of all values recorded.
     *
     * @returns {number}
     * @memberof HdrSnapshot
     */
    size() {
        return this.reference.getCount();
    }
    /**
     * Calls the native hrd-histogram implementation of the
     * referenced {@link HdrHistogram} for the mean value - if NaN returns 0.
     *
     * @returns {number}
     * @memberof HdrSnapshot
     */
    getMean() {
        return this.reference.histogram.mean() || 0;
    }
    /**
     * Calls the native hrd-histogram implementation of the
     * referenced {@link HdrHistogram} for the standard deviation - if NaN returns 0.
     *
     * @returns {number}
     * @memberof HdrSnapshot
     */
    getStdDev() {
        return this.reference.histogram.stddev() || 0;
    }
    /**
     * Calls the native hrd-histogram implementation of the
     * referenced {@link HdrHistogram} for the given percentile.
     *
     * @returns {number}
     * @memberof HdrSnapshot
     */
    getValue(quantile) {
        return this.reference.histogram.percentile(quantile * 100.0);
    }
}
exports.HdrSnapshot = HdrSnapshot;
/**
 * Wrapper implementation for the native hdr-histogram provided by 'native-hdr-histogram' module.
 *
 * @export
 * @class HdrHistogram
 * @extends {Histogram}
 * @implements {BucketCounting}
 * @implements {Counting}
 * @implements {Metric}
 * @implements {Sampling}
 * @implements {Summarizing}
 */
class HdrHistogram extends histogram_1.Histogram {
    /**
     * Creates an instance of HdrHistogram.
     * Throws anerror if the 'native-hdr-histogram' module is not installed.
     *
     * @param {number} [lowest=1] is the lowest possible number that can be recorded
     * @param {number} [max=100] is the maximum number that can be recorded
     * @param {number} [figures=3]
     *      the number of figures in a decimal number that will be maintained, must be between 1 and 5 (inclusive)
     * @param {string} [name]
     * @param {string} [description]
     * @param {Buckets} [buckets=new Buckets()]
     * @memberof HdrHistogram
     */
    constructor(lowest = 1, max = 100, figures = 3, name, description, buckets = new counting_1.Buckets()) {
        super(null, name, description, buckets);
        if (!NativeHistogram) {
            throw new Error("Module 'native-hdr-histogram' not found. " +
                "Please install the optional dependencies of 'inspector-metrics' module.");
        }
        this.histogram = new NativeHistogram(lowest, max, figures);
        this.snapshot = new HdrSnapshot(this);
    }
    /**
     * Gets the snapshot instance.
     *
     * @returns {Snapshot}
     * @memberof HdrHistogram
     */
    getSnapshot() {
        return this.snapshot;
    }
    /**
     * Updates the histogram, all counters and th overall sum with the given value.
     *
     * @param {number} value
     * @returns {this}
     * @memberof HdrHistogram
     */
    update(value) {
        this.count++;
        this.sum.add(value);
        for (const boundary of this.buckets.boundaries) {
            if (value < boundary) {
                this.bucketCounts.set(boundary, this.bucketCounts.get(boundary) + 1);
            }
        }
        this.histogram.record(value);
        return this;
    }
}
exports.HdrHistogram = HdrHistogram;
//# sourceMappingURL=hdr-histogram.js.map