import "source-map-support/register";
import { BaseMetric, Metric } from "./metric";
/**
 * A gauge can represent any value - regardless of the type.
 *
 * @export
 * @interface Gauge
 * @extends {Metric}
 * @template T
 */
export interface Gauge<T> extends Metric {
    /**
     * Gets the current value of the gauge.
     *
     * @returns {T}
     * @memberof Gauge
     */
    getValue(): T;
}
/**
 * A simple number-base gauge - e.g. for reporting the current size of an array or map or queue.
 *
 * @export
 * @class SimpleGauge
 * @extends {BaseMetric}
 * @implements {Gauge<number>}
 */
export declare class SimpleGauge extends BaseMetric implements Gauge<number> {
    /**
     * The value - initially set to 0.
     *
     * @private
     * @type {number}
     * @memberof SimpleGauge
     */
    private value;
    /**
     * Creates an instance of SimpleGauge with an optional name.
     *
     * @param {string} [name] optional metric name.
     * @param {string} [description] optional metric description.
     * @memberof SimpleGauge
     */
    constructor(name?: string, description?: string);
    /**
     * Gets the current value.
     *
     * @returns {number}
     * @memberof SimpleGauge
     */
    getValue(): number;
    /**
     * Sets the current value.
     *
     * @param {number} value
     * @returns {this}
     * @memberof SimpleGauge
     */
    setValue(value: number): this;
}
