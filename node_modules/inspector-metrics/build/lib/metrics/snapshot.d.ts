import "source-map-support/register";
/**
 * A static state of a collection of values.
 *
 * @export
 * @interface Snapshot
 */
export interface Snapshot {
    /**
     * Gets the value of 75% boundary.
     *
     * @returns {number}
     * @memberof Snapshot
     */
    get75thPercentile(): number;
    /**
     * Gets the value of 95% boundary.
     *
     * @returns {number}
     * @memberof Snapshot
     */
    get95thPercentile(): number;
    /**
     * Gets the value of 98% boundary.
     *
     * @returns {number}
     * @memberof Snapshot
     */
    get98thPercentile(): number;
    /**
     * Gets the value of 99.9% boundary.
     *
     * @returns {number}
     * @memberof Snapshot
     */
    get999thPercentile(): number;
    /**
     * Gets the value of 99% boundary.
     *
     * @returns {number}
     * @memberof Snapshot
     */
    get99thPercentile(): number;
    /**
     * Gets the value of 50% boundary.
     *
     * @returns {number}
     * @memberof Snapshot
     */
    getMedian(): number;
    /**
     * Gets the maximum value.
     *
     * @returns {number}
     * @memberof Snapshot
     */
    getMax(): number;
    /**
     * Gets the minimum value.
     *
     * @returns {number}
     * @memberof Snapshot
     */
    getMin(): number;
    /**
     * Gets all values.
     *
     * @returns {number[]}
     * @memberof Snapshot
     */
    getValues(): number[];
    /**
     * Gets the number of values.
     *
     * @returns {number}
     * @memberof Snapshot
     */
    size(): number;
    /**
     * Gets the average of all values.
     *
     * @returns {number}
     * @memberof Snapshot
     */
    getMean(): number;
    /**
     * Gets the average deviation among the values.
     *
     * @returns {number}
     * @memberof Snapshot
     */
    getStdDev(): number;
    /**
     * Gets the value of boundary specified.
     *
     * @param {number} quantile
     * @returns {number}
     * @memberof Snapshot
     */
    getValue(quantile: number): number;
}
/**
 * Default implementation of the {@link Snapshot} interface.
 *
 * @export
 * @class SimpleSnapshot
 * @implements {Snapshot}
 */
export declare class SimpleSnapshot implements Snapshot {
    /**
     * Sorted collection of values.
     *
     * @private
     * @type {number[]}
     * @memberof SimpleSnapshot
     */
    private values;
    /**
     * Creates an instance of SimpleSnapshot.
     *
     * @param {number[]} values
     * @memberof SimpleSnapshot
     */
    constructor(values: number[]);
    /**
     * Calls getValue(0.75) to get the value of the 75% boundary
     *
     * @returns {number}
     * @memberof SimpleSnapshot
     */
    get75thPercentile(): number;
    /**
     * Calls getValue(0.95) to get the value of the 95% boundary
     *
     * @returns {number}
     * @memberof SimpleSnapshot
     */
    get95thPercentile(): number;
    /**
     * Calls getValue(0.98) to get the value of the 98% boundary
     *
     * @returns {number}
     * @memberof SimpleSnapshot
     */
    get98thPercentile(): number;
    /**
     * Calls getValue(0.999) to get the value of the 99.9% boundary
     *
     * @returns {number}
     * @memberof SimpleSnapshot
     */
    get999thPercentile(): number;
    /**
     * Calls getValue(0.99) to get the value of the 99% boundary
     *
     * @returns {number}
     * @memberof SimpleSnapshot
     */
    get99thPercentile(): number;
    /**
     * Calls getValue(0.5) to get the value of the 50% boundary
     *
     * @returns {number}
     * @memberof SimpleSnapshot
     */
    getMedian(): number;
    /**
     * Gets the last value of the value array.
     *
     * @returns {number}
     * @memberof SimpleSnapshot
     */
    getMax(): number;
    /**
     * Gets the first value of the value array.
     *
     * @returns {number}
     * @memberof SimpleSnapshot
     */
    getMin(): number;
    /**
     * Gets the value array.
     *
     * @returns {number[]}
     * @memberof SimpleSnapshot
     */
    getValues(): number[];
    /**
     * Gets the length of the value array.
     *
     * @returns {number}
     * @memberof SimpleSnapshot
     */
    size(): number;
    /**
     * Gets average value of the value array.
     *
     * @returns {number}
     * @memberof SimpleSnapshot
     */
    getMean(): number;
    /**
     * Gets the average deviation among the values.
     *
     * @returns {number}
     * @memberof SimpleSnapshot
     */
    getStdDev(): number;
    /**
     * Gets the value of the boundary specified.
     *
     * E.g. considering the following values (sorted): [12, 20, 22, 25, 30, 32, 40, 50, 55, 56]
     *
     * quantile | position / index | value
     *
     * 0.25 | 3 | 24.25
     *
     * 0.5 | 5 | 36
     *
     * 0.75 | 8 | 51,25
     *
     * 0.95 | 10 | NaN
     *
     * @param {number} quantile
     * @returns {number}
     * @memberof SimpleSnapshot
     */
    getValue(quantile: number): number;
}
