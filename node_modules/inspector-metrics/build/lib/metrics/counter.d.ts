import "source-map-support/register";
import { Counting } from "./counting";
import { BaseMetric, Metric } from "./metric";
/**
 * A monotonically increasing number.
 * The initial value is 0.
 *
 * @export
 * @class MonotoneCounter
 * @extends {BaseMetric}
 * @implements {Counting}
 * @implements {Metric}
 */
export declare class MonotoneCounter extends BaseMetric implements Counting, Metric {
    /**
     * Holds the current value.
     *
     * @private
     * @type {number}
     * @memberof MonotoneCounter
     */
    protected count: number;
    /**
     * Creates an instance of MonotoneCounter.
     *
     * @param {string} [name] optional name of the counter
     * @param {string} [description] optional description of the counter
     * @memberof MonotoneCounter
     */
    constructor(name?: string, description?: string);
    /**
     * Increases the current count by the given value - a negative value is causing an error.
     *
     * @param {number} value
     * @returns {this}
     * @memberof MonotoneCounter
     */
    increment(value: number): this;
    /**
     * Gets the current count.
     *
     * @returns {number}
     * @memberof MonotoneCounter
     */
    getCount(): number;
    /**
     * Sets the current count to 0.
     *
     * @returns {this}
     * @memberof MonotoneCounter
     */
    reset(): this;
}
/**
 * A counter represents a number that can be increased or decreased in steps.
 * The initial value is 0.
 *
 * @export
 * @class Counter
 * @extends {MonotoneCounter}
 * @implements {Counting}
 * @implements {Metric}
 */
export declare class Counter extends MonotoneCounter implements Counting, Metric {
    /**
     * Creates an instance of Counter.
     *
     * @param {string} [name] optional name of the counter
     * @param {string} [description] optional description of the counter
     * @memberof Counter
     */
    constructor(name?: string, description?: string);
    /**
     * Increases the current count by the given value - a negative value is decreasing the current count.
     *
     * @param {number} value
     * @returns {this}
     * @memberof MonotoneCounter
     */
    increment(value: number): this;
    /**
     * Decreases the current count by the given value - a negative value is increasing the current count.
     *
     * @param {number} value
     * @returns {this}
     * @memberof Counter
     */
    decrement(value: number): this;
}
