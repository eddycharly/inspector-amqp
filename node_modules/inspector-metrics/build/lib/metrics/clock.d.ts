import "source-map-support/register";
/**
 * Represents a point in time.
 *
 * @export
 * @interface Time
 */
export interface Time {
    milliseconds: number;
    nanoseconds: number;
}
/**
 * Gets the time elapsed from parameter one to parameter two in nanoseconds.
 *
 * Also assumes that the first point in time is older than the second point in time.
 *
 * @export
 * @param {Time} one time sample
 * @param {Time} two time sample
 * @returns {number} a duration in nanoseconds
 */
export declare function diff(one: Time, two: Time): number;
/**
 * Abstraction of a clock. Used to determine progress in time.
 *
 * @export
 * @abstract
 * @class Clock
 */
export declare abstract class Clock {
    /**
     * Gets the current point in time according to the logic of the clock implementation.
     *
     * @abstract
     * @returns {Time}
     * @memberof Clock
     */
    abstract time(): Time;
}
/**
 * Default implementation of a Clock. Uses Date.now() as source of truth.
 *
 * @export
 * @class StdClock
 * @extends {Clock}
 */
export declare class StdClock extends Clock {
    /**
     * Returns a Time object whos nanoseconds component is always zero.
     *
     * @returns {Time}
     * @memberof StdClock
     */
    time(): Time;
}
