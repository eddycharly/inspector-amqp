import "source-map-support/register";
import { Clock } from "./clock";
import { Metered } from "./metered";
import { BaseMetric } from "./metric";
/**
 * Standard implementation of a rate-measuring metrics.
 *
 * @export
 * @class Meter
 * @extends {BaseMetric}
 * @implements {Metered}
 */
export declare class Meter extends BaseMetric implements Metered {
    /**
     * Alpha value for 1 min within a {@link ExponentiallyWeightedMovingAverage}.
     *
     * @private
     * @static
     * @memberof Meter
     */
    private static AVG_1_MINUTE;
    /**
     * Alpha value for 5 mins within a {@link ExponentiallyWeightedMovingAverage}.
     *
     * @private
     * @static
     * @memberof Meter
     */
    private static AVG_5_MINUTE;
    /**
     * Alpha value for 15 mins within a {@link ExponentiallyWeightedMovingAverage}.
     *
     * @private
     * @static
     * @memberof Meter
     */
    private static AVG_15_MINUTE;
    /**
     * 1 second in nanoseconds.
     *
     * @private
     * @static
     * @memberof Meter
     */
    private static SECOND_1_NANOS;
    /**
     * Clock used to determine if a new update of the averages is needed.
     *
     * @private
     * @type {Clock}
     * @memberof Meter
     */
    private clock;
    /**
     * Starttime as a reference for calculating the mean-rate.
     *
     * @private
     * @type {Time}
     * @memberof Meter
     */
    private startTime;
    /**
     * Timestamp used to determine when a new update of the 1, 5 and 15 mins averages is needed.
     *
     * @private
     * @type {Time}
     * @memberof Meter
     */
    private lastTime;
    /**
     * Continuous counter incremented in the {@link Meter#mark} method.
     *
     * @private
     * @type {number}
     * @memberof Meter
     */
    private count;
    /**
     * Number of samples per second.
     *
     * @private
     * @type {number}
     * @memberof Meter
     */
    private sampleRate;
    /**
     * Max age of the last update in nanoseconds.
     *
     * @private
     * @type {number}
     * @memberof Meter
     */
    private interval;
    /**
     * Moving average for 1 minute.
     *
     * @private
     * @type {MovingAverage}
     * @memberof Meter
     */
    private avg1Minute;
    /**
     * Moving average for 5 minutes.
     *
     * @private
     * @type {MovingAverage}
     * @memberof Meter
     */
    private avg5Minute;
    /**
     * Moving average for 15 minutes.
     *
     * @private
     * @type {MovingAverage}
     * @memberof Meter
     */
    private avg15Minute;
    /**
     * Creates an instance of Meter.
     *
     * @param {Clock} clock Clock to determine update events.
     * @param {number} sampleRate number of samples per seconds.
     * @param {string} [name] optional metric name.
     * @param {string} [description] optional metric description.
     * @memberof Meter
     */
    constructor(clock: Clock, sampleRate: number, name?: string, description?: string);
    /**
     * Increases the counter and updates the averages.
     *
     * @param {number} value
     * @returns {this}
     * @memberof Meter
     */
    mark(value: number): this;
    /**
     * Gets the number of events.
     *
     * @returns {number}
     * @memberof Meter
     */
    getCount(): number;
    /**
     * Updates the 15 minutes average if needed and returns the rate per second.
     *
     * @returns {number}
     * @memberof Meter
     */
    get15MinuteRate(): number;
    /**
     * Updates the 5 minutes average if needed and returns the rate per second.
     *
     * @returns {number}
     * @memberof Meter
     */
    get5MinuteRate(): number;
    /**
     * Updates the 1 minute average if needed and returns the rate per second.
     *
     * @returns {number}
     * @memberof Meter
     */
    get1MinuteRate(): number;
    /**
     * Gets the mean rate : {@link Meter#count} divided through seconds passed since {@link Meter#startTime}).
     *
     * @returns {number} either 0 or the mean rate.
     * @memberof Meter
     */
    getMeanRate(): number;
    /**
     * Calls the {@link MovingAverage#tick} for each tick.
     *
     * @private
     * @param {number} ticks number of updates.
     * @memberof Meter
     */
    private tick;
    /**
     * Checks for if an update of the averages is needed and if so updates the {@link Meter#lastTime}.
     *
     * @private
     * @memberof Meter
     */
    private tickIfNeeded;
}
