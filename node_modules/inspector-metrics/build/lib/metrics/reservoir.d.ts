import "source-map-support/register";
import { Snapshot } from "./snapshot";
/**
 * Represents a collection of values.
 *
 * @export
 * @interface Reservoir
 */
export interface Reservoir {
    /**
     * Gets the capacity of this reservoir.
     *
     * @returns {number}
     * @memberof Reservoir
     */
    size(): number;
    /**
     * Adds a value to the reservoir.
     *
     * @param {number} value
     * @returns {this}
     * @memberof Reservoir
     */
    update(value: number): this;
    /**
     * Creates a new snapshot of this reservoir.
     *
     * @returns {Snapshot}
     * @memberof Reservoir
     */
    snapshot(): Snapshot;
}
/**
 * Simple implementation of a reservoir.
 * It has a maximum number of values, if the maximum
 * is reached old values are replaced by new values.
 *
 * @export
 * @class DefaultReservoir
 * @implements {Reservoir}
 */
export declare class DefaultReservoir implements Reservoir {
    /**
     * The values.
     *
     * @private
     * @type {number[]}
     * @memberof DefaultReservoir
     */
    private values;
    /**
     * The capacity of this reservoir.
     *
     * @private
     * @type {number}
     * @memberof DefaultReservoir
     */
    private maxSize;
    /**
     * Creates an instance of DefaultReservoir.
     *
     * @param {number} maxSize
     * @memberof DefaultReservoir
     */
    constructor(maxSize: number);
    /**
     * Gets the actual number of value, but at max the specified maximum.
     *
     * @returns {number}
     * @memberof DefaultReservoir
     */
    size(): number;
    /**
     * Adds the value to the array of numbers until the maximum number of
     * values is reached. If the maximum number of values is reached
     * an old value at a random position is replaced with the specified value.
     *
     * @param {number} value
     * @returns {this}
     * @memberof DefaultReservoir
     */
    update(value: number): this;
    /**
     * Creates a new snapshot instance.
     *
     * @returns {Snapshot}
     * @memberof DefaultReservoir
     */
    snapshot(): Snapshot;
}
/**
 * A reservoir that keeps the order of values and restarts
 * at the beginning if the maximum number of values is reached.
 *
 * @export
 * @class SlidingWindowReservoir
 * @implements {Reservoir}
 */
export declare class SlidingWindowReservoir implements Reservoir {
    /**
     * The values.
     *
     * @private
     * @type {number[]}
     * @memberof SlidingWindowReservoir
     */
    private values;
    /**
     * The capacity of the reservoir.
     *
     * @private
     * @type {number}
     * @memberof SlidingWindowReservoir
     */
    private maxSize;
    /**
     * The current index in the value array.
     *
     * @private
     * @type {number}
     * @memberof SlidingWindowReservoir
     */
    private index;
    /**
     * Creates an instance of SlidingWindowReservoir.
     *
     * @param {number} maxSize
     * @memberof SlidingWindowReservoir
     */
    constructor(maxSize: number);
    /**
     * Gets the number of values, but at may the capacity of the reservoir.
     *
     * @returns {number}
     * @memberof SlidingWindowReservoir
     */
    size(): number;
    /**
     * Adds the value to the array of values until the capacity
     * of the reservoir is reached. If the maximum number of
     * values is reached, the insertion restarts at the beginning.
     *
     * @param {number} value
     * @returns {this}
     * @memberof SlidingWindowReservoir
     */
    update(value: number): this;
    /**
     * Creates a new snapshot using the values array.
     *
     * @returns {Snapshot}
     * @memberof SlidingWindowReservoir
     */
    snapshot(): Snapshot;
}
