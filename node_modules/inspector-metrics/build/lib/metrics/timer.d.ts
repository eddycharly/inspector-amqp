import "source-map-support/register";
import { Clock } from "./clock";
import { BucketCounting, Buckets } from "./counting";
import { Int64Wrapper } from "./int64";
import { Metered } from "./metered";
import { BaseMetric } from "./metric";
import { Reservoir } from "./reservoir";
import { Sampling } from "./sampling";
import { Snapshot } from "./snapshot";
import { Summarizing } from "./summarizing";
import { TimeUnit } from "./time-unit";
/**
 * A convenience wrapper class for a {@link Timer} to measure durations.
 *
 * @export
 * @class StopWatch
 */
export declare class StopWatch {
    /**
     * Used to determine a duration.
     *
     * @private
     * @type {Clock}
     * @memberof StopWatch
     */
    private clock;
    /**
     * The timer the duration is reported to.
     *
     * @private
     * @type {Timer}
     * @memberof StopWatch
     */
    private timer;
    /**
     * Gets set when the start function is invoked using the clock.
     *
     * @private
     * @type {Time}
     * @memberof StopWatch
     */
    private startTime;
    /**
     * Creates an instance of StopWatch.
     *
     * @param {Clock} clock
     * @param {Timer} timer
     * @memberof StopWatch
     */
    constructor(clock: Clock, timer: Timer);
    /**
     * Sets the startTime variable.
     *
     * @returns {this}
     * @memberof StopWatch
     */
    start(): this;
    /**
     * Adds the duration between the last invocation of the start function
     * and this invocation to the timer in nanoseconds.
     *
     * @returns {this}
     * @memberof StopWatch
     */
    stop(): this;
}
/**
 * A Timer is a combination of a {@link Histogram} (for the duration of an event)
 * and a {@link Meter} (for the rate of events).
 *
 * @export
 * @class Timer
 * @extends {BaseMetric}
 * @implements {Metered}
 * @implements {Sampling}
 */
export declare class Timer extends BaseMetric implements BucketCounting, Metered, Sampling, Summarizing {
    /**
     * Used to determine a duration.
     *
     * @private
     * @type {Clock}
     * @memberof Timer
     */
    private clock;
    /**
     * Metric to measure the event rate.
     *
     * @private
     * @type {Meter}
     * @memberof Timer
     */
    private meter;
    /**
     * Metric to measure the duration of events.
     *
     * @private
     * @type {Histogram}
     * @memberof Timer
     */
    private histogram;
    /**
     * Creates an instance of Timer.
     *
     * @param {Clock} clock
     * @param {Reservoir} reservoir
     * @param {string} [name]
     * @param {string} [description]
     * @param {string} [buckets=new Buckets()]
     * @memberof Timer
     */
    constructor(clock: Clock, reservoir: Reservoir, name?: string, description?: string, buckets?: Buckets);
    /**
     * Adds a duration manually.
     *
     * @param {number} duration
     * @param {TimeUnit} unit
     * @returns {this}
     * @memberof Timer
     */
    addDuration(duration: number, unit: TimeUnit): this;
    /**
     * Gets a snapshot from the embedded {@link Histogram}.
     *
     * @returns {Snapshot}
     * @memberof Timer
     */
    getSnapshot(): Snapshot;
    /**
     * Gets the count from the embedded {@link Histogram}.
     *
     * @returns {number}
     * @memberof Timer
     */
    getCount(): number;
    /**
     * Gets the sum from the embedded {@link Histogram}.
     *
     * @returns {Int64Wrapper}
     * @memberof Timer
     */
    getSum(): Int64Wrapper;
    /**
     * Gets the average rate per second of last 15 minutes.
     *
     * @returns {number}
     * @memberof Timer
     */
    get15MinuteRate(): number;
    /**
     * Gets the average rate per second of last 5 minutes.
     *
     * @returns {number}
     * @memberof Timer
     */
    get5MinuteRate(): number;
    /**
     * Gets the average rate per second of last minute.
     *
     * @returns {number}
     * @memberof Timer
     */
    get1MinuteRate(): number;
    /**
     * Gets the mean rate from the embedded {@link Meter}.
     *
     * @returns {number}
     * @memberof Timer
     */
    getMeanRate(): number;
    /**
     * Gets the bucket config from the internal {@link Histogram} and therefore representing the durations.
     *
     * @returns {Buckets}
     * @memberof Timer
     */
    getBuckets(): Buckets;
    /**
     * Gets the bucket counts from the internal {@link Histogram}.
     *
     * @returns {Map<number, number>}
     * @memberof Timer
     */
    getCounts(): Map<number, number>;
    /**
     * Measures the duration of the passed function's invocation
     * synchronously and adds it to the pool.
     *
     * @template T
     * @returns {T}
     * @memberof Timer
     */
    time<T>(f: () => T): T;
    /**
     * Measures the duration of the passed function's invocation
     * asynchronously and adds it to the pool.
     *
     * @template T
     * @returns {T}
     * @memberof Timer
     */
    timeAsync<T>(f: () => Promise<T>): Promise<T>;
    /**
     * Builds a new StopWatch.
     *
     * @returns {StopWatch}
     * @memberof Timer
     */
    newStopWatch(): StopWatch;
}
