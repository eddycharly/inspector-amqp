/// <reference types="node" />
import "source-map-support/register";
import { TimeUnit } from "../time-unit";
import { MetricReporter, MetricReporterOptions } from "./metric-reporter";
/**
 * Scheduler function type definition.
 */
export declare type Scheduler = (prog: () => Promise<any>, interval: number) => NodeJS.Timer;
/**
 * Options for the {@link ScheduledMetricReporter}.
 *
 * @export
 * @interface ScheduledMetricReporterOptions
 * @extends {MetricReporterOptions}
 */
export interface ScheduledMetricReporterOptions extends MetricReporterOptions {
    /**
     * The reporting interval in the time-unit specified in {@link #unit}.
     *
     * @type {number}
     * @memberof ScheduledMetricReporterOptions
     */
    readonly reportInterval?: number;
    /**
     * Time unit for the reporting interval.
     *
     * @type {TimeUnit}
     * @memberof ScheduledMetricReporterOptions
     */
    readonly unit?: TimeUnit;
    /**
     * The scheduler function used to trigger reporting runs.
     *
     * @type {Scheduler}
     * @memberof ScheduledMetricReporterOptions
     */
    readonly scheduler?: Scheduler;
}
/**
 * Base-class for scheduled metric-reporter implementations.
 *
 * @export
 * @abstract
 * @class ScheduledMetricReporter
 */
export declare abstract class ScheduledMetricReporter<O extends ScheduledMetricReporterOptions, T> extends MetricReporter<O, T> {
    /**
     * Timer instance retuned by the scheduler function.
     *
     * @private
     * @type {NodeJS.Timer}
     * @memberof ScheduledMetricReporter
     */
    private timer;
    /**
     * Creates an instance of ScheduledMetricReporter.
     *
     * @param {O} options
     * @memberof ScheduledMetricReporter
     */
    constructor(options: O);
    /**
     * Uses the scheduler function to call the {@link #report} function
     * in the interval specified. The interval is converted into {@link MILLISECOND}s.
     *
     * @returns {Promise<this>}
     * @memberof ScheduledMetricReporter
     */
    start(): Promise<this>;
    /**
     * Stops reporting metrics.
     *
     * @returns {Promise<this>}
     * @memberof ScheduledMetricReporter
     */
    stop(): Promise<this>;
}
