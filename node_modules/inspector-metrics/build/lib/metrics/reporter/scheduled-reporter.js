"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
require("source-map-support/register");
const time_unit_1 = require("../time-unit");
const metric_reporter_1 = require("./metric-reporter");
/**
 * Base-class for scheduled metric-reporter implementations.
 *
 * @export
 * @abstract
 * @class ScheduledMetricReporter
 */
class ScheduledMetricReporter extends metric_reporter_1.MetricReporter {
    /**
     * Creates an instance of ScheduledMetricReporter.
     *
     * @param {O} options
     * @memberof ScheduledMetricReporter
     */
    constructor(options) {
        super(options);
    }
    /**
     * Uses the scheduler function to call the {@link #report} function
     * in the interval specified. The interval is converted into {@link MILLISECOND}s.
     *
     * @returns {Promise<this>}
     * @memberof ScheduledMetricReporter
     */
    start() {
        return __awaiter(this, void 0, void 0, function* () {
            const interval = this.options.unit.convertTo(this.options.reportInterval, time_unit_1.MILLISECOND);
            this.timer = this.options.scheduler(() => this.report(), interval);
            return this;
        });
    }
    /**
     * Stops reporting metrics.
     *
     * @returns {Promise<this>}
     * @memberof ScheduledMetricReporter
     */
    stop() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.timer) {
                this.timer.unref();
            }
            return this;
        });
    }
}
exports.ScheduledMetricReporter = ScheduledMetricReporter;
//# sourceMappingURL=scheduled-reporter.js.map