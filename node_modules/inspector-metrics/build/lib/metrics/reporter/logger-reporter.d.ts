import "source-map-support/register";
import { Counter, MonotoneCounter } from "../counter";
import { Event } from "../event";
import { Gauge } from "../gauge";
import { Histogram } from "../histogram";
import { Meter } from "../meter";
import { MetricRegistry } from "../metric-registry";
import { Timer } from "../timer";
import { Logger } from "./logger";
import { MetricSetReportContext, OverallReportContext, ReportingResult } from "./metric-reporter";
import { MetricType } from "./metric-type";
import { ScheduledMetricReporter, ScheduledMetricReporterOptions } from "./scheduled-reporter";
/**
 * Helper interface to abstract a log-line.
 *
 * @interface LogLine
 */
interface LogLine {
    /**
     * Message string passed to the logger instance.
     *
     * @type {string}
     * @memberof LogLine
     */
    message: string;
    /**
     * Metadata passed to the logger instance as second parameter.
     *
     * @type {*}
     * @memberof LogLine
     */
    metadata: any;
}
/**
 * Helper interface for the reporting context.
 *
 * @interface LoggerReportingContext
 * @extends {MetricSetReportContext<M>}
 * @template M
 */
interface LoggerReportingContext<M> extends MetricSetReportContext<M> {
    /**
     * Common log metadata to extend.
     *
     * @type {*}
     * @memberof LoggerReportingContext
     */
    readonly logMetadata: any;
}
/**
 * Options for {@link LoggerReporter}.
 *
 * @export
 * @class LoggerReporterOptions
 * @implements {ScheduledMetricReporterOptions}
 */
export interface LoggerReporterOptions extends ScheduledMetricReporterOptions {
    /**
     * The logger instance used to report metrics.
     *
     * @type {Logger}
     * @memberof LoggerReporterOptions
     */
    log?: Logger;
}
/**
 * Standard implementation of a {@link MetricReporter} that uses a {@link Logger} instance.
 *
 * @export
 * @class LoggerReporter
 * @extends {MetricReporter}
 */
export declare class LoggerReporter extends ScheduledMetricReporter<LoggerReporterOptions, LogLine> {
    /**
     * The metadata object passed to the {@link Logger} instance.
     *
     * @private
     * @type {*}
     * @memberof LoggerReporter
     */
    private logMetadata;
    /**
     * Creates an instance of LoggerReporter.
     *
     * @memberof LoggerReporter
     */
    constructor({ log, reportInterval, unit, clock, scheduler, minReportingTimeout, tags, }: LoggerReporterOptions);
    /**
     * Gets the {@link Logger} instance.
     *
     * @returns {Logger}
     * @memberof LoggerReporter
     */
    getLog(): Logger;
    /**
     * Sets the {@link Logger} instance.
     *
     * @param {Logger} log
     * @returns {this}
     * @memberof LoggerReporter
     */
    setLog(log: Logger): this;
    /**
     * Prints the specified event immediately to the logger at 'info' level.
     *
     * @template TEventData
     * @template TEvent
     * @param {TEvent} event
     * @returns {Promise<TEvent>}
     * @memberof LoggerReporter
     */
    reportEvent<TEventData, TEvent extends Event<TEventData>>(event: TEvent): Promise<TEvent>;
    /**
     * Creates a new {@link LoggerReportingContext} using the speicifed arguments.
     *
     * @protected
     * @param {OverallReportContext} overallCtx
     * @param {MetricRegistry} registry
     * @param {Date} date
     * @param {MetricType} type
     * @returns {LoggerReportingContext<any>}
     * @memberof LoggerReporter
     */
    protected createMetricSetReportContext(overallCtx: OverallReportContext, registry: MetricRegistry, date: Date, type: MetricType): LoggerReportingContext<any>;
    /**
     * Logs each result at 'info' level using the logger instance specified in the options.
     *
     * @protected
     * @param {OverallReportContext} ctx
     * @param {MetricRegistry} registry
     * @param {Date} date
     * @param {MetricType} type
     * @param {Array<ReportingResult<any, LogLine>>} results
     * @memberof LoggerReporter
     */
    protected handleResults(ctx: OverallReportContext, registry: MetricRegistry, date: Date, type: MetricType, results: Array<ReportingResult<any, LogLine>>): Promise<void>;
    /**
     * Builds the log message for the given {@link Counter} or {@link MonotoneCounter} if the value of
     * {@link Counter#getCount()} or {@link MonotoneCounter#getCount()} is a valid number.
     *
     * Reported fields:
     * - count
     *
     * Also the metadata (tags, metric group, metric name) and the date is included.
     *
     * @protected
     * @param {(MonotoneCounter | Counter)} counter
     * @param {(LoggerReportingContext<MonotoneCounter | Counter>)} ctx
     * @returns {LogLine}
     * @memberof LoggerReporter
     */
    protected reportCounter(counter: MonotoneCounter | Counter, ctx: LoggerReportingContext<MonotoneCounter | Counter>): LogLine;
    /**
     * Builds the log message for the given {@link Gauge} if the gauge's
     * value is a valid number.
     *
     * Reported fields:
     * - value
     *
     * Also the metadata (tags, metric group, metric name) and the date is included.
     *
     * @protected
     * @param {Gauge<any>} gauge
     * @param {LoggerReportingContext<Gauge<any>>} ctx
     * @returns {LogLine}
     * @memberof LoggerReporter
     */
    protected reportGauge(gauge: Gauge<any>, ctx: LoggerReportingContext<Gauge<any>>): LogLine;
    /**
     * Builds the log message for the given {@link Histogram} if the value of
     * {@link Histogram#getCount()} is a valid number.
     *
     * Reported fields:
     * - count
     * - max (max value)
     * - mean (mean value)
     * - min (min value)
     * - p50 (value of the 50% boundary)
     * - p75 (value of the 75% boundary)
     * - p95 (value of the 95% boundary)
     * - p98 (value of the 98% boundary)
     * - p99 (value of the 99% boundary)
     * - p999 (value of the 99.9% boundary)
     * - stddev (average deviation among the values)
     *
     * Also the metadata (tags, metric group, metric name) and the date is included.
     *
     * @protected
     * @param {Histogram} histogram
     * @param {LoggerReportingContext<Histogram>} ctx
     * @returns {LogLine}
     * @memberof LoggerReporter
     */
    protected reportHistogram(histogram: Histogram, ctx: LoggerReportingContext<Histogram>): LogLine;
    /**
     * Builds the log message for the given {@link Meter} if the value of
     * {@link Meter#getCount()} is a valid number.
     *
     * Reported fields:
     * - count
     * - m15_rate (15 min rate)
     * - m5_rate (5 min rate)
     * - m1_rate (1 min rate)
     * - mean_rate
     *
     * Also the metadata (tags, metric group, metric name) and the date is included.
     *
     * @protected
     * @param {Meter} meter
     * @param {LoggerReportingContext<Meter>} ctx
     * @returns {LogLine}
     * @memberof LoggerReporter
     */
    protected reportMeter(meter: Meter, ctx: LoggerReportingContext<Meter>): LogLine;
    /**
     * Builds the log message for the given {@link Timer} if the value of
     * {@link Timer#getCount()} is a valid number.
     *
     * Reported fields:
     * - count
     * - max (max value)
     * - mean (mean value)
     * - min (min value)
     * - p50 (value of the 50% boundary)
     * - p75 (value of the 75% boundary)
     * - p95 (value of the 95% boundary)
     * - p98 (value of the 98% boundary)
     * - p99 (value of the 99% boundary)
     * - p999 (value of the 99.9% boundary)
     * - stddev (average deviation among the values)
     * - m15_rate (15 min rate)
     * - m5_rate (5 min rate)
     * - m1_rate (1 min rate)
     * - mean_rate
     *
     * Also the metadata (tags, metric group, metric name) and the date is included.
     *
     * @protected
     * @param {Timer} timer
     * @param {LoggerReportingContext<Timer>} ctx
     * @returns {LogLine}
     * @memberof LoggerReporter
     */
    protected reportTimer(timer: Timer, ctx: LoggerReportingContext<Timer>): LogLine;
}
export {};
