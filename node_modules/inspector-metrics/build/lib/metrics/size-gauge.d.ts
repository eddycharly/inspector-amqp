import "source-map-support/register";
import { Gauge } from "./gauge";
import { BaseMetric } from "./metric";
/**
 * Accessor-interface for objects with "length()" method.
 *
 * @export
 * @interface LengthMethodInterface
 */
export interface LengthMethodInterface {
    length(): number;
}
/**
 * Accessor-interface for objects with "length" attribute (e.g. Array).
 *
 * @export
 * @interface LengthAttributeInterface
 */
export interface LengthAttributeInterface {
    length: number;
}
/**
 * Accessor-interface for objects with "size" method.
 *
 * @export
 * @interface SizeMethodInterface
 */
export interface SizeMethodInterface {
    size(): number;
}
/**
 * Accessor-interface for objects with "size" attribute (e.g. Map, Set).
 *
 * @export
 * @interface SizeAttributeInterface
 */
export interface SizeAttributeInterface {
    size: number;
}
/**
 * Gets the current size / length of an object as gauge metric.
 *
 * @export
 * @class SizeGauge
 * @extends {BaseMetric}
 * @implements {Gauge<number>}
 */
export declare class SizeGauge extends BaseMetric implements Gauge<number> {
    /**
     * Checks if the specified collection is a {link LengthAttributeInterface}.
     *
     * @protected
     * @static
     * @param {*} collection
     * @returns {collection is LengthAttributeInterface}
     * @memberof SizeGauge
     */
    protected static isLengthAttributeInterface(collection: any): collection is LengthAttributeInterface;
    /**
     * Checks if the specified collection is a {link LengthMethodInterface}.
     *
     * @protected
     * @static
     * @param {*} collection
     * @returns {collection is LengthMethodInterface}
     * @memberof SizeGauge
     */
    protected static isLengthMethodInterface(collection: any): collection is LengthMethodInterface;
    /**
     * Checks if the specified collection is a {link SizeAttributeInterface}.
     *
     * @protected
     * @static
     * @param {*} collection
     * @returns {collection is SizeAttributeInterface}
     * @memberof SizeGauge
     */
    protected static isSizeAttributeInterface(collection: any): collection is SizeAttributeInterface;
    /**
     * Checks if the specified collection is a {link SizeMethodInterface}.
     *
     * @protected
     * @static
     * @param {*} collection
     * @returns {collection is SizeMethodInterface}
     * @memberof SizeGauge
     */
    protected static isSizeMethodInterface(collection: any): collection is SizeMethodInterface;
    /**
     * Gets the actual value for the collection passed to the constructor.
     *
     * @private
     * @type {ValueExtractor}
     * @memberof SizeGauge
     */
    private extractor;
    /**
     * Creates an instance of SizeGauge.
     *
     * @param {string} name The name of the metric
     * @param collection The collection to get the size / length from.
     * @param {string} [description] The description of the metric
     * @memberof SizeGauge
     */
    constructor(name: string, collection: LengthAttributeInterface | LengthMethodInterface | SizeAttributeInterface | SizeMethodInterface, description?: string);
    /**
     * Reports the size / length of the collection.
     *
     * @returns {number} Returns the current size of the collection or -1.
     * @memberof SizeGauge
     */
    getValue(): number;
}
