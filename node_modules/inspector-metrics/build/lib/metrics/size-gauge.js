"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("source-map-support/register");
const metric_1 = require("./metric");
/**
 * Gets the current size / length of an object as gauge metric.
 *
 * @export
 * @class SizeGauge
 * @extends {BaseMetric}
 * @implements {Gauge<number>}
 */
class SizeGauge extends metric_1.BaseMetric {
    /**
     * Checks if the specified collection is a {link LengthAttributeInterface}.
     *
     * @protected
     * @static
     * @param {*} collection
     * @returns {collection is LengthAttributeInterface}
     * @memberof SizeGauge
     */
    static isLengthAttributeInterface(collection) {
        return collection && typeof collection.length === "number";
    }
    /**
     * Checks if the specified collection is a {link LengthMethodInterface}.
     *
     * @protected
     * @static
     * @param {*} collection
     * @returns {collection is LengthMethodInterface}
     * @memberof SizeGauge
     */
    static isLengthMethodInterface(collection) {
        return collection && typeof collection.length === "function";
    }
    /**
     * Checks if the specified collection is a {link SizeAttributeInterface}.
     *
     * @protected
     * @static
     * @param {*} collection
     * @returns {collection is SizeAttributeInterface}
     * @memberof SizeGauge
     */
    static isSizeAttributeInterface(collection) {
        return collection && typeof collection.size === "number";
    }
    /**
     * Checks if the specified collection is a {link SizeMethodInterface}.
     *
     * @protected
     * @static
     * @param {*} collection
     * @returns {collection is SizeMethodInterface}
     * @memberof SizeGauge
     */
    static isSizeMethodInterface(collection) {
        return collection && typeof collection.size === "function";
    }
    /**
     * Creates an instance of SizeGauge.
     *
     * @param {string} name The name of the metric
     * @param collection The collection to get the size / length from.
     * @param {string} [description] The description of the metric
     * @memberof SizeGauge
     */
    constructor(name, collection, description) {
        super();
        this.setName(name);
        this.setDescription(description);
        if (SizeGauge.isLengthAttributeInterface(collection)) {
            this.extractor = () => collection.length;
        }
        else if (SizeGauge.isLengthMethodInterface(collection)) {
            this.extractor = () => collection.length();
        }
        else if (SizeGauge.isSizeAttributeInterface(collection)) {
            this.extractor = () => collection.size;
        }
        else if (SizeGauge.isSizeMethodInterface(collection)) {
            this.extractor = () => collection.size();
        }
        else {
            this.extractor = () => -1;
        }
    }
    /**
     * Reports the size / length of the collection.
     *
     * @returns {number} Returns the current size of the collection or -1.
     * @memberof SizeGauge
     */
    getValue() {
        return this.extractor();
    }
}
exports.SizeGauge = SizeGauge;
//# sourceMappingURL=size-gauge.js.map