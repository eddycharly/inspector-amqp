import "source-map-support/register";
import { Clock } from "./clock";
import { Counter, MonotoneCounter } from "./counter";
import { Buckets } from "./counting";
import { Gauge } from "./gauge";
import { HdrHistogram } from "./hdr-histogram";
import { Histogram } from "./histogram";
import { Meter } from "./meter";
import { BaseMetric, Metric } from "./metric";
import { MetricRegistryListener } from "./metric-registry-listener";
import { MetricSet } from "./metric-set";
import { Reservoir } from "./reservoir";
import { Timer } from "./timer";
export declare type NameFactory = (baseName: string, metricName: string, metric: Metric) => string;
/**
 * Represents a registration of a {@link MetricRegistryListener}.
 * This instance can be used to safely remove the listener from registry again.
 *
 * @export
 * @class MetricRegistryListenerRegistration
 */
export declare class MetricRegistryListenerRegistration {
    private listener;
    private registry;
    /**
     * Creates an instance of MetricRegistryListenerRegistration.
     *
     * @param {MetricRegistryListener} listener
     * @param {MetricRegistry} registry
     * @memberof MetricRegistryListenerRegistration
     */
    constructor(listener: MetricRegistryListener, registry: MetricRegistry);
    /**
     * Removes the managed listener from the metric registry.
     *
     * @returns {this}
     * @memberof MetricRegistryListenerRegistration
     */
    remove(): this;
}
/**
 * Proxy object for a metric (one metric can be registered with multiple names e.g. in different groups).
 *
 * @export
 * @class MetricRegistration
 * @template T
 */
export declare class MetricRegistration<T extends Metric> {
    /**
     * The metric instance.
     *
     * @type {T}
     * @memberof MetricRegistration
     */
    metricRef: T;
    /**
     * The name the metric is registered with.
     *
     * @type {string}
     * @memberof MetricRegistration
     */
    name: string;
    /**
     * Creates an instance of MetricRegistration.
     *
     * @param {T} metricRef
     * @memberof MetricRegistration
     */
    constructor(metricRef: T);
}
/**
 * A metric registry manages metric instances.
 *
 * @export
 * @class MetricRegistry
 * @extends {BaseMetric}
 * @implements {MetricSet}
 */
export declare class MetricRegistry extends BaseMetric implements MetricSet {
    /**
     * Determines if the specified object is a {@link Counter} or references one.
     *
     * @static
     * @param {*} instance
     * @returns {instance is Counter}
     * @memberof MetricRegistry
     */
    static isCounter(instance: any): instance is Counter;
    /**
     * Determines if the specified object is a {@link MonotoneCounter} or {@link Counter} or references one of them.
     *
     * @static
     * @param {*} instance
     * @returns {instance is MonotoneCounter}
     * @memberof MetricRegistry
     */
    static isMonotoneCounter(instance: any): instance is MonotoneCounter;
    /**
     * Determines if the specified object is a {@link MonotoneCounter} or references one.
     *
     * @static
     * @param {*} instance
     * @returns {instance is MonotoneCounter}
     * @memberof MetricRegistry
     */
    static isPureMonotoneCounter(instance: any): instance is MonotoneCounter;
    /**
     * Determines if the specified object is a {@link Histogram} or references one.
     *
     * @static
     * @param {*} instance
     * @returns {instance is Histogram}
     * @memberof MetricRegistry
     */
    static isHistogram(instance: any): instance is Histogram;
    /**
     * Determines if the specified object is a {@link Meter} or references one.
     *
     * @static
     * @param {*} instance
     * @returns {instance is Meter}
     * @memberof MetricRegistry
     */
    static isMeter(instance: any): instance is Meter;
    /**
     * Determines if the specified object is a {@link Timer} or references one.
     *
     * @static
     * @param {*} instance
     * @returns {instance is Timer}
     * @memberof MetricRegistry
     */
    static isTimer(instance: any): instance is Timer;
    /**
     * Determines if the specified object is a {@link Gauge} or references one.
     *
     * @static
     * @template T
     * @param {*} instance
     * @returns {instance is Gauge<T>}
     * @memberof MetricRegistry
     */
    static isGauge<T>(instance: any): instance is Gauge<T>;
    /**
     * Determines if the specified object is a {@link MetricSet}.
     *
     * @static
     * @param {*} instance
     * @returns {instance is MetricSet}
     * @memberof MetricRegistry
     */
    static isMetricSet(instance: any): instance is MetricSet;
    /**
     * Standard function to generate the name for a metric.
     *
     * @private
     * @static
     * @param {string} baseName
     * @param {string} metricName
     * @param {Metric} metric
     * @returns {string}
     * @memberof MetricRegistry
     */
    private static defaultNameFactory;
    /**
     * Default clock instance if no clock instance if provided.
     *
     * @private
     * @type {Clock}
     * @memberof MetricRegistry
     */
    private defaultClock;
    /**
     * A collection metric references.
     *
     * @private
     * @type {Array<MetricRegistration<Metric>>}
     * @memberof MetricRegistry
     */
    private metrics;
    /**
     * The name factory to build metric names.
     *
     * @private
     * @type {NameFactory}
     * @memberof MetricRegistry
     */
    private nameFactory;
    /**
     * A collection of metric listeners.
     *
     * @private
     * @type {MetricRegistryListener[]}
     * @memberof MetricRegistry
     */
    private listeners;
    /**
     * Adds the specified listener and returns the corrsponding
     * registration object.
     *
     * @param {MetricRegistryListener} listener
     * @returns {MetricRegistryListenerRegistration}
     * @memberof MetricRegistry
     */
    addListener(listener: MetricRegistryListener): MetricRegistryListenerRegistration;
    /**
     * Removes a listener manually.
     *
     * @param {MetricRegistryListener} listener
     * @returns {this}
     * @memberof MetricRegistry
     */
    removeListener(listener: MetricRegistryListener): this;
    /**
     * Sets the default name factory for metric instances.
     *
     * @param {NameFactory} nameFactory
     * @returns {this}
     * @memberof MetricRegistry
     */
    setNameFactory(nameFactory: NameFactory): this;
    /**
     * Gets the default clock.
     *
     * @returns {Clock}
     * @memberof MetricRegistry
     */
    getDefaultClock(): Clock;
    /**
     * Sets the default clock.
     *
     * @param {Clock} defaultClock
     * @returns {this}
     * @memberof MetricRegistry
     */
    setDefaultClock(defaultClock: Clock): this;
    /**
     * @deprecated since version 1.3 - use {@link getCounterList} instead
     */
    getCounters(): Map<string, Counter>;
    /**
     * @deprecated since version 1.3 - use {@link getGaugeList} instead
     */
    getGauges(): Map<string, Gauge<any>>;
    /**
     * @deprecated since version 1.3 - use {@link getHistogramList} instead
     */
    getHistograms(): Map<string, Histogram>;
    /**
     * @deprecated since version 1.3 - use {@link getMeterList} instead
     */
    getMeters(): Map<string, Meter>;
    /**
     * @deprecated since version 1.3 - use {@link getTimerList} instead
     */
    getTimers(): Map<string, Timer>;
    /**
     * Gets the list of all managed counter instances.
     *
     * @returns {Counter[]}
     * @memberof MetricRegistry
     */
    getCounterList(): Counter[];
    /**
     * Gets the list of all managed monotone counter instances.
     *
     * @returns {MonotoneCounter[]}
     * @memberof MetricRegistry
     */
    getMonotoneCounterList(): MonotoneCounter[];
    /**
     * Gets the list of all managed gauge instances.
     *
     * @returns {Array<Gauge<any>>}
     * @memberof MetricRegistry
     */
    getGaugeList(): Array<Gauge<any>>;
    /**
     * Gets the list of all managed histogram instances.
     *
     * @returns {Histogram[]}
     * @memberof MetricRegistry
     */
    getHistogramList(): Histogram[];
    /**
     * Gets the list of all managed meter instances.
     *
     * @returns {Meter[]}
     * @memberof MetricRegistry
     */
    getMeterList(): Meter[];
    /**
     * Gets the list of all managed timer instances.
     *
     * @returns {Timer[]}
     * @memberof MetricRegistry
     */
    getTimerList(): Timer[];
    /**
     * Gets a mapping of all managed metric instances regardless of the type.
     *
     * @returns {Map<string, Metric>}
     * @memberof MetricRegistry
     */
    getMetrics(): Map<string, Metric>;
    /**
     * Gets a list of all managed metric instances regardless of the type.
     *
     * @returns {Metric[]}
     * @memberof MetricRegistry
     */
    getMetricList(): Metric[];
    /**
     * @deprecated since version 1.3 - use {@link getMetricsByName} instead
     */
    getMetric(name: string): Metric;
    /**
     * @deprecated since version 1.3 - use {@link getCountersByName} instead
     */
    getCounter(name: string): Counter;
    /**
     * @deprecated since version 1.3 - use {@link getGaugesByName} instead
     */
    getGauge(name: string): Gauge<any>;
    /**
     * @deprecated since version 1.3 - use {@link getHistogramsByName} instead
     */
    getHistogram(name: string): Histogram;
    /**
     * @deprecated since version 1.3 - use {@link getMetersByName} instead
     */
    getMeter(name: string): Meter;
    /**
     * @deprecated since version 1.3 - use {@link getTimersByName} instead
     */
    getTimer(name: string): Timer;
    /**
     * Gets all mamanged metric instance by name.
     *
     * @param {string} name
     * @returns {Metric[]}
     * @memberof MetricRegistry
     */
    getMetricsByName(name: string): Metric[];
    /**
     * Gets all managed counter instances by name.
     *
     * @param {string} name
     * @returns {Counter[]}
     * @memberof MetricRegistry
     */
    getCountersByName(name: string): Counter[];
    /**
     * Gets all managed monotone counter instances by name.
     *
     * @param {string} name
     * @returns {MonotoneCounter[]}
     * @memberof MetricRegistry
     */
    getMonotoneCountersByName(name: string): MonotoneCounter[];
    /**
     * Gets all managed gauge instances by name.
     *
     * @param {string} name
     * @returns {Array<Gauge<any>>}
     * @memberof MetricRegistry
     */
    getGaugesByName(name: string): Array<Gauge<any>>;
    /**
     * Gets all managed histogram instances by name.
     *
     * @param {string} name
     * @returns {Histogram[]}
     * @memberof MetricRegistry
     */
    getHistogramsByname(name: string): Histogram[];
    /**
     * Gets all managed meter instances by name.
     *
     * @param {string} name
     * @returns {Meter[]}
     * @memberof MetricRegistry
     */
    getMetersByName(name: string): Meter[];
    /**
     * Gets all managed timer instances by name.
     *
     * @param {string} name
     * @returns {Timer[]}
     * @memberof MetricRegistry
     */
    getTimersByName(name: string): Timer[];
    /**
     * @deprecated since version 1.3 - use {@link removeMetrics} instead
     */
    removeMetric(name: string): this;
    /**
     * Removes all managed metric instances by name regardless of the type.
     *
     * @param {string} name
     * @returns {this}
     * @memberof MetricRegistry
     */
    removeMetrics(name: string): this;
    /**
     * @deprecated since version 1.3 - use {@link removeMetrics} instead
     */
    removeCounter(name: string): this;
    /**
     * @deprecated since version 1.3 - use {@link removeMetrics} instead
     */
    removeGauge(name: string): this;
    /**
     * @deprecated since version 1.3 - use {@link removeMetrics} instead
     */
    removeHistogram(name: string): this;
    /**
     * @deprecated since version 1.3 - use {@link removeMetrics} instead
     */
    removeMeter(name: string): this;
    /**
     * @deprecated since version 1.3 - use {@link removeMetrics} instead
     */
    removeTimer(name: string): this;
    /**
     * Builds a new counter with the given name and adds it
     * to the registry.
     *
     * @param {string} name
     * @param {string} [group=null]
     * @param {string} [description=null]
     * @returns {Counter}
     * @memberof MetricRegistry
     */
    newCounter(name: string, group?: string, description?: string): Counter;
    /**
     * Builds a new monotone counter with the given name and adds it
     * to the registry.
     *
     * @param {string} name
     * @param {string} [group=null]
     * @param {string} [description=null]
     * @returns {MonotoneCounter}
     * @memberof MetricRegistry
     */
    newMonotoneCounter(name: string, group?: string, description?: string): MonotoneCounter;
    /**
     * Builds a new meter with the given name and adds it
     * to the registry.
     *
     * @param {string} name
     * @param {string} [group=null]
     * @param {Clock} [clock=this.defaultClock]
     * @param {number} [sampleRate=1]
     * @param {string} [description=null]
     * @returns {Meter}
     * @memberof MetricRegistry
     */
    newMeter(name: string, group?: string, clock?: Clock, sampleRate?: number, description?: string): Meter;
    /**
     * Builds a new hdr-histogram with the given name and adds it
     * to the registry.
     *
     * @param {string} name
     * @param {number} [lowest=1] is the lowest possible number that can be recorded
     * @param {number} [max=100] is the maximum number that can be recorded
     * @param {number} [figures=3]
     *      the number of figures in a decimal number that will be maintained, must be between 1 and 5 (inclusive)
     * @param {string} [group=null]
     * @param {string} [description=null]
     * @param {Reservoir} [reservoir=null]
     * @returns {HdrHistogram}
     * @memberof MetricRegistry
     */
    newHdrHistogram(name: string, lowest?: number, max?: number, figures?: number, group?: string, description?: string, buckets?: Buckets): HdrHistogram;
    /**
     * Builds a new histogram with the given name and adds it
     * to the registry.
     *
     * @param {string} name
     * @param {string} [group=null]
     * @param {string} [description=null]
     * @param {Reservoir} [reservoir=null]
     * @returns {Histogram}
     * @memberof MetricRegistry
     */
    newHistogram(name: string, group?: string, reservoir?: Reservoir, description?: string, buckets?: Buckets): Histogram;
    /**
     * Builds a new timer with the given name and adds it
     * to the registry.
     *
     * @param {string} name
     * @param {string} [group=null]
     * @param {string} [description=null]
     * @param {Clock} [clock=this.defaultClock]
     * @param {Reservoir} [reservoir=null]
     * @returns {Timer}
     * @memberof MetricRegistry
     */
    newTimer(name: string, group?: string, clock?: Clock, reservoir?: Reservoir, description?: string, buckets?: Buckets): Timer;
    /**
     * Registers the given metric under it's name in this registry.
     *
     * If the metric is a metric-set the child-metrics are
     * registered using their names the name of the metric-set is set as group.
     *
     * @param {Metric} metric
     * @param {string} [group=null]
     * @returns {this}
     * @memberof MetricRegistry
     */
    registerMetric(metric: Metric, group?: string, description?: string): this;
    /**
     * Registeres a metric by name
     *
     * @param {string} name
     * @param {Metric} metric
     * @param {string} [group=null]
     * @deprecated since version 1.5 - use {@link registerMetric} instead
     * @returns {this}
     * @memberof MetricRegistry
     */
    register(name: string, metric: Metric, group?: string, description?: string): this;
    /**
     * Finds the first metric instance by name.
     *
     * @private
     * @template T
     * @param {string} name
     * @returns {T}
     * @memberof MetricRegistry
     */
    private getFirstByName;
    /**
     * Gets all metric instances by name.
     *
     * @private
     * @template T
     * @param {string} name
     * @returns {T[]}
     * @memberof MetricRegistry
     */
    private getByName;
    /**
     * Builds the name of the metric.
     *
     * @private
     * @param {string} name
     * @param {Metric} metric
     * @returns {string}
     * @memberof MetricRegistry
     */
    private generateName;
    /**
     * Invokes all metric listeners when a new metric was added.
     *
     * @private
     * @param {string} name
     * @param {Metric} metric
     * @memberof MetricRegistry
     */
    private fireMetricAdded;
    /**
     * Invokes all metric listeners when a metric was removed.
     *
     * @private
     * @param {string} name
     * @param {Metric} metric
     * @memberof MetricRegistry
     */
    private fireMetricRemoved;
}
