"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("source-map-support/register");
const snapshot_1 = require("./snapshot");
/**
 * Simple implementation of a reservoir.
 * It has a maximum number of values, if the maximum
 * is reached old values are replaced by new values.
 *
 * @export
 * @class DefaultReservoir
 * @implements {Reservoir}
 */
class DefaultReservoir {
    /**
     * Creates an instance of DefaultReservoir.
     *
     * @param {number} maxSize
     * @memberof DefaultReservoir
     */
    constructor(maxSize) {
        /**
         * The values.
         *
         * @private
         * @type {number[]}
         * @memberof DefaultReservoir
         */
        this.values = [];
        this.maxSize = maxSize;
    }
    /**
     * Gets the actual number of value, but at max the specified maximum.
     *
     * @returns {number}
     * @memberof DefaultReservoir
     */
    size() {
        return this.values.length;
    }
    /**
     * Adds the value to the array of numbers until the maximum number of
     * values is reached. If the maximum number of values is reached
     * an old value at a random position is replaced with the specified value.
     *
     * @param {number} value
     * @returns {this}
     * @memberof DefaultReservoir
     */
    update(value) {
        if (this.values.length < this.maxSize) {
            this.values.push(value);
        }
        else {
            const randomIndex = Math.round(Math.random() * this.values.length);
            this.values[randomIndex % this.values.length] = value;
        }
        return this;
    }
    /**
     * Creates a new snapshot instance.
     *
     * @returns {Snapshot}
     * @memberof DefaultReservoir
     */
    snapshot() {
        return new snapshot_1.SimpleSnapshot(this.values);
    }
}
exports.DefaultReservoir = DefaultReservoir;
/**
 * A reservoir that keeps the order of values and restarts
 * at the beginning if the maximum number of values is reached.
 *
 * @export
 * @class SlidingWindowReservoir
 * @implements {Reservoir}
 */
class SlidingWindowReservoir {
    /**
     * Creates an instance of SlidingWindowReservoir.
     *
     * @param {number} maxSize
     * @memberof SlidingWindowReservoir
     */
    constructor(maxSize) {
        /**
         * The values.
         *
         * @private
         * @type {number[]}
         * @memberof SlidingWindowReservoir
         */
        this.values = [];
        /**
         * The current index in the value array.
         *
         * @private
         * @type {number}
         * @memberof SlidingWindowReservoir
         */
        this.index = 0;
        this.maxSize = maxSize;
    }
    /**
     * Gets the number of values, but at may the capacity of the reservoir.
     *
     * @returns {number}
     * @memberof SlidingWindowReservoir
     */
    size() {
        return this.values.length;
    }
    /**
     * Adds the value to the array of values until the capacity
     * of the reservoir is reached. If the maximum number of
     * values is reached, the insertion restarts at the beginning.
     *
     * @param {number} value
     * @returns {this}
     * @memberof SlidingWindowReservoir
     */
    update(value) {
        if (this.values.length < this.maxSize) {
            this.values.push(value);
        }
        else {
            this.values[this.index++ % this.values.length] = value;
        }
        return this;
    }
    /**
     * Creates a new snapshot using the values array.
     *
     * @returns {Snapshot}
     * @memberof SlidingWindowReservoir
     */
    snapshot() {
        return new snapshot_1.SimpleSnapshot(this.values);
    }
}
exports.SlidingWindowReservoir = SlidingWindowReservoir;
//# sourceMappingURL=reservoir.js.map