import "source-map-support/register";
import { BucketCounting, Buckets, Counting } from "./counting";
import { Histogram } from "./histogram";
import { Metric } from "./metric";
import { Sampling } from "./sampling";
import { Snapshot } from "./snapshot";
import { Summarizing } from "./summarizing";
/**
 * Snapshot implementation for a {@link HdrHistogram} reference.
 *
 * @export
 * @class HdrSnapshot
 * @implements {Snapshot}
 */
export declare class HdrSnapshot implements Snapshot {
    private reference;
    /**
     * Creates an instance of HdrSnapshot.
     * @param {*} reference
     * @memberof HdrSnapshot
     */
    constructor(reference: any);
    /**
     * Calls the native hrd-histogram implementation of the
     * referenced {@link HdrHistogram} for the 75th percentile.
     *
     * @returns {number}
     * @memberof HdrSnapshot
     */
    get75thPercentile(): number;
    /**
     * Calls the native hrd-histogram implementation of the
     * referenced {@link HdrHistogram} for the 95th percentile.
     *
     * @returns {number}
     * @memberof HdrSnapshot
     */
    get95thPercentile(): number;
    /**
     * Calls the native hrd-histogram implementation of the
     * referenced {@link HdrHistogram} for the 98th percentile.
     *
     * @returns {number}
     * @memberof HdrSnapshot
     */
    get98thPercentile(): number;
    /**
     * Calls the native hrd-histogram implementation of the
     * referenced {@link HdrHistogram} for the 99.9th percentile.
     *
     * @returns {number}
     * @memberof HdrSnapshot
     */
    get999thPercentile(): number;
    /**
     * Calls the native hrd-histogram implementation of the
     * referenced {@link HdrHistogram} for the 99th percentile.
     *
     * @returns {number}
     * @memberof HdrSnapshot
     */
    get99thPercentile(): number;
    /**
     * Calls the native hrd-histogram implementation of the
     * referenced {@link HdrHistogram} for the 50th percentile.
     *
     * @returns {number}
     * @memberof HdrSnapshot
     */
    getMedian(): number;
    /**
     * Calls the native hrd-histogram implementation of the
     * referenced {@link HdrHistogram} for the max value - if NaN returns 0.
     *
     * @returns {number}
     * @memberof HdrSnapshot
     */
    getMax(): number;
    /**
     * Calls the native hrd-histogram implementation of the
     * referenced {@link HdrHistogram} for the min value - if NaN returns 0.
     *
     * @returns {number}
     * @memberof HdrSnapshot
     */
    getMin(): number;
    /**
     * Always returns an empty array.
     *
     * @returns {number[]}
     * @memberof HdrSnapshot
     */
    getValues(): number[];
    /**
     * Returns the count of all values recorded.
     *
     * @returns {number}
     * @memberof HdrSnapshot
     */
    size(): number;
    /**
     * Calls the native hrd-histogram implementation of the
     * referenced {@link HdrHistogram} for the mean value - if NaN returns 0.
     *
     * @returns {number}
     * @memberof HdrSnapshot
     */
    getMean(): number;
    /**
     * Calls the native hrd-histogram implementation of the
     * referenced {@link HdrHistogram} for the standard deviation - if NaN returns 0.
     *
     * @returns {number}
     * @memberof HdrSnapshot
     */
    getStdDev(): number;
    /**
     * Calls the native hrd-histogram implementation of the
     * referenced {@link HdrHistogram} for the given percentile.
     *
     * @returns {number}
     * @memberof HdrSnapshot
     */
    getValue(quantile: number): number;
}
/**
 * Wrapper implementation for the native hdr-histogram provided by 'native-hdr-histogram' module.
 *
 * @export
 * @class HdrHistogram
 * @extends {Histogram}
 * @implements {BucketCounting}
 * @implements {Counting}
 * @implements {Metric}
 * @implements {Sampling}
 * @implements {Summarizing}
 */
export declare class HdrHistogram extends Histogram implements BucketCounting, Counting, Metric, Sampling, Summarizing {
    /**
     * histogram instance.
     *
     * @private
     * @type {*}
     * @memberof HdrHistogram
     */
    private histogram;
    /**
     * Snapshot instance.
     *
     * @private
     * @type {HdrSnapshot}
     * @memberof HdrHistogram
     */
    private snapshot;
    /**
     * Creates an instance of HdrHistogram.
     * Throws anerror if the 'native-hdr-histogram' module is not installed.
     *
     * @param {number} [lowest=1] is the lowest possible number that can be recorded
     * @param {number} [max=100] is the maximum number that can be recorded
     * @param {number} [figures=3]
     *      the number of figures in a decimal number that will be maintained, must be between 1 and 5 (inclusive)
     * @param {string} [name]
     * @param {string} [description]
     * @param {Buckets} [buckets=new Buckets()]
     * @memberof HdrHistogram
     */
    constructor(lowest?: number, max?: number, figures?: number, name?: string, description?: string, buckets?: Buckets);
    /**
     * Gets the snapshot instance.
     *
     * @returns {Snapshot}
     * @memberof HdrHistogram
     */
    getSnapshot(): Snapshot;
    /**
     * Updates the histogram, all counters and th overall sum with the given value.
     *
     * @param {number} value
     * @returns {this}
     * @memberof HdrHistogram
     */
    update(value: number): this;
}
