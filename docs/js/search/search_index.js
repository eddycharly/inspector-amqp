var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"0.7.2","fields":[{"name":"title","boost":10},{"name":"body","boost":1}],"ref":"url","tokenizer":"default","documentStore":{"store":{"/index.html":["123","15672:15672","4369:4369","5671:5671","5672:5672","amqp","amqp://localhost","amqpmetricreport","basic","client","connect","const","d","docker","enabl","event","event(\"test","exchang","exchangenam","exec","hostnam","import","index","inspector","instal","instanc","int","librari","local","made","match","meant","metric","metrics\";import","mit","modul","name","new","node","nodej","npm","p","plugin","queue","queuenam","r.reportevent(event);});run","rabbit","rabbitmq","rabbitmq_managementlicens","rabbitmqdock","readm","report","reporterconst","reporterreporter.start().then((r","result","run","save","send","setvalu","start","string","toto","ts","typescript","us","usag"],"/overview.html":["1","class","match","overview","result"],"/modules.html":["match","modul","result"],"/classes/AmqpMetricReporter.html":["0","1","1000","amqp","amqp.connection(connect","amqp.exchang","amqp.message(json.stringify(result","amqpconnect","amqpconnection.declareexchange(exchangenam","amqpconnection.declarequeue(queuenam","amqpmetricreport","amqpmetricreporter.getcountervalues(metr","amqpmetricreporter.getgaugevalue(metr","amqpmetricreporter.gethistogramvalues(metr","amqpmetricreporter.getmetervalues(metr","amqpmetricreporter.getmonotonecountervalues(metr","amqpmetricreporter.gettimervalues(metr","amqpmetricreporteropt","argument","array","async","await","build","bulk","call","chang","class","client","clock","cluster","clusterus","combin","comment","common","configur","connect","consol","const","constructor","constructor(undefin","count","counter","counter.getcount","creat","ctx","ctx.date","ctx.type","current","date","determin","document","elasticsearch","error","event","event.gettim","exchang","exchangenam","export","extend","file","flushev","function","gaug","gauge.getvalu","gener","get","getcountervalu","getcountervalues(count","getgaugevalu","getgaugevalue(gaug","gethistogramvalu","gethistogramvalues(histogram","getlog","getmetervalu","getmetervalues(met","getmonotonecountervalu","getmonotonecountervalues(count","getnumb","getnumber(valu","gettimervalu","gettimervalues(tim","group","handleresult","handleresults(ctx","histogram","histogram.getcount","histogram.getsnapshot","import","index","info","inspector","instanc","instanceof","instances.build","interfac","interv","isnan(count","isnan(valu","it'","lib/metrics/amqpmetricreporter.t","link","log","logger","map","match","memberof","messag","meter","meter.getcount","method","metric","metric.getgroup","metric.getnam","metricregistri","metricsetreportcontext","metrictyp","millisecond","minreportingtimeout","monoton","monotonecount","name","new","noth","null","num","number","number.isnan(valu","object","overallctx","overallreportcontext","param","paramet","privat","promis","promise.resolv","properti","protect","public","queue","queue.bind(exchang","queuenam","registri","report","reportcount","reportcounter(count","reportev","reportevent(ev","reportevent>(ev","reportgaug","reportgauge(gaug","reporthistogram","reporthistogram(histogram","reportingcontext","reportingresult","reportinterv","reportmet","reportmeter(met","reportmetr","reportmetric(metr","reporttim","reporttimer(tim","result","return","schedul","scheduledmetricreport","scheduledmetricreporteropt","send","set","setinterv","setlog","setlog(log","snapshot","sourc","specif","specifi","static","stdclock","string","super","support/regist","tag","tevent","this.buildtags(ctx.registri","this.exchang","this.exchange.send(messag","this.getnumber(meter.get15minuter","this.getnumber(meter.get1minuter","this.getnumber(meter.get5minuter","this.getnumber(meter.getmeanr","this.getnumber(snapshot.get75thpercentil","this.getnumber(snapshot.get95thpercentil","this.getnumber(snapshot.get98thpercentil","this.getnumber(snapshot.get999thpercentil","this.getnumber(snapshot.get99thpercentil","this.getnumber(snapshot.getmax","this.getnumber(snapshot.getmean","this.getnumber(snapshot.getmedian","this.getnumber(snapshot.getmin","this.getnumber(snapshot.getstddev","this.getnumber(timer.get15minuter","this.getnumber(timer.get1minuter","this.getnumber(timer.get5minuter","this.getnumber(timer.getmeanr","this.handleresults(nul","this.options.log","this.reportgauge(ev","this.reportmetric(count","this.reportmetric(gaug","this.reportmetric(histogram","this.reportmetric(met","this.reportmetric(tim","time","timeout","timer","timer.getcount","timer.getsnapshot","timestamp","timeunit","trigger","ts","type","typeof","unit","uri","us","valu","values[`count","values[`m15_r","values[`m1_r","values[`m5_r","values[`max","values[`mean","values[`mean_r","values[`min","values[`p50","values[`p75","values[`p95","values[`p98","values[`p99","values[`p999","values[`stddev","void","wether"],"/miscellaneous.html":["match","miscellan","report","result","variabl"],"/coverage.html":["100","19/19","amqpmetricreport","class","coverag","document","file","identifi","lib/metrics/amqpmetricreporter.t","match","project","result","statement","type"]},"length":6},"tokenStore":{"root":{"0":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0037002775208140612}}},"1":{"0":{"0":{"0":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0009250693802035153}}},"docs":{"/coverage.html":{"ref":"/coverage.html","tf":0.11764705882352941}}},"docs":{}},"2":{"3":{"docs":{"/index.html":{"ref":"/index.html","tf":0.010752688172043012}}},"docs":{}},"5":{"6":{"7":{"2":{"docs":{},":":{"1":{"5":{"6":{"7":{"2":{"docs":{"/index.html":{"ref":"/index.html","tf":0.010752688172043012}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}},"docs":{}},"9":{"docs":{},"/":{"1":{"9":{"docs":{"/coverage.html":{"ref":"/coverage.html","tf":0.058823529411764705}}},"docs":{}},"docs":{}}},"docs":{"/overview.html":{"ref":"/overview.html","tf":0.14285714285714285},"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0009250693802035153}}},"4":{"3":{"6":{"9":{"docs":{},":":{"4":{"3":{"6":{"9":{"docs":{"/index.html":{"ref":"/index.html","tf":0.010752688172043012}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}},"docs":{}},"5":{"6":{"7":{"1":{"docs":{},":":{"5":{"6":{"7":{"1":{"docs":{"/index.html":{"ref":"/index.html","tf":0.010752688172043012}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}},"2":{"docs":{},":":{"5":{"6":{"7":{"2":{"docs":{"/index.html":{"ref":"/index.html","tf":0.010752688172043012}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}},"docs":{}},"docs":{}},"docs":{}},"docs":{},"a":{"docs":{},"m":{"docs":{},"q":{"docs":{},"p":{"docs":{"/index.html":{"ref":"/index.html","tf":0.06451612903225806},"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0064754856614246065}},":":{"docs":{},"/":{"docs":{},"/":{"docs":{},"l":{"docs":{},"o":{"docs":{},"c":{"docs":{},"a":{"docs":{},"l":{"docs":{},"h":{"docs":{},"o":{"docs":{},"s":{"docs":{},"t":{"docs":{"/index.html":{"ref":"/index.html","tf":0.010752688172043012}}}}}}}}}}}}}},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"c":{"docs":{},"r":{"docs":{},"e":{"docs":{},"p":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{"/index.html":{"ref":"/index.html","tf":0.03225806451612903},"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":5.0212765957446805},"/coverage.html":{"ref":"/coverage.html","tf":0.058823529411764705}},"e":{"docs":{},"r":{"docs":{},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{},"r":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0009250693802035153}}}}}}}}}}}}}}}}}}}},"g":{"docs":{},"a":{"docs":{},"u":{"docs":{},"g":{"docs":{},"e":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{},"(":{"docs":{},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{},"r":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0009250693802035153}}}}}}}}}}}}}}}}},"h":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"m":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{},"r":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0009250693802035153}}}}}}}}}}}}}}}}}}}}}},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{},"r":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0009250693802035153}}}}}}}}}}}}}}}}},"o":{"docs":{},"n":{"docs":{},"o":{"docs":{},"t":{"docs":{},"o":{"docs":{},"n":{"docs":{},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{},"r":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0009250693802035153}}}}}}}}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{},"r":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0009250693802035153}}}}}}}}}}}}}}}}}}}}}},"o":{"docs":{},"p":{"docs":{},"t":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0018501387604070306}}}}}}}}}}}}}}}}}}},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"n":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"n":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0009250693802035153}}}}}}}}}}}}}}}}}}}},"e":{"docs":{},"x":{"docs":{},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0018501387604070306}}}}}}}}},"m":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"a":{"docs":{},"g":{"docs":{},"e":{"docs":{},"(":{"docs":{},"j":{"docs":{},"s":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"i":{"docs":{},"f":{"docs":{},"y":{"docs":{},"(":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0009250693802035153}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"n":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0009250693802035153}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{},"d":{"docs":{},"e":{"docs":{},"c":{"docs":{},"l":{"docs":{},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"x":{"docs":{},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},"(":{"docs":{},"e":{"docs":{},"x":{"docs":{},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0009250693802035153}}}}}}}}}}}}}}}}}}}}}},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"u":{"docs":{},"e":{"docs":{},"(":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"u":{"docs":{},"e":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0009250693802035153}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"g":{"docs":{},"u":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.009250693802035153}}}}}}}},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0027752081406105457}}}}}},"s":{"docs":{},"y":{"docs":{},"n":{"docs":{},"c":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0018501387604070306}}}}}},"w":{"docs":{},"a":{"docs":{},"i":{"docs":{},"t":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0009250693802035153}}}}}}},"b":{"docs":{},"a":{"docs":{},"s":{"docs":{},"i":{"docs":{},"c":{"docs":{"/index.html":{"ref":"/index.html","tf":0.010752688172043012}}}}}},"u":{"docs":{},"i":{"docs":{},"l":{"docs":{},"d":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0009250693802035153}}}}},"l":{"docs":{},"k":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0018501387604070306}}}}}},"c":{"docs":{},"l":{"docs":{},"i":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"/index.html":{"ref":"/index.html","tf":0.010752688172043012},"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0018501387604070306}}}}}},"a":{"docs":{},"s":{"docs":{},"s":{"docs":{"/overview.html":{"ref":"/overview.html","tf":0.14285714285714285},"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":5.001850138760407},"/coverage.html":{"ref":"/coverage.html","tf":0.058823529411764705}}}}},"o":{"docs":{},"c":{"docs":{},"k":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0064754856614246065}}}}},"u":{"docs":{},"s":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0009250693802035153}},"u":{"docs":{},"s":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0009250693802035153}}}}}}}}}},"o":{"docs":{},"n":{"docs":{},"n":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"/index.html":{"ref":"/index.html","tf":0.010752688172043012},"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.005550416281221091}}}}}},"s":{"docs":{},"t":{"docs":{"/index.html":{"ref":"/index.html","tf":0.010752688172043012},"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.01942645698427382}},"r":{"docs":{},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0018501387604070306}},"(":{"docs":{},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"f":{"docs":{},"i":{"docs":{},"n":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0009250693802035153}}}}}}}}}}}}}}}}},"o":{"docs":{},"l":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0009250693802035153}}}}},"f":{"docs":{},"i":{"docs":{},"g":{"docs":{},"u":{"docs":{},"r":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0018501387604070306}}}}}}}},"m":{"docs":{},"b":{"docs":{},"i":{"docs":{},"n":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0018501387604070306}}}}},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0009250693802035153}}}}},"o":{"docs":{},"n":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0009250693802035153}}}}}},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.005550416281221091}},"e":{"docs":{},"r":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.018501387604070305}},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0018501387604070306}}}}}}}}}}}}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"a":{"docs":{},"g":{"docs":{"/coverage.html":{"ref":"/coverage.html","tf":10.058823529411764}}}}}}}},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.009250693802035153}}}}},"h":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0009250693802035153}}}}}},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"t":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0018501387604070306}}}}}},"t":{"docs":{},"x":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.027752081406105456}},".":{"docs":{},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0009250693802035153}}}}}},"t":{"docs":{},"y":{"docs":{},"p":{"docs":{},"e":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0009250693802035153}}}}}}}}},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0009250693802035153}}}}}}}}},"d":{"docs":{"/index.html":{"ref":"/index.html","tf":0.010752688172043012}},"o":{"docs":{},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"r":{"docs":{"/index.html":{"ref":"/index.html","tf":0.021505376344086023}}}}},"u":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.005550416281221091},"/coverage.html":{"ref":"/coverage.html","tf":0.058823529411764705}}}}}}}}},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.008325624421831638}}}}},"e":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0009250693802035153}}}}}}}}}},"e":{"docs":{},"n":{"docs":{},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{"/index.html":{"ref":"/index.html","tf":0.010752688172043012}}}}}},"v":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"/index.html":{"ref":"/index.html","tf":0.03225806451612903},"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.008325624421831638}},"(":{"docs":{},"\"":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"/index.html":{"ref":"/index.html","tf":0.010752688172043012}}}}}}}},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0018501387604070306}}}}}}}}}}}}},"x":{"docs":{},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{"/index.html":{"ref":"/index.html","tf":0.010752688172043012},"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.008325624421831638}},"e":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{"/index.html":{"ref":"/index.html","tf":0.010752688172043012},"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.004625346901017576}}}}}}}}}}},"e":{"docs":{},"c":{"docs":{"/index.html":{"ref":"/index.html","tf":0.010752688172043012}}}},"p":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0018501387604070306}}}}}},"t":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0018501387604070306}}}}}}},"l":{"docs":{},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{},"i":{"docs":{},"c":{"docs":{},"s":{"docs":{},"e":{"docs":{},"a":{"docs":{},"r":{"docs":{},"c":{"docs":{},"h":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0037002775208140612}}}}}}}}}}}}}},"r":{"docs":{},"r":{"docs":{},"o":{"docs":{},"r":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0009250693802035153}}}}}}},"h":{"docs":{},"o":{"docs":{},"s":{"docs":{},"t":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{"/index.html":{"ref":"/index.html","tf":0.010752688172043012}}}}}}}},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"l":{"docs":{},"e":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0018501387604070306}},"s":{"docs":{},"(":{"docs":{},"c":{"docs":{},"t":{"docs":{},"x":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0009250693802035153}}}}}}}}}}}}}}}}}},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"m":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.014801110083256245}},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0009250693802035153}}}}}}},"s":{"docs":{},"n":{"docs":{},"a":{"docs":{},"p":{"docs":{},"s":{"docs":{},"h":{"docs":{},"o":{"docs":{},"t":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0009250693802035153}}}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"m":{"docs":{},"p":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{"/index.html":{"ref":"/index.html","tf":0.010752688172043012},"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0027752081406105457}}}}}}},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{"/index.html":{"ref":"/index.html","tf":5},"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0037002775208140612}}}}},"s":{"docs":{},"p":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"/index.html":{"ref":"/index.html","tf":0.043010752688172046},"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0009250693802035153}}}}}}}},"t":{"docs":{},"a":{"docs":{},"l":{"docs":{"/index.html":{"ref":"/index.html","tf":0.021505376344086023}}},"n":{"docs":{},"c":{"docs":{"/index.html":{"ref":"/index.html","tf":0.010752688172043012},"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.010175763182238668}},"e":{"docs":{},"o":{"docs":{},"f":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.004625346901017576}}}},"s":{"docs":{},".":{"docs":{},"b":{"docs":{},"u":{"docs":{},"i":{"docs":{},"l":{"docs":{},"d":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0009250693802035153}}}}}}}}}}}}}}},"t":{"docs":{"/index.html":{"ref":"/index.html","tf":0.010752688172043012}},"e":{"docs":{},"r":{"docs":{},"f":{"docs":{},"a":{"docs":{},"c":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0009250693802035153}}}}},"v":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0018501387604070306}}}}}},"f":{"docs":{},"o":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0009250693802035153}}}}},"s":{"docs":{},"n":{"docs":{},"a":{"docs":{},"n":{"docs":{},"(":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0018501387604070306}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0037002775208140612}}}}}}}}}}},"t":{"docs":{},"'":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0009250693802035153}}}},"d":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"i":{"docs":{},"f":{"docs":{},"i":{"docs":{"/coverage.html":{"ref":"/coverage.html","tf":0.058823529411764705}}}}}}}}}},"l":{"docs":{},"i":{"docs":{},"b":{"docs":{},"r":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"/index.html":{"ref":"/index.html","tf":0.010752688172043012}}}}}},"/":{"docs":{},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"c":{"docs":{},"s":{"docs":{},"/":{"docs":{},"a":{"docs":{},"m":{"docs":{},"q":{"docs":{},"p":{"docs":{},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"c":{"docs":{},"r":{"docs":{},"e":{"docs":{},"p":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},".":{"docs":{},"t":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0009250693802035153},"/coverage.html":{"ref":"/coverage.html","tf":0.058823529411764705}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"n":{"docs":{},"k":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.012025901942645698}}}}},"o":{"docs":{},"c":{"docs":{},"a":{"docs":{},"l":{"docs":{"/index.html":{"ref":"/index.html","tf":0.010752688172043012}}}}},"g":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0074005550416281225}},"g":{"docs":{},"e":{"docs":{},"r":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.01757631822386679}}}}}}}},"m":{"docs":{},"a":{"docs":{},"d":{"docs":{},"e":{"docs":{"/index.html":{"ref":"/index.html","tf":0.010752688172043012}}}},"t":{"docs":{},"c":{"docs":{},"h":{"docs":{"/index.html":{"ref":"/index.html","tf":0.021505376344086023},"/overview.html":{"ref":"/overview.html","tf":0.2857142857142857},"/modules.html":{"ref":"/modules.html","tf":0.4},"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0018501387604070306},"/miscellaneous.html":{"ref":"/miscellaneous.html","tf":0.25},"/coverage.html":{"ref":"/coverage.html","tf":0.11764705882352941}}}}},"p":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0037002775208140612}}}},"e":{"docs":{},"a":{"docs":{},"n":{"docs":{},"t":{"docs":{"/index.html":{"ref":"/index.html","tf":0.010752688172043012}}}}},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"c":{"docs":{"/index.html":{"ref":"/index.html","tf":0.03225806451612903},"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.03145235892691952}},"s":{"docs":{},"\"":{"docs":{},";":{"docs":{},"i":{"docs":{},"m":{"docs":{},"p":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{"/index.html":{"ref":"/index.html","tf":0.010752688172043012}}}}}}}}}},"e":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"p":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.012025901942645698}}}}}}}}}}}}}}}}}},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"g":{"docs":{},"r":{"docs":{},"o":{"docs":{},"u":{"docs":{},"p":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0009250693802035153}}}}}}},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0009250693802035153}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.004625346901017576}}}}}}}}}},"t":{"docs":{},"y":{"docs":{},"p":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.004625346901017576}}}}}}}},"e":{"docs":{},"r":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.014801110083256245}},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0009250693802035153}}}}}}}}}}}}},"h":{"docs":{},"o":{"docs":{},"d":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.004625346901017576}}}}}},"m":{"docs":{},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{},"o":{"docs":{},"f":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.018501387604070305}}}}}}}},"s":{"docs":{},"s":{"docs":{},"a":{"docs":{},"g":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0009250693802035153}}}}}}},"i":{"docs":{},"t":{"docs":{"/index.html":{"ref":"/index.html","tf":0.010752688172043012}}},"l":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0018501387604070306}}}}}}}}}}},"n":{"docs":{},"r":{"docs":{},"e":{"docs":{},"p":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{},"e":{"docs":{},"o":{"docs":{},"u":{"docs":{},"t":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0027752081406105457}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"c":{"docs":{},"e":{"docs":{},"l":{"docs":{},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{"/miscellaneous.html":{"ref":"/miscellaneous.html","tf":10.125}}}}}}}}}},"o":{"docs":{},"d":{"docs":{},"u":{"docs":{},"l":{"docs":{"/index.html":{"ref":"/index.html","tf":0.010752688172043012},"/modules.html":{"ref":"/modules.html","tf":10.2}}}}},"n":{"docs":{},"o":{"docs":{},"t":{"docs":{},"o":{"docs":{},"n":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0018501387604070306}},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.008325624421831638}}}}}}}}}}}}}}},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{"/index.html":{"ref":"/index.html","tf":0.010752688172043012},"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0037002775208140612}}}}},"e":{"docs":{},"w":{"docs":{"/index.html":{"ref":"/index.html","tf":0.021505376344086023},"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0037002775208140612}}}},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{"/index.html":{"ref":"/index.html","tf":0.010752688172043012}},"j":{"docs":{"/index.html":{"ref":"/index.html","tf":0.010752688172043012}}}}},"t":{"docs":{},"h":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0018501387604070306}}}}},"p":{"docs":{},"m":{"docs":{"/index.html":{"ref":"/index.html","tf":0.010752688172043012}}}},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.009250693802035153}}}},"m":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0009250693802035153}},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.009250693802035153}},".":{"docs":{},"i":{"docs":{},"s":{"docs":{},"n":{"docs":{},"a":{"docs":{},"n":{"docs":{},"(":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0009250693802035153}}}}}}}}}}}}}}}}}}},"p":{"docs":{"/index.html":{"ref":"/index.html","tf":0.043010752688172046}},"l":{"docs":{},"u":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{"/index.html":{"ref":"/index.html","tf":0.010752688172043012}}}}}}},"a":{"docs":{},"r":{"docs":{},"a":{"docs":{},"m":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.02312673450508788}},"e":{"docs":{},"t":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.014801110083256245}}}}}}}},"r":{"docs":{},"i":{"docs":{},"v":{"docs":{},"a":{"docs":{},"t":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.005550416281221091}}}}}},"o":{"docs":{},"m":{"docs":{},"i":{"docs":{},"s":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.005550416281221091}},"e":{"docs":{},".":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"o":{"docs":{},"l":{"docs":{},"v":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0009250693802035153}}}}}}}}}}}}},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"i":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0009250693802035153}}}}}}},"t":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.01942645698427382}}}}}},"j":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"/coverage.html":{"ref":"/coverage.html","tf":0.058823529411764705}}}}}}}},"u":{"docs":{},"b":{"docs":{},"l":{"docs":{},"i":{"docs":{},"c":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.01942645698427382}}}}}}}},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"u":{"docs":{},"e":{"docs":{"/index.html":{"ref":"/index.html","tf":0.010752688172043012},"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0018501387604070306}},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{"/index.html":{"ref":"/index.html","tf":0.010752688172043012},"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.004625346901017576}}}}},".":{"docs":{},"b":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"e":{"docs":{},"x":{"docs":{},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0009250693802035153}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},".":{"docs":{},"r":{"docs":{},"e":{"docs":{},"p":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"e":{"docs":{},"v":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},"e":{"docs":{},"v":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{},"}":{"docs":{},")":{"docs":{},";":{"docs":{},"r":{"docs":{},"u":{"docs":{},"n":{"docs":{"/index.html":{"ref":"/index.html","tf":0.010752688172043012}}}}}}}}}}}}}}}}}}}}}}}}}}}},"a":{"docs":{},"b":{"docs":{},"b":{"docs":{},"i":{"docs":{},"t":{"docs":{"/index.html":{"ref":"/index.html","tf":0.03225806451612903}},"m":{"docs":{},"q":{"docs":{"/index.html":{"ref":"/index.html","tf":0.021505376344086023}},"_":{"docs":{},"m":{"docs":{},"a":{"docs":{},"n":{"docs":{},"a":{"docs":{},"g":{"docs":{},"e":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"l":{"docs":{},"i":{"docs":{},"c":{"docs":{},"e":{"docs":{},"n":{"docs":{},"s":{"docs":{"/index.html":{"ref":"/index.html","tf":0.010752688172043012}}}}}}}}}}}}}}}}}}},"d":{"docs":{},"o":{"docs":{},"c":{"docs":{},"k":{"docs":{"/index.html":{"ref":"/index.html","tf":0.010752688172043012}}}}}}}}}}}}},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"m":{"docs":{"/index.html":{"ref":"/index.html","tf":5}}}}},"p":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{"/index.html":{"ref":"/index.html","tf":0.021505376344086023},"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.012025901942645698},"/miscellaneous.html":{"ref":"/miscellaneous.html","tf":0.25}},"e":{"docs":{},"r":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{"/index.html":{"ref":"/index.html","tf":0.010752688172043012}}}}}}},"r":{"docs":{},"e":{"docs":{},"p":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},".":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},")":{"docs":{},".":{"docs":{},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"n":{"docs":{},"(":{"docs":{},"(":{"docs":{},"r":{"docs":{"/index.html":{"ref":"/index.html","tf":0.010752688172043012}}}}}}}}}}}}}}}}}}}}}}}}}}},"v":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0009250693802035153}},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},"e":{"docs":{},"v":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0009250693802035153}}}}},">":{"docs":{},"(":{"docs":{},"e":{"docs":{},"v":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0009250693802035153}}}}}}}}}}},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0018501387604070306}},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0009250693802035153}}}}}}}}}}}}}}},"g":{"docs":{},"a":{"docs":{},"u":{"docs":{},"g":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0009250693802035153}},"e":{"docs":{},"(":{"docs":{},"g":{"docs":{},"a":{"docs":{},"u":{"docs":{},"g":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0018501387604070306}}}}}}}}}}}},"h":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"m":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0009250693802035153}},"(":{"docs":{},"h":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"m":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0018501387604070306}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.010175763182238668}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0018501387604070306}}}}}}}}},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0037002775208140612}}}}}}}},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0009250693802035153}},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0018501387604070306}}}}}}}},"r":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.010175763182238668}},"i":{"docs":{},"c":{"docs":{},"(":{"docs":{},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{},"r":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0018501387604070306}}}}}}}}}}}}},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0009250693802035153}},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0018501387604070306}}}}}}}}}}}}}}},"s":{"docs":{},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{"/index.html":{"ref":"/index.html","tf":0.021505376344086023},"/overview.html":{"ref":"/overview.html","tf":0.2857142857142857},"/modules.html":{"ref":"/modules.html","tf":0.4},"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.008325624421831638},"/miscellaneous.html":{"ref":"/miscellaneous.html","tf":0.25},"/coverage.html":{"ref":"/coverage.html","tf":0.11764705882352941}}}}}},"g":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.004625346901017576}}}}}}}},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{},"n":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0545790934320074}}}}}}},"u":{"docs":{},"n":{"docs":{"/index.html":{"ref":"/index.html","tf":0.010752688172043012}}}}},"s":{"docs":{},"a":{"docs":{},"v":{"docs":{},"e":{"docs":{"/index.html":{"ref":"/index.html","tf":0.010752688172043012}}}}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"/index.html":{"ref":"/index.html","tf":0.010752688172043012},"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0018501387604070306}}}},"t":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0018501387604070306}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{"/index.html":{"ref":"/index.html","tf":0.010752688172043012}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0009250693802035153}}}}}}}},"l":{"docs":{},"o":{"docs":{},"g":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0009250693802035153}},"(":{"docs":{},"l":{"docs":{},"o":{"docs":{},"g":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0018501387604070306}}}}}}}}}}},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{"/index.html":{"ref":"/index.html","tf":0.010752688172043012}}}},"t":{"docs":{},"i":{"docs":{},"c":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.012025901942645698}}}},"e":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"/coverage.html":{"ref":"/coverage.html","tf":0.058823529411764705}}}}}}}}},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{"/index.html":{"ref":"/index.html","tf":0.010752688172043012},"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.011100832562442183}}}}}},"d":{"docs":{},"c":{"docs":{},"l":{"docs":{},"o":{"docs":{},"c":{"docs":{},"k":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0018501387604070306}}}}}}}}},"c":{"docs":{},"h":{"docs":{},"e":{"docs":{},"d":{"docs":{},"u":{"docs":{},"l":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0064754856614246065}},"e":{"docs":{},"d":{"docs":{},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"c":{"docs":{},"r":{"docs":{},"e":{"docs":{},"p":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0018501387604070306}},"e":{"docs":{},"r":{"docs":{},"o":{"docs":{},"p":{"docs":{},"t":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0018501387604070306}}}}}}}}}}}}}}}}}}}}}}}}}}},"n":{"docs":{},"a":{"docs":{},"p":{"docs":{},"s":{"docs":{},"h":{"docs":{},"o":{"docs":{},"t":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0018501387604070306}}}}}}}}},"o":{"docs":{},"u":{"docs":{},"r":{"docs":{},"c":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0018501387604070306}}}}}},"p":{"docs":{},"e":{"docs":{},"c":{"docs":{},"i":{"docs":{},"f":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0018501387604070306}},"i":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.020351526364477335}}}}}}}},"u":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0009250693802035153}}}},"p":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"/":{"docs":{},"r":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0009250693802035153}}}}}}}}}}}}}}}},"t":{"docs":{},"o":{"docs":{},"t":{"docs":{},"o":{"docs":{"/index.html":{"ref":"/index.html","tf":0.010752688172043012}}}}},"s":{"docs":{"/index.html":{"ref":"/index.html","tf":0.010752688172043012},"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0009250693802035153}}},"y":{"docs":{},"p":{"docs":{},"e":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.01942645698427382},"/coverage.html":{"ref":"/coverage.html","tf":0.058823529411764705}},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"/index.html":{"ref":"/index.html","tf":0.021505376344086023}}}}}}}},"o":{"docs":{},"f":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0009250693802035153}}}}}}},"a":{"docs":{},"g":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.005550416281221091}}}},"e":{"docs":{},"v":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0018501387604070306}}}}}}},"h":{"docs":{},"i":{"docs":{},"s":{"docs":{},".":{"docs":{},"b":{"docs":{},"u":{"docs":{},"i":{"docs":{},"l":{"docs":{},"d":{"docs":{},"t":{"docs":{},"a":{"docs":{},"g":{"docs":{},"s":{"docs":{},"(":{"docs":{},"c":{"docs":{},"t":{"docs":{},"x":{"docs":{},".":{"docs":{},"r":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0009250693802035153}}}}}}}}}}}}}}}}}}}}}}}},"e":{"docs":{},"x":{"docs":{},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0009250693802035153}},"e":{"docs":{},".":{"docs":{},"s":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"m":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"a":{"docs":{},"g":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0009250693802035153}}}}}}}}}}}}}}}}}}}}}},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"1":{"5":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"u":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0009250693802035153}}}}}}}}}},"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"u":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0009250693802035153}}}}}}}}}},"5":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"u":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0009250693802035153}}}}}}}}}},"docs":{},"m":{"docs":{},"e":{"docs":{},"a":{"docs":{},"n":{"docs":{},"r":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0009250693802035153}}}}}}}}}}}}}}}},"s":{"docs":{},"n":{"docs":{},"a":{"docs":{},"p":{"docs":{},"s":{"docs":{},"h":{"docs":{},"o":{"docs":{},"t":{"docs":{},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"7":{"5":{"docs":{},"t":{"docs":{},"h":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"c":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"i":{"docs":{},"l":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0018501387604070306}}}}}}}}}}}}}},"docs":{}},"9":{"5":{"docs":{},"t":{"docs":{},"h":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"c":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"i":{"docs":{},"l":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0018501387604070306}}}}}}}}}}}}}},"8":{"docs":{},"t":{"docs":{},"h":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"c":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"i":{"docs":{},"l":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0018501387604070306}}}}}}}}}}}}}},"9":{"9":{"docs":{},"t":{"docs":{},"h":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"c":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"i":{"docs":{},"l":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0018501387604070306}}}}}}}}}}}}}},"docs":{},"t":{"docs":{},"h":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"c":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"i":{"docs":{},"l":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0018501387604070306}}}}}}}}}}}}}},"docs":{}},"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0018501387604070306}}}},"e":{"docs":{},"a":{"docs":{},"n":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0018501387604070306}}}},"d":{"docs":{},"i":{"docs":{},"a":{"docs":{},"n":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0018501387604070306}}}}}}},"i":{"docs":{},"n":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0018501387604070306}}}}},"s":{"docs":{},"t":{"docs":{},"d":{"docs":{},"d":{"docs":{},"e":{"docs":{},"v":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0018501387604070306}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{},"e":{"docs":{},"r":{"docs":{},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"1":{"5":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"u":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0009250693802035153}}}}}}}}}},"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"u":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0009250693802035153}}}}}}}}}},"5":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"u":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0009250693802035153}}}}}}}}}},"docs":{},"m":{"docs":{},"e":{"docs":{},"a":{"docs":{},"n":{"docs":{},"r":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0009250693802035153}}}}}}}}}}}}}}}}}}}}}}}}}},"h":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"l":{"docs":{},"e":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{},"s":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0009250693802035153}}}}}}}}}}}}}}}}}}},"o":{"docs":{},"p":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},".":{"docs":{},"l":{"docs":{},"o":{"docs":{},"g":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0018501387604070306}}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"p":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"g":{"docs":{},"a":{"docs":{},"u":{"docs":{},"g":{"docs":{},"e":{"docs":{},"(":{"docs":{},"e":{"docs":{},"v":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0009250693802035153}}}}}}}}}},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"c":{"docs":{},"(":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0009250693802035153}}}}}}},"g":{"docs":{},"a":{"docs":{},"u":{"docs":{},"g":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0009250693802035153}}}}}},"h":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"m":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0009250693802035153}}}}}}}}}}},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0009250693802035153}}}}},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0009250693802035153}}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"m":{"docs":{},"e":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0027752081406105457}},"o":{"docs":{},"u":{"docs":{},"t":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0009250693802035153}}}}},"r":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.014801110083256245}},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0009250693802035153}}}}}}},"s":{"docs":{},"n":{"docs":{},"a":{"docs":{},"p":{"docs":{},"s":{"docs":{},"h":{"docs":{},"o":{"docs":{},"t":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0009250693802035153}}}}}}}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"m":{"docs":{},"p":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0018501387604070306}}}}}}},"u":{"docs":{},"n":{"docs":{},"i":{"docs":{},"t":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0027752081406105457}}}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"g":{"docs":{},"e":{"docs":{},"r":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0009250693802035153}}}}}}}}},"u":{"docs":{},"s":{"docs":{"/index.html":{"ref":"/index.html","tf":0.03225806451612903},"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0064754856614246065}},"a":{"docs":{},"g":{"docs":{"/index.html":{"ref":"/index.html","tf":0.010752688172043012}}}}},"n":{"docs":{},"i":{"docs":{},"t":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.005550416281221091}}}}},"r":{"docs":{},"i":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0009250693802035153}}}}},"o":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{},"i":{"docs":{},"e":{"docs":{},"w":{"docs":{"/overview.html":{"ref":"/overview.html","tf":10.142857142857142}}}}}},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"c":{"docs":{},"t":{"docs":{},"x":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0009250693802035153}}}}},"r":{"docs":{},"e":{"docs":{},"p":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0027752081406105457}}}}}}}}}}}}}}}}}}}}},"b":{"docs":{},"j":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0009250693802035153}}}}}}}},"f":{"docs":{},"i":{"docs":{},"l":{"docs":{},"e":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0009250693802035153},"/coverage.html":{"ref":"/coverage.html","tf":0.058823529411764705}}}}},"l":{"docs":{},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"e":{"docs":{},"v":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0027752081406105457}}}}}}}},"u":{"docs":{},"n":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0009250693802035153}}}}}}}}}},"g":{"docs":{},"a":{"docs":{},"u":{"docs":{},"g":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.016651248843663275}},"e":{"docs":{},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0009250693802035153}}}}}}}}}}}}}},"e":{"docs":{},"n":{"docs":{},"e":{"docs":{},"r":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0018501387604070306}}}}},"t":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.01572617946345976}},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0009250693802035153}},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0018501387604070306}}}}}}}}}}}}}}}}}}}}},"g":{"docs":{},"a":{"docs":{},"u":{"docs":{},"g":{"docs":{},"e":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0009250693802035153}},"e":{"docs":{},"(":{"docs":{},"g":{"docs":{},"a":{"docs":{},"u":{"docs":{},"g":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0018501387604070306}}}}}}}}}}}}}}}}},"h":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"m":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0009250693802035153}},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"h":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"m":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0018501387604070306}}}}}}}}}}}}}}}}}}}}}}}}}}},"l":{"docs":{},"o":{"docs":{},"g":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0027752081406105457}}}}},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0009250693802035153}},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0018501387604070306}}}}}}}}}}}}}}}},"o":{"docs":{},"n":{"docs":{},"o":{"docs":{},"t":{"docs":{},"o":{"docs":{},"n":{"docs":{},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0009250693802035153}},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0018501387604070306}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0009250693802035153}},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0018501387604070306}}}}}}}}}}}}},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0009250693802035153}},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0018501387604070306}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"o":{"docs":{},"u":{"docs":{},"p":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0018501387604070306}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.043478260869565216}},"e":{"docs":{},"s":{"docs":{},"[":{"docs":{},"`":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0027752081406105457}}}}}}},"m":{"1":{"5":{"docs":{},"_":{"docs":{},"r":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0018501387604070306}}}}},"docs":{},"_":{"docs":{},"r":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0018501387604070306}}}}},"5":{"docs":{},"_":{"docs":{},"r":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0018501387604070306}}}}},"docs":{},"a":{"docs":{},"x":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0018501387604070306}}}},"e":{"docs":{},"a":{"docs":{},"n":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0018501387604070306}},"_":{"docs":{},"r":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0018501387604070306}}}}}}},"i":{"docs":{},"n":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0018501387604070306}}}}},"p":{"5":{"0":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0018501387604070306}}},"docs":{}},"7":{"5":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0018501387604070306}}},"docs":{}},"9":{"5":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0018501387604070306}}},"8":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0018501387604070306}}},"9":{"9":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0018501387604070306}}},"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0018501387604070306}}},"docs":{}},"docs":{}},"s":{"docs":{},"t":{"docs":{},"d":{"docs":{},"d":{"docs":{},"e":{"docs":{},"v":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0018501387604070306}}}}}}}}}}}}}},"r":{"docs":{},"i":{"docs":{},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{"/miscellaneous.html":{"ref":"/miscellaneous.html","tf":0.125}}}}}}}},"o":{"docs":{},"i":{"docs":{},"d":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0018501387604070306}}}}}},"w":{"docs":{},"e":{"docs":{},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{"/classes/AmqpMetricReporter.html":{"ref":"/classes/AmqpMetricReporter.html","tf":0.0009250693802035153}}}}}}}}},"length":336},"corpusTokens":["0","1","100","1000","123","15672:15672","19/19","4369:4369","5671:5671","5672:5672","amqp","amqp.connection(connect","amqp.exchang","amqp.message(json.stringify(result","amqp://localhost","amqpconnect","amqpconnection.declareexchange(exchangenam","amqpconnection.declarequeue(queuenam","amqpmetricreport","amqpmetricreporter.getcountervalues(metr","amqpmetricreporter.getgaugevalue(metr","amqpmetricreporter.gethistogramvalues(metr","amqpmetricreporter.getmetervalues(metr","amqpmetricreporter.getmonotonecountervalues(metr","amqpmetricreporter.gettimervalues(metr","amqpmetricreporteropt","argument","array","async","await","basic","build","bulk","call","chang","class","client","clock","cluster","clusterus","combin","comment","common","configur","connect","consol","const","constructor","constructor(undefin","count","counter","counter.getcount","coverag","creat","ctx","ctx.date","ctx.type","current","d","date","determin","docker","document","elasticsearch","enabl","error","event","event(\"test","event.gettim","exchang","exchangenam","exec","export","extend","file","flushev","function","gaug","gauge.getvalu","gener","get","getcountervalu","getcountervalues(count","getgaugevalu","getgaugevalue(gaug","gethistogramvalu","gethistogramvalues(histogram","getlog","getmetervalu","getmetervalues(met","getmonotonecountervalu","getmonotonecountervalues(count","getnumb","getnumber(valu","gettimervalu","gettimervalues(tim","group","handleresult","handleresults(ctx","histogram","histogram.getcount","histogram.getsnapshot","hostnam","identifi","import","index","info","inspector","instal","instanc","instanceof","instances.build","int","interfac","interv","isnan(count","isnan(valu","it'","lib/metrics/amqpmetricreporter.t","librari","link","local","log","logger","made","map","match","meant","memberof","messag","meter","meter.getcount","method","metric","metric.getgroup","metric.getnam","metricregistri","metrics\";import","metricsetreportcontext","metrictyp","millisecond","minreportingtimeout","miscellan","mit","modul","monoton","monotonecount","name","new","node","nodej","noth","npm","null","num","number","number.isnan(valu","object","overallctx","overallreportcontext","overview","p","param","paramet","plugin","privat","project","promis","promise.resolv","properti","protect","public","queue","queue.bind(exchang","queuenam","r.reportevent(event);});run","rabbit","rabbitmq","rabbitmq_managementlicens","rabbitmqdock","readm","registri","report","reportcount","reportcounter(count","reporterconst","reporterreporter.start().then((r","reportev","reportevent(ev","reportevent>(ev","reportgaug","reportgauge(gaug","reporthistogram","reporthistogram(histogram","reportingcontext","reportingresult","reportinterv","reportmet","reportmeter(met","reportmetr","reportmetric(metr","reporttim","reporttimer(tim","result","return","run","save","schedul","scheduledmetricreport","scheduledmetricreporteropt","send","set","setinterv","setlog","setlog(log","setvalu","snapshot","sourc","specif","specifi","start","statement","static","stdclock","string","super","support/regist","tag","tevent","this.buildtags(ctx.registri","this.exchang","this.exchange.send(messag","this.getnumber(meter.get15minuter","this.getnumber(meter.get1minuter","this.getnumber(meter.get5minuter","this.getnumber(meter.getmeanr","this.getnumber(snapshot.get75thpercentil","this.getnumber(snapshot.get95thpercentil","this.getnumber(snapshot.get98thpercentil","this.getnumber(snapshot.get999thpercentil","this.getnumber(snapshot.get99thpercentil","this.getnumber(snapshot.getmax","this.getnumber(snapshot.getmean","this.getnumber(snapshot.getmedian","this.getnumber(snapshot.getmin","this.getnumber(snapshot.getstddev","this.getnumber(timer.get15minuter","this.getnumber(timer.get1minuter","this.getnumber(timer.get5minuter","this.getnumber(timer.getmeanr","this.handleresults(nul","this.options.log","this.reportgauge(ev","this.reportmetric(count","this.reportmetric(gaug","this.reportmetric(histogram","this.reportmetric(met","this.reportmetric(tim","time","timeout","timer","timer.getcount","timer.getsnapshot","timestamp","timeunit","toto","trigger","ts","type","typeof","typescript","unit","uri","us","usag","valu","values[`count","values[`m15_r","values[`m1_r","values[`m5_r","values[`max","values[`mean","values[`mean_r","values[`min","values[`p50","values[`p75","values[`p95","values[`p98","values[`p99","values[`p999","values[`stddev","variabl","void","wether"],"pipeline":["trimmer","stopWordFilter","stemmer"]},
    "store": {"/index.html":{"url":"/index.html","title":"readme - index","body":"\n                   \ninspector-amqp\nTypescript Metrics Reporter for AMQP.\nThis library is made for inspector-metrics node module and is meant to be used with typescript / nodejs.\nIt uses amqp-ts as amqp client.\ninstall\nnpm install --save inspector-amqp\nbasic usage\nimport { Event } from \"inspector-metrics\";import { AmqpMetricReporter } from \"../metrics\";// instance the Amqp reporterconst reporter: AmqpMetricReporter = new AmqpMetricReporter({  connection: \"amqp://localhost\",  exchangeName: \"exchange\",  queueName: \"queue\",});// start reporterreporter.start().then((r) => {  const event = new Event(\"test\")    .setValue({      int: 123,      string: \"toto\",    });  // send event  r.reportEvent(event);});running rabbitmq locally (using docker)\ndocker run -d --hostname my-rabbit --name my-rabbit -p 4369:4369 -p 5671:5671 -p 5672:5672 -p 15672:15672 rabbitmqdocker exec my-rabbit rabbitmq-plugins enable rabbitmq_managementLicense\nMIT\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"/overview.html":{"url":"/overview.html","title":"overview - overview","body":"\n                   \nOverview\n\n    \n            \n                \n                    \n                        \n                        1 class\n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"/modules.html":{"url":"/modules.html","title":"modules - modules","body":"\n                   \n\nModules\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"/classes/AmqpMetricReporter.html":{"url":"/classes/AmqpMetricReporter.html","title":"class - AmqpMetricReporter","body":"\n                   \n\n\n\n\n\n\n\n  Classes\n  AmqpMetricReporter\n\n\n\n    \n        Infos\n    \n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/AmqpMetricReporter.ts\n        \n\n\n            \n                Constructor\n                    \n                        \n                            \n                                \n                                    constructor(undefined: { connection: string; exchangeName: string; queueName: string; log?: Logger; reportInterval?: num...)\n                                \n                            \n            \n                            \n                                \n                                        Creates an instance of AmqpMetricReporter.\n            \n                                \n                            \n                        \n                    \n            \n\n            \n                Methods\n                    \n                        \n                            \n                                \n                                    Public getMonotoneCounterValues\n                                \n                            \n            \n                            \n                                \n                                        \n                                            \n                                        \n                                    getMonotoneCounterValues(counter: MonotoneCounter)\n                                \n                            \n            \n                            \n                                \n                                        Gets the values for the specified monotone counter metric.\n            \n                                        \n                                                Parameters :\n                                                \n                                                        \n                                                            \n                                                                counter\n                                                                    :     MonotoneCounter\n            \n                                                            \n                                                            \n                                                                \n                                                            \n                                                        \n                                                \n                                        \n                                        \n                                            Returns:     {}\n            \n                                        \n                                            \n                                                * \n            \n                                            \n                                \n                            \n                        \n                    \n                    \n                        \n                            \n                                \n                                    Public getCounterValues\n                                \n                            \n            \n                            \n                                \n                                        \n                                            \n                                        \n                                    getCounterValues(counter: Counter)\n                                \n                            \n            \n                            \n                                \n                                        Gets the values for the specified counter metric.\n            \n                                        \n                                                Parameters :\n                                                \n                                                        \n                                                            \n                                                                counter\n                                                                    :     Counter\n            \n                                                            \n                                                            \n                                                                \n                                                            \n                                                        \n                                                \n                                        \n                                        \n                                            Returns:     {}\n            \n                                        \n                                            \n                                                * \n            \n                                            \n                                \n                            \n                        \n                    \n                    \n                        \n                            \n                                \n                                    Public getGaugeValue\n                                \n                            \n            \n                            \n                                \n                                        \n                                            \n                                        \n                                    getGaugeValue(gauge: Gauge)\n                                \n                            \n            \n                            \n                                \n                                        Gets the values for the specified {Gauge} metric.\n            \n                                        \n                                                Parameters :\n                                                \n                                                        \n                                                            \n                                                                gauge\n                                                                    :     Gauge\n            \n                                                            \n                                                            \n                                                                \n                                                            \n                                                        \n                                                \n                                        \n                                        \n                                            Returns:     {}\n            \n                                        \n                                            \n                                                * \n            \n                                            \n                                \n                            \n                        \n                    \n                    \n                        \n                            \n                                \n                                    Public getHistogramValues\n                                \n                            \n            \n                            \n                                \n                                        \n                                            \n                                        \n                                    getHistogramValues(histogram: Histogram)\n                                \n                            \n            \n                            \n                                \n                                        Gets the values for the specified {Histogram} metric.\n            \n                                        \n                                                Parameters :\n                                                \n                                                        \n                                                            \n                                                                histogram\n                                                                    :     Histogram\n            \n                                                            \n                                                            \n                                                                \n                                                            \n                                                        \n                                                \n                                        \n                                        \n                                            Returns:     {}\n            \n                                        \n                                            \n                                                * \n            \n                                            \n                                \n                            \n                        \n                    \n                    \n                        \n                            \n                                \n                                    Public getMeterValues\n                                \n                            \n            \n                            \n                                \n                                        \n                                            \n                                        \n                                    getMeterValues(meter: Meter)\n                                \n                            \n            \n                            \n                                \n                                        Gets the values for the specified {Meter} metric.\n            \n                                        \n                                                Parameters :\n                                                \n                                                        \n                                                            \n                                                                meter\n                                                                    :     Meter\n            \n                                                            \n                                                            \n                                                                \n                                                            \n                                                        \n                                                \n                                        \n                                        \n                                            Returns:     {}\n            \n                                        \n                                            \n                                                * \n            \n                                            \n                                \n                            \n                        \n                    \n                    \n                        \n                            \n                                \n                                    Public getTimerValues\n                                \n                            \n            \n                            \n                                \n                                        \n                                            \n                                        \n                                    getTimerValues(timer: Timer)\n                                \n                            \n            \n                            \n                                \n                                        Gets the values for the specified {Timer} metric.\n            \n                                        \n                                                Parameters :\n                                                \n                                                        \n                                                            \n                                                                timer\n                                                                    :     Timer\n            \n                                                            \n                                                            \n                                                                \n                                                            \n                                                        \n                                                \n                                        \n                                        \n                                            Returns:     {}\n            \n                                        \n                                            \n                                                * \n            \n                                            \n                                \n                            \n                        \n                    \n                    \n                        \n                            \n                                \n                                    Private getNumber\n                                \n                            \n            \n                            \n                                \n                                        \n                                            \n                                        \n                                    getNumber(value: number)\n                                \n                            \n            \n                            \n                                \n                                        Either gets 0 or the specifed value.\n            \n                                        \n                                                Parameters :\n                                                \n                                                        \n                                                            \n                                                                value\n                                                            \n                                                            \n                                                                \n                                                            \n                                                        \n                                                \n                                        \n                                        \n                                            Returns:     number\n            \n                                        \n                                            \n                                                * \n            \n                                            \n                                \n                            \n                        \n                    \n                    \n                        \n                            \n                                \n                                    Public getLog\n                                \n                            \n            \n                            \n                                \n                                        \n                                            \n                                        \n                                    getLog()\n                                \n                            \n            \n                            \n                                \n                                        Gets the logger instance.\n            \n                                        \n                                        \n                                        \n                                            Returns:     Logger\n            \n                                        \n                                            \n                                                * \n            \n                                            \n                                \n                            \n                        \n                    \n                    \n                        \n                            \n                                \n                                    Public setLog\n                                \n                            \n            \n                            \n                                \n                                        \n                                            \n                                        \n                                    setLog(log: Logger)\n                                \n                            \n            \n                            \n                                \n                                        Sets the logger instance.\n            \n                                        \n                                                Parameters :\n                                                \n                                                        \n                                                            \n                                                                log\n                                                                    :     Logger\n            \n                                                            \n                                                            \n                                                                \n                                                            \n                                                        \n                                                \n                                        \n                                        \n                                            Returns:     void\n            \n                                        \n                                            \n                                                \n                                            \n                                \n                            \n                        \n                    \n                    \n                        \n                            \n                                \n                                    Public reportEvent\n                                \n                            \n            \n                            \n                                \n                                        \n                                            \n                                        \n                                    reportEvent(event: TEvent)\n                                \n                            \n            \n                            \n                                \n                                        Reports an {@link Event}.\n            \n                                        \n                                                Parameters :\n                                                \n                                                        \n                                                            \n                                                                event\n                                                                    :     Event\n            \n                                                            \n                                                            \n                                                                \n                                                            \n                                                        \n                                                \n                                        \n                                        \n                                            Returns:     any\n            \n                                        \n                                            \n                                                * \n            \n                                            \n                                \n                            \n                        \n                    \n                    \n                        \n                            \n                                \n                                    Public flushEvents\n                                \n                            \n            \n                            \n                                \n                                        \n                                            \n                                        \n                                    flushEvents()\n                                \n                            \n            \n                            \n                                \n                                        Does nothing\n            \n                                        \n                                        \n                                        \n                                            Returns:     any\n            \n                                        \n                                            \n                                                * \n            \n                                            \n                                \n                            \n                        \n                    \n                    \n                        \n                            \n                                \n                                    Protected handleResults\n                                \n                            \n            \n                            \n                                \n                                        \n                                            \n                                        \n                                    handleResults(ctx: OverallReportContext, registry: MetricRegistry, date: Date, type: MetricType, results: ReportingResult[])\n                                \n                            \n            \n                            \n                                \n                                        Send the combinations of index and document to the elasticsearch clusterusing the bulk method of the elasticsearch client.\n            \n                                        \n                                                Parameters :\n                                                \n                                                        \n                                                            \n                                                                registry\n                                                                    :     MetricRegistry\n            \n                                                            \n                                                            \n                                                                \n                                                            \n                                                        \n                                                        \n                                                            \n                                                                date\n                                                                    :     Date\n            \n                                                            \n                                                            \n                                                                \n                                                            \n                                                        \n                                                        \n                                                            \n                                                                type\n                                                                    :     MetricType\n            \n                                                            \n                                                            \n                                                                \n                                                            \n                                                        \n                                                        \n                                                            \n                                                                results\n                                                                    :     Array\n            \n                                                            \n                                                            \n                                                                \n                                                            \n                                                        \n                                                \n                                        \n                                        \n                                            Returns:     any\n            \n                                        \n                                            \n                                                * \n            \n                                            \n                                \n                            \n                        \n                    \n                    \n                        \n                            \n                                \n                                    Protected reportMetric\n                                \n                            \n            \n                            \n                                \n                                        \n                                            \n                                        \n                                    reportMetric(metric: Metric, ctx: MetricSetReportContext)\n                                \n                            \n            \n                            \n                                \n                                        Generalized reporting method of all types of metric instances.Builds the index configuration document and the metric document.\n            \n                                        \n                                                Parameters :\n                                                \n                                                        \n                                                            \n                                                                metric\n                                                                    :     Metric\n            \n                                                            \n                                                            \n                                                                \n                                                            \n                                                        \n                                                        \n                                                            \n                                                                ctx\n                                                                    :     ReportingContext\n            \n                                                            \n                                                            \n                                                                \n                                                            \n                                                        \n                                                \n                                        \n                                        \n                                            Returns:     {}\n            \n                                        \n                                            \n                                                * \n            \n                                            \n                                \n                            \n                        \n                    \n                    \n                        \n                            \n                                \n                                    Protected reportCounter\n                                \n                            \n            \n                            \n                                \n                                        \n                                            \n                                        \n                                    reportCounter(counter: MonotoneCounter | Counter, ctx: MetricSetReportContext)\n                                \n                            \n            \n                            \n                                \n                                        Calls {@link #reportMetric} with the specified arguments.>)} ctx\n            \n                                        \n                                                Parameters :\n                                                \n                                                        \n                                                            \n                                                                counter\n                                                            \n                                                            \n                                                                \n                                                            \n                                                        \n                                                \n                                        \n                                        \n                                            Returns:     {}\n            \n                                        \n                                            \n                                                * \n            \n                                            \n                                \n                            \n                        \n                    \n                    \n                        \n                            \n                                \n                                    Protected reportGauge\n                                \n                            \n            \n                            \n                                \n                                        \n                                            \n                                        \n                                    reportGauge(gauge: Gauge, ctx: MetricSetReportContext>)\n                                \n                            \n            \n                            \n                                \n                                        Calls {@link #reportMetric} with the specified arguments.\n            \n                                        \n                                                Parameters :\n                                                \n                                                        \n                                                            \n                                                                gauge\n                                                                    :     Gauge\n            \n                                                            \n                                                            \n                                                                \n                                                            \n                                                        \n                                                        \n                                                            \n                                                                ctx\n                                                                    :     ReportingContext\n            \n                                                            \n                                                            \n                                                                \n                                                            \n                                                        \n                                                \n                                        \n                                        \n                                            Returns:     {}\n            \n                                        \n                                            \n                                                * \n            \n                                            \n                                \n                            \n                        \n                    \n                    \n                        \n                            \n                                \n                                    Protected reportHistogram\n                                \n                            \n            \n                            \n                                \n                                        \n                                            \n                                        \n                                    reportHistogram(histogram: Histogram, ctx: MetricSetReportContext)\n                                \n                            \n            \n                            \n                                \n                                        Calls {@link #reportMetric} with the specified arguments.\n            \n                                        \n                                                Parameters :\n                                                \n                                                        \n                                                            \n                                                                histogram\n                                                                    :     Histogram\n            \n                                                            \n                                                            \n                                                                \n                                                            \n                                                        \n                                                        \n                                                            \n                                                                ctx\n                                                                    :     ReportingContext\n            \n                                                            \n                                                            \n                                                                \n                                                            \n                                                        \n                                                \n                                        \n                                        \n                                            Returns:     {}\n            \n                                        \n                                            \n                                                * \n            \n                                            \n                                \n                            \n                        \n                    \n                    \n                        \n                            \n                                \n                                    Protected reportMeter\n                                \n                            \n            \n                            \n                                \n                                        \n                                            \n                                        \n                                    reportMeter(meter: Meter, ctx: MetricSetReportContext)\n                                \n                            \n            \n                            \n                                \n                                        Calls {@link #reportMetric} with the specified arguments.\n            \n                                        \n                                                Parameters :\n                                                \n                                                        \n                                                            \n                                                                meter\n                                                                    :     Meter\n            \n                                                            \n                                                            \n                                                                \n                                                            \n                                                        \n                                                        \n                                                            \n                                                                ctx\n                                                                    :     ReportingContext\n            \n                                                            \n                                                            \n                                                                \n                                                            \n                                                        \n                                                \n                                        \n                                        \n                                            Returns:     {}\n            \n                                        \n                                            \n                                                * \n            \n                                            \n                                \n                            \n                        \n                    \n                    \n                        \n                            \n                                \n                                    Protected reportTimer\n                                \n                            \n            \n                            \n                                \n                                        \n                                            \n                                        \n                                    reportTimer(timer: Timer, ctx: MetricSetReportContext)\n                                \n                            \n            \n                            \n                                \n                                        Calls {@link #reportMetric} with the specified arguments.\n            \n                                        \n                                                Parameters :\n                                                \n                                                        \n                                                            \n                                                                timer\n                                                                    :     Timer\n            \n                                                            \n                                                            \n                                                                \n                                                            \n                                                        \n                                                        \n                                                            \n                                                                ctx\n                                                                    :     ReportingContext\n            \n                                                            \n                                                            \n                                                                \n                                                            \n                                                        \n                                                \n                                        \n                                        \n                                            Returns:     {}\n            \n                                        \n                                            \n                                                * \n            \n                                            \n                                \n                            \n                        \n                    \n            \n\n\n            \n                Properties\n                    \n                        \n                            \n                                \n                                    Private exchange\n                                \n                            \n                            \n                                \n                                    exchange:     Exchange\n            \n                                \n                            \n                            \n                                \n                                    Amqp exchange used to do reporting.\n            \n                                \n                            \n                        \n                    \n            \n    \n    \n        import \"source-map-support/register\";\r\n\r\nimport * as Amqp from \"amqp-ts\";\r\n\r\nimport {\r\n  Clock,\r\n  Counter,\r\n  Event,\r\n  Gauge,\r\n  Histogram,\r\n  Logger,\r\n  Meter,\r\n  Metric,\r\n  MetricRegistry,\r\n  MetricSetReportContext,\r\n  MetricType,\r\n  MILLISECOND,\r\n  MonotoneCounter,\r\n  OverallReportContext,\r\n  ReportingResult,\r\n  ScheduledMetricReporter,\r\n  ScheduledMetricReporterOptions,\r\n  Scheduler,\r\n  StdClock,\r\n  Timer,\r\n  TimeUnit,\r\n} from \"inspector-metrics\";\r\n\r\nexport interface AmqpMetricReporterOptions extends ScheduledMetricReporterOptions {\r\n  /**\r\n   * Logger instance used to report errors.\r\n   *\r\n   * @type {Logger}\r\n   * @memberof AmqpMetricReporterOptions\r\n   */\r\n  log: Logger;\r\n\r\n  // TO DO: COMMENT\r\n  connection: string;\r\n  exchangeName: string;\r\n  queueName: string;\r\n}\r\n\r\nexport class AmqpMetricReporter extends ScheduledMetricReporter {\r\n  /**\r\n   * Gets the values for the specified monotone counter metric.\r\n   *\r\n   * @static\r\n   * @param {MonotoneCounter} counter\r\n   * @returns {{}}\r\n   * @memberof AmqpMetricReporter\r\n   */\r\n  public static getMonotoneCounterValues(counter: MonotoneCounter): {} {\r\n    const count = counter.getCount();\r\n    if (!count || isNaN(count)) {\r\n      return null;\r\n    }\r\n    return { count };\r\n  }\r\n\r\n  /**\r\n   * Gets the values for the specified counter metric.\r\n   *\r\n   * @static\r\n   * @param {Counter} counter\r\n   * @returns {{}}\r\n   * @memberof AmqpMetricReporter\r\n   */\r\n  public static getCounterValues(counter: Counter): {} {\r\n    const count = counter.getCount();\r\n    if (!count || isNaN(count)) {\r\n      return null;\r\n    }\r\n    return { count };\r\n  }\r\n\r\n  /**\r\n   * Gets the values for the specified {Gauge} metric.\r\n   *\r\n   * @static\r\n   * @param {Gauge} gauge\r\n   * @returns {{}}\r\n   * @memberof AmqpMetricReporter\r\n   */\r\n  public static getGaugeValue(gauge: Gauge): {} {\r\n    const value = gauge.getValue();\r\n    if ((!value && value !== 0) || Number.isNaN(value)) {\r\n      return null;\r\n    }\r\n    if (typeof value === \"object\") {\r\n      return value;\r\n    }\r\n    return { value };\r\n  }\r\n\r\n  /**\r\n   * Gets the values for the specified {Histogram} metric.\r\n   *\r\n   * @static\r\n   * @param {Histogram} histogram\r\n   * @returns {{}}\r\n   * @memberof AmqpMetricReporter\r\n   */\r\n  public static getHistogramValues(histogram: Histogram): {} {\r\n    const value = histogram.getCount();\r\n    if (!value || isNaN(value)) {\r\n      return null;\r\n    }\r\n    const snapshot = histogram.getSnapshot();\r\n    const values: any = {};\r\n\r\n    values[`count`] = value;\r\n    values[`max`] = this.getNumber(snapshot.getMax());\r\n    values[`mean`] = this.getNumber(snapshot.getMean());\r\n    values[`min`] = this.getNumber(snapshot.getMin());\r\n    values[`p50`] = this.getNumber(snapshot.getMedian());\r\n    values[`p75`] = this.getNumber(snapshot.get75thPercentile());\r\n    values[`p95`] = this.getNumber(snapshot.get95thPercentile());\r\n    values[`p98`] = this.getNumber(snapshot.get98thPercentile());\r\n    values[`p99`] = this.getNumber(snapshot.get99thPercentile());\r\n    values[`p999`] = this.getNumber(snapshot.get999thPercentile());\r\n    values[`stddev`] = this.getNumber(snapshot.getStdDev());\r\n\r\n    return values;\r\n  }\r\n\r\n  /**\r\n   * Gets the values for the specified {Meter} metric.\r\n   *\r\n   * @static\r\n   * @param {Meter} meter\r\n   * @returns {{}}\r\n   * @memberof AmqpMetricReporter\r\n   */\r\n  public static getMeterValues(meter: Meter): {} {\r\n    const value = meter.getCount();\r\n    if (!value || isNaN(value)) {\r\n      return null;\r\n    }\r\n    const values: any = {};\r\n\r\n    values[`count`] = value;\r\n    values[`m15_rate`] = this.getNumber(meter.get15MinuteRate());\r\n    values[`m1_rate`] = this.getNumber(meter.get1MinuteRate());\r\n    values[`m5_rate`] = this.getNumber(meter.get5MinuteRate());\r\n    values[`mean_rate`] = this.getNumber(meter.getMeanRate());\r\n\r\n    return values;\r\n  }\r\n\r\n  /**\r\n   * Gets the values for the specified {Timer} metric.\r\n   *\r\n   * @static\r\n   * @param {Timer} timer\r\n   * @returns {{}}\r\n   * @memberof AmqpMetricReporter\r\n   */\r\n  public static getTimerValues(timer: Timer): {} {\r\n    const value = timer.getCount();\r\n    if (!value || isNaN(value)) {\r\n      return null;\r\n    }\r\n    const snapshot = timer.getSnapshot();\r\n    const values: any = {};\r\n\r\n    values[`count`] = value;\r\n    values[`m15_rate`] = this.getNumber(timer.get15MinuteRate());\r\n    values[`m1_rate`] = this.getNumber(timer.get1MinuteRate());\r\n    values[`m5_rate`] = this.getNumber(timer.get5MinuteRate());\r\n    values[`max`] = this.getNumber(snapshot.getMax());\r\n    values[`mean`] = this.getNumber(snapshot.getMean());\r\n    values[`mean_rate`] = this.getNumber(timer.getMeanRate());\r\n    values[`min`] = this.getNumber(snapshot.getMin());\r\n    values[`p50`] = this.getNumber(snapshot.getMedian());\r\n    values[`p75`] = this.getNumber(snapshot.get75thPercentile());\r\n    values[`p95`] = this.getNumber(snapshot.get95thPercentile());\r\n    values[`p98`] = this.getNumber(snapshot.get98thPercentile());\r\n    values[`p99`] = this.getNumber(snapshot.get99thPercentile());\r\n    values[`p999`] = this.getNumber(snapshot.get999thPercentile());\r\n    values[`stddev`] = this.getNumber(snapshot.getStdDev());\r\n\r\n    return values;\r\n  }\r\n\r\n  /**\r\n   * Either gets 0 or the specifed value.\r\n   *\r\n   * @private\r\n   * @param {number} value\r\n   * @returns {number}\r\n   * @memberof AmqpMetricReporter\r\n   */\r\n  private static getNumber(value: number): number {\r\n    if (isNaN(value)) {\r\n      return 0;\r\n    }\r\n    return value;\r\n  }\r\n\r\n  /**\r\n   * Amqp exchange used to do reporting.\r\n   *\r\n   * @private\r\n   * @type {Amqp.Exchange}\r\n   * @memberof AmqpMetricReporter\r\n   */\r\n  private exchange: Amqp.Exchange;\r\n\r\n  /**\r\n   * Creates an instance of AmqpMetricReporter.\r\n   */\r\n  public constructor(\r\n    {\r\n      connection,\r\n      exchangeName,\r\n      queueName,\r\n      log = console,\r\n      reportInterval = 1000,\r\n      unit = MILLISECOND,\r\n      clock = new StdClock(),\r\n      scheduler = setInterval,\r\n      minReportingTimeout = 1,\r\n      tags = new Map(),\r\n    }: {\r\n      /**\r\n       * Amqp connection URI.\r\n       * @type {string}\r\n       */\r\n      connection: string,\r\n      /**\r\n       * Amqp exchange name.\r\n       * @type {string}\r\n       */\r\n      exchangeName: string,\r\n      /**\r\n       * Amqp queue name.\r\n       * @type {string}\r\n       */\r\n      queueName: string,\r\n      /**\r\n       * The logger instance used to report metrics.\r\n       * @type {Logger}\r\n       */\r\n      log?: Logger,\r\n      /**\r\n       * Reporting interval in the time-unit of {@link #unit}.\r\n       * @type {number}\r\n       */\r\n      reportInterval?: number;\r\n      /**\r\n       * The time-unit of the reporting interval.\r\n       * @type {TimeUnit}\r\n       */\r\n      unit?: TimeUnit;\r\n      /**\r\n       * The clock instance used determine the current time.\r\n       * @type {Clock}\r\n       */\r\n      clock?: Clock;\r\n      /**\r\n       * The scheduler function used to trigger reporting.\r\n       * @type {Scheduler}\r\n       */\r\n      scheduler?: Scheduler;\r\n      /**\r\n       * The timeout in which a metrics gets reported wether it's value has changed or not.\r\n       * @type {number}\r\n       */\r\n      minReportingTimeout?: number;\r\n      /**\r\n       * Common tags for this reporter instance.\r\n       * @type {Map}\r\n       */\r\n      tags?: Map;\r\n    }) {\r\n    super({\r\n      clock,\r\n      connection,\r\n      exchangeName,\r\n      log,\r\n      minReportingTimeout,\r\n      queueName,\r\n      reportInterval,\r\n      scheduler,\r\n      tags,\r\n      unit,\r\n    });\r\n\r\n    const amqpConnection = new Amqp.Connection(connection);\r\n    const queue = amqpConnection.declareQueue(queueName);\r\n    const exchange = amqpConnection.declareExchange(exchangeName);\r\n\r\n    queue.bind(exchange);\r\n\r\n    this.exchange = exchange;\r\n  }\r\n\r\n  /**\r\n   * Gets the logger instance.\r\n   *\r\n   * @returns {Logger}\r\n   * @memberof AmqpMetricReporter\r\n   */\r\n  public getLog(): Logger {\r\n    return this.options.log;\r\n  }\r\n\r\n  /**\r\n   * Sets the logger instance.\r\n   *\r\n   * @param {Logger} log\r\n   * @memberof AmqpMetricReporter\r\n   */\r\n  public setLog(log: Logger): void {\r\n    this.options.log = log;\r\n  }\r\n\r\n  /**\r\n   * Reports an {@link Event}.\r\n   *\r\n   * @param {Event} event\r\n   * @returns {Promise}\r\n   * @memberof AmqpMetricReporter\r\n   */\r\n  public async reportEvent>(event: TEvent): Promise {\r\n    const result = this.reportGauge(event, {\r\n      date: event.getTime(),\r\n      metrics: [],\r\n      overallCtx: null,\r\n      registry: null,\r\n      type: \"gauge\",\r\n    });\r\n\r\n    if (result) {\r\n      await this.handleResults(null, null, event.getTime(), \"gauge\", [{\r\n        metric: event,\r\n        result,\r\n      }]);\r\n    }\r\n\r\n    return event;\r\n  }\r\n\r\n  /**\r\n   * Does nothing\r\n   *\r\n   * @returns {Promise}\r\n   * @memberof AmqpMetricReporter\r\n   */\r\n  public async flushEvents(): Promise {\r\n  }\r\n\r\n  /**\r\n   * Send the combinations of index and document to the elasticsearch cluster\r\n   * using the bulk method of the elasticsearch client.\r\n   *\r\n   * @protected\r\n   * @param {MetricRegistry} registry\r\n   * @param {Date} date\r\n   * @param {MetricType} type\r\n   * @param {Array>} results\r\n   * @returns {Promise}\r\n   * @memberof AmqpMetricReporter\r\n   */\r\n  protected handleResults(\r\n    ctx: OverallReportContext,\r\n    registry: MetricRegistry,\r\n    date: Date,\r\n    type: MetricType,\r\n    results: Array>): Promise {\r\n    const message = new Amqp.Message(JSON.stringify(results));\r\n\r\n    this.exchange.send(message);\r\n\r\n    return Promise.resolve();\r\n  }\r\n\r\n  /**\r\n   * Generalized reporting method of all types of metric instances.\r\n   * Builds the index configuration document and the metric document.\r\n   *\r\n   * @protected\r\n   * @param {Metric} metric\r\n   * @param {ReportingContext} ctx\r\n   * @returns {{}}\r\n   * @memberof AmqpMetricReporter\r\n   */\r\n  protected reportMetric(metric: Metric, ctx: MetricSetReportContext): {} {\r\n    let values = null;\r\n    if (metric instanceof MonotoneCounter) {\r\n      values = AmqpMetricReporter.getMonotoneCounterValues(metric);\r\n    } else if (metric instanceof Counter) {\r\n      values = AmqpMetricReporter.getCounterValues(metric);\r\n    } else if (metric instanceof Histogram) {\r\n      values = AmqpMetricReporter.getHistogramValues(metric);\r\n    } else if (metric instanceof Meter) {\r\n      values = AmqpMetricReporter.getMeterValues(metric);\r\n    } else if (metric instanceof Timer) {\r\n      values = AmqpMetricReporter.getTimerValues(metric);\r\n    } else {\r\n      values = AmqpMetricReporter.getGaugeValue(metric as Gauge);\r\n    }\r\n\r\n    const name = metric.getName();\r\n    const group = metric.getGroup();\r\n    const tags = this.buildTags(ctx.registry, metric);\r\n    const timestamp = ctx.date;\r\n    const type = ctx.type;\r\n\r\n    return { name, group, tags, timestamp, values, type };\r\n  }\r\n\r\n  /**\r\n   * Calls {@link #reportMetric} with the specified arguments.\r\n   *\r\n   * @protected\r\n   * @param {(MonotoneCounter | Counter)} counter\r\n   * @param {(ReportingContext)} ctx\r\n   * @returns {{}}\r\n   * @memberof AmqpMetricReporter\r\n   */\r\n  protected reportCounter(\r\n    counter: MonotoneCounter | Counter, ctx: MetricSetReportContext): {} {\r\n    return this.reportMetric(counter, ctx);\r\n  }\r\n\r\n  /**\r\n   * Calls {@link #reportMetric} with the specified arguments.\r\n   *\r\n   * @protected\r\n   * @param {Gauge} gauge\r\n   * @param {ReportingContext>} ctx\r\n   * @returns {{}}\r\n   * @memberof AmqpMetricReporter\r\n   */\r\n  protected reportGauge(gauge: Gauge, ctx: MetricSetReportContext>): {} {\r\n    return this.reportMetric(gauge, ctx);\r\n  }\r\n\r\n  /**\r\n   * Calls {@link #reportMetric} with the specified arguments.\r\n   *\r\n   * @protected\r\n   * @param {Histogram} histogram\r\n   * @param {ReportingContext} ctx\r\n   * @returns {{}}\r\n   * @memberof AmqpMetricReporter\r\n   */\r\n  protected reportHistogram(histogram: Histogram, ctx: MetricSetReportContext): {} {\r\n    return this.reportMetric(histogram, ctx);\r\n  }\r\n\r\n  /**\r\n   * Calls {@link #reportMetric} with the specified arguments.\r\n   *\r\n   * @protected\r\n   * @param {Meter} meter\r\n   * @param {ReportingContext} ctx\r\n   * @returns {{}}\r\n   * @memberof AmqpMetricReporter\r\n   */\r\n  protected reportMeter(meter: Meter, ctx: MetricSetReportContext): {} {\r\n    return this.reportMetric(meter, ctx);\r\n  }\r\n\r\n  /**\r\n   * Calls {@link #reportMetric} with the specified arguments.\r\n   *\r\n   * @protected\r\n   * @param {Timer} timer\r\n   * @param {ReportingContext} ctx\r\n   * @returns {{}}\r\n   * @memberof AmqpMetricReporter\r\n   */\r\n  protected reportTimer(timer: Timer, ctx: MetricSetReportContext): {} {\r\n    return this.reportMetric(timer, ctx);\r\n  }\r\n}\r\n\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"/miscellaneous.html":{"url":"/miscellaneous.html","title":"miscellaneous - miscellaneous","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n\n\n    \n        Variables\n            \n                \n                    \n                        \n                             reporter\n                        \n                    \n                    \n                        \n                            reporter:     any\n    \n                        \n                    \n                \n            \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"/coverage.html":{"url":"/coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Documentation coverage \n\n\n\n    Project\n    100%\n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                lib/metrics/AmqpMetricReporter.ts\n            \n            \n                classe\n            \n            \n                AmqpMetricReporter\n            \n            \n                100 %\n                (19/19)\n            \n        \n    \n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
