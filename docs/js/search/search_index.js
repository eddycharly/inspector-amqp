var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"0.7.2","fields":[{"name":"title","boost":10},{"name":"body","boost":1}],"ref":"url","tokenizer":"default","documentStore":{"store":{"/index.html":["index","inspector","match","rabbitmq","readm","result"],"/overview.html":["1","class","match","overview","result"],"/modules.html":["match","modul","result"],"/classes/RabbitMqMetricReporter.html":["0","1","1000","amqp","amqp.connection(\"amqp://localhost","amqp.connection(connect","amqp.exchang","amqp.message(json.stringify(result","amqpconnect","amqpconnection.declareexchange(exchangenam","amqpconnection.declarequeue(queuenam","argument","array","async","await","build","bulk","call","chang","class","client","clock","cluster","clusterus","combin","comment","common","configur","connect","connection.declareexchange(\"exchangenam","connection.declarequeue(\"queuenam","consol","console.log(\"messag","const","constructor","constructor(undefin","count","counter","counter.getcount","creat","ctx","ctx.date","ctx.type","current","date","determin","document","elasticsearch","error","event","event.gettim","exchang","exchangenam","export","extend","file","flushev","function","gaug","gauge.getvalu","gener","get","getcountervalu","getcountervalues(count","getgaugevalu","getgaugevalue(gaug","gethistogramvalu","gethistogramvalues(histogram","getlog","getmetervalu","getmetervalues(met","getmonotonecountervalu","getmonotonecountervalues(count","getnumb","getnumber(valu","gettimervalu","gettimervalues(tim","group","handleresult","handleresults(ctx","histogram","histogram.getcount","histogram.getsnapshot","import","index","info","inspector","instanc","instanceof","instances.build","interfac","interv","isnan(count","isnan(valu","it'","lib/metrics/rabbitmqmetricreporter.t","link","log","logger","logmetadata","map","match","memberof","messag","message.getcont","metadata","meter","meter.getcount","method","metric","metric.getgroup","metric.getnam","metricregistri","metricsetreportcontext","metrictyp","millisecond","minreportingtimeout","monoton","monotonecount","name","new","noth","null","num","number","number.isnan(valu","object","overallctx","overallreportcontext","param","paramet","privat","promis","promise.resolv","properti","protect","public","queue","queue.activateconsumer((messag","queue.bind(exchang","queue.bind(this.exchang","queuenam","rabbitmq","rabbitmqmetricreport","rabbitmqmetricreporter.getcountervalues(metr","rabbitmqmetricreporter.getgaugevalue(metr","rabbitmqmetricreporter.gethistogramvalues(metr","rabbitmqmetricreporter.getmetervalues(metr","rabbitmqmetricreporter.getmonotonecountervalues(metr","rabbitmqmetricreporter.gettimervalues(metr","rabbitmqmetricreporteropt","receiv","registri","report","reportcount","reportcounter(count","reportev","reportevent(ev","reportevent>(ev","reportgaug","reportgauge(gaug","reporthistogram","reporthistogram(histogram","reportingcontext","reportingresult","reportinterv","reportmet","reportmeter(met","reportmetr","reportmetric(metr","reporttim","reporttimer(tim","result","return","schedul","scheduledmetricreport","scheduledmetricreporteropt","send","set","setinterv","setlog","setlog(log","snapshot","sourc","specif","specifi","static","stdclock","string","super","support/regist","tag","tevent","this.buildtags(ctx.registri","this.exchang","this.exchange.send(messag","this.getnumber(meter.get15minuter","this.getnumber(meter.get1minuter","this.getnumber(meter.get5minuter","this.getnumber(meter.getmeanr","this.getnumber(snapshot.get75thpercentil","this.getnumber(snapshot.get95thpercentil","this.getnumber(snapshot.get98thpercentil","this.getnumber(snapshot.get999thpercentil","this.getnumber(snapshot.get99thpercentil","this.getnumber(snapshot.getmax","this.getnumber(snapshot.getmean","this.getnumber(snapshot.getmedian","this.getnumber(snapshot.getmin","this.getnumber(snapshot.getstddev","this.getnumber(timer.get15minuter","this.getnumber(timer.get1minuter","this.getnumber(timer.get5minuter","this.getnumber(timer.getmeanr","this.handleresults(nul","this.logmetadata","this.options.log","this.reportgauge(ev","this.reportmetric(count","this.reportmetric(gaug","this.reportmetric(histogram","this.reportmetric(met","this.reportmetric(tim","time","timeout","timer","timer.getcount","timer.getsnapshot","timestamp","timeunit","trigger","ts","type","typeof","unit","uri","us","valu","values[`count","values[`m15_r","values[`m1_r","values[`m5_r","values[`max","values[`mean","values[`mean_r","values[`min","values[`p50","values[`p75","values[`p95","values[`p98","values[`p99","values[`p999","values[`stddev","void","wether"],"/miscellaneous.html":["connect","exchang","match","miscellan","queue","result","variabl"],"/coverage.html":["100","20/20","class","coverag","document","file","identifi","lib/metrics/rabbitmqmetricreporter.t","match","project","rabbitmqmetricreport","result","statement","type"]},"length":6},"tokenStore":{"root":{"0":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0036003600360036}}},"1":{"0":{"0":{"0":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0009000900090009}}},"docs":{"/coverage.html":{"ref":"/coverage.html","tf":0.11764705882352941}}},"docs":{}},"docs":{"/overview.html":{"ref":"/overview.html","tf":0.14285714285714285},"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0009000900090009}}},"2":{"0":{"docs":{},"/":{"2":{"0":{"docs":{"/coverage.html":{"ref":"/coverage.html","tf":0.058823529411764705}}},"docs":{}},"docs":{}}},"docs":{}},"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{"/index.html":{"ref":"/index.html","tf":5},"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0036003600360036}}}}},"s":{"docs":{},"p":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"/index.html":{"ref":"/index.html","tf":0.16666666666666666},"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0009000900090009}}}}}}}},"t":{"docs":{},"a":{"docs":{},"n":{"docs":{},"c":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.009900990099009901}},"e":{"docs":{},"o":{"docs":{},"f":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.004500450045004501}}}},"s":{"docs":{},".":{"docs":{},"b":{"docs":{},"u":{"docs":{},"i":{"docs":{},"l":{"docs":{},"d":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0009000900090009}}}}}}}}}}}}}}},"f":{"docs":{},"o":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0009000900090009}}}},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"f":{"docs":{},"a":{"docs":{},"c":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0009000900090009}}}}},"v":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0018001800180018}}}}}}},"m":{"docs":{},"p":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0027002700270027003}}}}}}},"s":{"docs":{},"n":{"docs":{},"a":{"docs":{},"n":{"docs":{},"(":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0018001800180018}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0036003600360036}}}}}}}}}}},"t":{"docs":{},"'":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0009000900090009}}}},"d":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"i":{"docs":{},"f":{"docs":{},"i":{"docs":{"/coverage.html":{"ref":"/coverage.html","tf":0.058823529411764705}}}}}}}}}},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"c":{"docs":{},"h":{"docs":{"/index.html":{"ref":"/index.html","tf":0.3333333333333333},"/overview.html":{"ref":"/overview.html","tf":0.2857142857142857},"/modules.html":{"ref":"/modules.html","tf":0.4},"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0018001800180018},"/miscellaneous.html":{"ref":"/miscellaneous.html","tf":0.16666666666666666},"/coverage.html":{"ref":"/coverage.html","tf":0.11764705882352941}}}}},"p":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0036003600360036}}}},"o":{"docs":{},"d":{"docs":{},"u":{"docs":{},"l":{"docs":{"/modules.html":{"ref":"/modules.html","tf":10.2}}}}},"n":{"docs":{},"o":{"docs":{},"t":{"docs":{},"o":{"docs":{},"n":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0018001800180018}},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.008100810081008101}}}}}}}}}}}}}},"e":{"docs":{},"m":{"docs":{},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{},"o":{"docs":{},"f":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.018901890189018902}}}}}}}},"s":{"docs":{},"s":{"docs":{},"a":{"docs":{},"g":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0009000900090009}},"e":{"docs":{},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"t":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0009000900090009}}}}}}}}}}}}}}},"t":{"docs":{},"a":{"docs":{},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{},"a":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0018001800180018}}}}}}},"e":{"docs":{},"r":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0144014401440144}},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0009000900090009}}}}}}}}}}}}},"h":{"docs":{},"o":{"docs":{},"d":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.004500450045004501}}}}},"r":{"docs":{},"i":{"docs":{},"c":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0306030603060306}},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"g":{"docs":{},"r":{"docs":{},"o":{"docs":{},"u":{"docs":{},"p":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0009000900090009}}}}}}},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0009000900090009}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.004500450045004501}}}}}}}}}},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},"r":{"docs":{},"e":{"docs":{},"p":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.011701170117011701}}}}}}}}}}}}}}}}}},"t":{"docs":{},"y":{"docs":{},"p":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.004500450045004501}}}}}}}}}},"i":{"docs":{},"l":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0018001800180018}}}}}}}}}}},"n":{"docs":{},"r":{"docs":{},"e":{"docs":{},"p":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{},"e":{"docs":{},"o":{"docs":{},"u":{"docs":{},"t":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0027002700270027003}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"c":{"docs":{},"e":{"docs":{},"l":{"docs":{},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{"/miscellaneous.html":{"ref":"/miscellaneous.html","tf":10.083333333333334}}}}}}}}}}},"r":{"docs":{},"a":{"docs":{},"b":{"docs":{},"b":{"docs":{},"i":{"docs":{},"t":{"docs":{},"m":{"docs":{},"q":{"docs":{"/index.html":{"ref":"/index.html","tf":0.16666666666666666},"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.004500450045004501}},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"c":{"docs":{},"r":{"docs":{},"e":{"docs":{},"p":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":5.0216021602160215},"/coverage.html":{"ref":"/coverage.html","tf":0.058823529411764705}},"e":{"docs":{},"r":{"docs":{},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{},"r":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0009000900090009}}}}}}}}}}}}}}}}}}}},"g":{"docs":{},"a":{"docs":{},"u":{"docs":{},"g":{"docs":{},"e":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{},"(":{"docs":{},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{},"r":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0009000900090009}}}}}}}}}}}}}}}}},"h":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"m":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{},"r":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0009000900090009}}}}}}}}}}}}}}}}}}}}}},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{},"r":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0009000900090009}}}}}}}}}}}}}}}}},"o":{"docs":{},"n":{"docs":{},"o":{"docs":{},"t":{"docs":{},"o":{"docs":{},"n":{"docs":{},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{},"r":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0009000900090009}}}}}}}}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{},"r":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0009000900090009}}}}}}}}}}}}}}}}}}}}}},"o":{"docs":{},"p":{"docs":{},"t":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0018001800180018}}}}}}}}}}}}}}}}}}}}}}}}}},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{},"m":{"docs":{"/index.html":{"ref":"/index.html","tf":5}}}}},"s":{"docs":{},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{"/index.html":{"ref":"/index.html","tf":0.3333333333333333},"/overview.html":{"ref":"/overview.html","tf":0.2857142857142857},"/modules.html":{"ref":"/modules.html","tf":0.4},"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.008100810081008101},"/miscellaneous.html":{"ref":"/miscellaneous.html","tf":0.16666666666666666},"/coverage.html":{"ref":"/coverage.html","tf":0.11764705882352941}}}}}},"c":{"docs":{},"e":{"docs":{},"i":{"docs":{},"v":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0009000900090009}}}}}},"g":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.004500450045004501}}}}}}}},"p":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.011701170117011701}},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0018001800180018}},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0009000900090009}}}}}}}}}}}}}}},"e":{"docs":{},"v":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0009000900090009}},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},"e":{"docs":{},"v":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0009000900090009}}}}},">":{"docs":{},"(":{"docs":{},"e":{"docs":{},"v":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0009000900090009}}}}}}}}}}},"g":{"docs":{},"a":{"docs":{},"u":{"docs":{},"g":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0009000900090009}},"e":{"docs":{},"(":{"docs":{},"g":{"docs":{},"a":{"docs":{},"u":{"docs":{},"g":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0018001800180018}}}}}}}}}}}},"h":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"m":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0009000900090009}},"(":{"docs":{},"h":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"m":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0018001800180018}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.009900990099009901}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0018001800180018}}}}}}}}},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.004500450045004501}}}}}}}},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0009000900090009}},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0018001800180018}}}}}}}},"r":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.009900990099009901}},"i":{"docs":{},"c":{"docs":{},"(":{"docs":{},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{},"r":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0018001800180018}}}}}}}}}}}}},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0009000900090009}},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0018001800180018}}}}}}}}}}}}}}},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{},"n":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.05310531053105311}}}}}}}},"c":{"docs":{},"l":{"docs":{},"a":{"docs":{},"s":{"docs":{},"s":{"docs":{"/overview.html":{"ref":"/overview.html","tf":0.14285714285714285},"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":5.001800180018002},"/coverage.html":{"ref":"/coverage.html","tf":0.058823529411764705}}}}},"i":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0018001800180018}}}}}},"o":{"docs":{},"c":{"docs":{},"k":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0063006300630063005}}}}},"u":{"docs":{},"s":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0009000900090009}},"u":{"docs":{},"s":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0009000900090009}}}}}}}}}},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.009000900090009001}}}}},"h":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0009000900090009}}}}}},"o":{"docs":{},"m":{"docs":{},"b":{"docs":{},"i":{"docs":{},"n":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0018001800180018}}}}},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0009000900090009}}}}},"o":{"docs":{},"n":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0009000900090009}}}}}},"n":{"docs":{},"f":{"docs":{},"i":{"docs":{},"g":{"docs":{},"u":{"docs":{},"r":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0018001800180018}}}}}}},"n":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0063006300630063005},"/miscellaneous.html":{"ref":"/miscellaneous.html","tf":0.16666666666666666}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{},"d":{"docs":{},"e":{"docs":{},"c":{"docs":{},"l":{"docs":{},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"x":{"docs":{},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},"(":{"docs":{},"\"":{"docs":{},"e":{"docs":{},"x":{"docs":{},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0009000900090009}}}}}}}}}}}}}}}}}}}}}}},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"u":{"docs":{},"e":{"docs":{},"(":{"docs":{},"\"":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"u":{"docs":{},"e":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0009000900090009}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"o":{"docs":{},"l":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0009000900090009}},"e":{"docs":{},".":{"docs":{},"l":{"docs":{},"o":{"docs":{},"g":{"docs":{},"(":{"docs":{},"\"":{"docs":{},"m":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"a":{"docs":{},"g":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0009000900090009}}}}}}}}}}}}}}}}},"t":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.020702070207020702}},"r":{"docs":{},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0018001800180018}},"(":{"docs":{},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"f":{"docs":{},"i":{"docs":{},"n":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0009000900090009}}}}}}}}}}}}}}}}}}},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0054005400540054005}},"e":{"docs":{},"r":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.018001800180018002}},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0018001800180018}}}}}}}}}}}}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"a":{"docs":{},"g":{"docs":{"/coverage.html":{"ref":"/coverage.html","tf":10.058823529411764}}}}}}}},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"t":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0018001800180018}}}}}},"t":{"docs":{},"x":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.027002700270027002}},".":{"docs":{},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0009000900090009}}}}}},"t":{"docs":{},"y":{"docs":{},"p":{"docs":{},"e":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0009000900090009}}}}}}}}},"u":{"docs":{},"r":{"docs":{},"r":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0009000900090009}}}}}}}}},"o":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{},"i":{"docs":{},"e":{"docs":{},"w":{"docs":{"/overview.html":{"ref":"/overview.html","tf":10.142857142857142}}}}}},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"c":{"docs":{},"t":{"docs":{},"x":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0009000900090009}}}}},"r":{"docs":{},"e":{"docs":{},"p":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"x":{"docs":{},"t":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0027002700270027003}}}}}}}}}}}}}}}}}}}}},"b":{"docs":{},"j":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0009000900090009}}}}}}}},"a":{"docs":{},"m":{"docs":{},"q":{"docs":{},"p":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0018001800180018}},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"n":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},"\"":{"docs":{},"a":{"docs":{},"m":{"docs":{},"q":{"docs":{},"p":{"docs":{},":":{"docs":{},"/":{"docs":{},"/":{"docs":{},"l":{"docs":{},"o":{"docs":{},"c":{"docs":{},"a":{"docs":{},"l":{"docs":{},"h":{"docs":{},"o":{"docs":{},"s":{"docs":{},"t":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0009000900090009}}}}}}}}}}}}}}}}}}},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"n":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0009000900090009}}}}}}}}}}}}}}}}}}}},"e":{"docs":{},"x":{"docs":{},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0018001800180018}}}}}}}}},"m":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"a":{"docs":{},"g":{"docs":{},"e":{"docs":{},"(":{"docs":{},"j":{"docs":{},"s":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{},"i":{"docs":{},"f":{"docs":{},"y":{"docs":{},"(":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0009000900090009}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"n":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0009000900090009}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{},"d":{"docs":{},"e":{"docs":{},"c":{"docs":{},"l":{"docs":{},"a":{"docs":{},"r":{"docs":{},"e":{"docs":{},"e":{"docs":{},"x":{"docs":{},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},"(":{"docs":{},"e":{"docs":{},"x":{"docs":{},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0009000900090009}}}}}}}}}}}}}}}}}}}}}},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"u":{"docs":{},"e":{"docs":{},"(":{"docs":{},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"u":{"docs":{},"e":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0009000900090009}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"g":{"docs":{},"u":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.009000900090009001}}}}}}}},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0027002700270027003}}}}}},"s":{"docs":{},"y":{"docs":{},"n":{"docs":{},"c":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0018001800180018}}}}}},"w":{"docs":{},"a":{"docs":{},"i":{"docs":{},"t":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0009000900090009}}}}}}},"b":{"docs":{},"u":{"docs":{},"i":{"docs":{},"l":{"docs":{},"d":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0009000900090009}}}}},"l":{"docs":{},"k":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0018001800180018}}}}}},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.008100810081008101}}}}},"e":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0009000900090009}}}}}}}}},"o":{"docs":{},"c":{"docs":{},"u":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0054005400540054005},"/coverage.html":{"ref":"/coverage.html","tf":0.058823529411764705}}}}}}}}}},"e":{"docs":{},"l":{"docs":{},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{},"i":{"docs":{},"c":{"docs":{},"s":{"docs":{},"e":{"docs":{},"a":{"docs":{},"r":{"docs":{},"c":{"docs":{},"h":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0036003600360036}}}}}}}}}}}}}},"r":{"docs":{},"r":{"docs":{},"o":{"docs":{},"r":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0009000900090009}}}}}},"v":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.008100810081008101}},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0018001800180018}}}}}}}}}}}}},"x":{"docs":{},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0072007200720072},"/miscellaneous.html":{"ref":"/miscellaneous.html","tf":0.16666666666666666}},"e":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.004500450045004501}}}}}}}}}}},"p":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0018001800180018}}}}}},"t":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0018001800180018}}}}}}}},"f":{"docs":{},"i":{"docs":{},"l":{"docs":{},"e":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0009000900090009},"/coverage.html":{"ref":"/coverage.html","tf":0.058823529411764705}}}}},"l":{"docs":{},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"e":{"docs":{},"v":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0027002700270027003}}}}}}}},"u":{"docs":{},"n":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0009000900090009}}}}}}}}}},"g":{"docs":{},"a":{"docs":{},"u":{"docs":{},"g":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.016201620162016202}},"e":{"docs":{},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0009000900090009}}}}}}}}}}}}}},"e":{"docs":{},"n":{"docs":{},"e":{"docs":{},"r":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0018001800180018}}}}},"t":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0153015301530153}},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0009000900090009}},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0018001800180018}}}}}}}}}}}}}}}}}}}}},"g":{"docs":{},"a":{"docs":{},"u":{"docs":{},"g":{"docs":{},"e":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0009000900090009}},"e":{"docs":{},"(":{"docs":{},"g":{"docs":{},"a":{"docs":{},"u":{"docs":{},"g":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0018001800180018}}}}}}}}}}}}}}}}},"h":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"m":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0009000900090009}},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"h":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"m":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0018001800180018}}}}}}}}}}}}}}}}}}}}}}}}}}},"l":{"docs":{},"o":{"docs":{},"g":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0027002700270027003}}}}},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0009000900090009}},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0018001800180018}}}}}}}}}}}}}}}},"o":{"docs":{},"n":{"docs":{},"o":{"docs":{},"t":{"docs":{},"o":{"docs":{},"n":{"docs":{},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0009000900090009}},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0018001800180018}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0009000900090009}},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0018001800180018}}}}}}}}}}}}},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0009000900090009}},"e":{"docs":{},"s":{"docs":{},"(":{"docs":{},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0018001800180018}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"o":{"docs":{},"u":{"docs":{},"p":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0018001800180018}}}}}}},"h":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"l":{"docs":{},"e":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0018001800180018}},"s":{"docs":{},"(":{"docs":{},"c":{"docs":{},"t":{"docs":{},"x":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0009000900090009}}}}}}}}}}}}}}}}}},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"m":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0144014401440144}},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0009000900090009}}}}}}},"s":{"docs":{},"n":{"docs":{},"a":{"docs":{},"p":{"docs":{},"s":{"docs":{},"h":{"docs":{},"o":{"docs":{},"t":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0009000900090009}}}}}}}}}}}}}}}}}}}}}}},"l":{"docs":{},"i":{"docs":{},"b":{"docs":{},"/":{"docs":{},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"c":{"docs":{},"s":{"docs":{},"/":{"docs":{},"r":{"docs":{},"a":{"docs":{},"b":{"docs":{},"b":{"docs":{},"i":{"docs":{},"t":{"docs":{},"m":{"docs":{},"q":{"docs":{},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"c":{"docs":{},"r":{"docs":{},"e":{"docs":{},"p":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},".":{"docs":{},"t":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0009000900090009},"/coverage.html":{"ref":"/coverage.html","tf":0.058823529411764705}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"n":{"docs":{},"k":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.011701170117011701}}}}},"o":{"docs":{},"g":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0072007200720072}},"g":{"docs":{},"e":{"docs":{},"r":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.018901890189018902}}}}},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{},"a":{"docs":{},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{},"a":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0027002700270027003}}}}}}}}}}}}},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0036003600360036}}}}},"e":{"docs":{},"w":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.004500450045004501}}}},"o":{"docs":{},"t":{"docs":{},"h":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0018001800180018}}}}},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.009000900090009001}}}},"m":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0009000900090009}},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.009000900090009001}},".":{"docs":{},"i":{"docs":{},"s":{"docs":{},"n":{"docs":{},"a":{"docs":{},"n":{"docs":{},"(":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0009000900090009}}}}}}}}}}}}}}}}}}},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"a":{"docs":{},"m":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.022502250225022502}},"e":{"docs":{},"t":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0144014401440144}}}}}}}},"r":{"docs":{},"i":{"docs":{},"v":{"docs":{},"a":{"docs":{},"t":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.008100810081008101}}}}}},"o":{"docs":{},"m":{"docs":{},"i":{"docs":{},"s":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0054005400540054005}},"e":{"docs":{},".":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"o":{"docs":{},"l":{"docs":{},"v":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0009000900090009}}}}}}}}}}}}},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"i":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0009000900090009}}}}}}},"t":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.018901890189018902}}}}}},"j":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"/coverage.html":{"ref":"/coverage.html","tf":0.058823529411764705}}}}}}}},"u":{"docs":{},"b":{"docs":{},"l":{"docs":{},"i":{"docs":{},"c":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.018901890189018902}}}}}}}},"q":{"docs":{},"u":{"docs":{},"e":{"docs":{},"u":{"docs":{},"e":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0027002700270027003},"/miscellaneous.html":{"ref":"/miscellaneous.html","tf":0.16666666666666666}},".":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"v":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"u":{"docs":{},"m":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"(":{"docs":{},"m":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"a":{"docs":{},"g":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0009000900090009}}}}}}}}}}}}}}}}}}}}}}}}}},"b":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"e":{"docs":{},"x":{"docs":{},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0009000900090009}}}}}}}}},"t":{"docs":{},"h":{"docs":{},"i":{"docs":{},"s":{"docs":{},".":{"docs":{},"e":{"docs":{},"x":{"docs":{},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0009000900090009}}}}}}}}}}}}}}}}}}}},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.004500450045004501}}}}}}}}}},"s":{"docs":{},"c":{"docs":{},"h":{"docs":{},"e":{"docs":{},"d":{"docs":{},"u":{"docs":{},"l":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0063006300630063005}},"e":{"docs":{},"d":{"docs":{},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"c":{"docs":{},"r":{"docs":{},"e":{"docs":{},"p":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0018001800180018}},"e":{"docs":{},"r":{"docs":{},"o":{"docs":{},"p":{"docs":{},"t":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0018001800180018}}}}}}}}}}}}}}}}}}}}}}}}}}},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0018001800180018}}}},"t":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0018001800180018}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0009000900090009}}}}}}}},"l":{"docs":{},"o":{"docs":{},"g":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0009000900090009}},"(":{"docs":{},"l":{"docs":{},"o":{"docs":{},"g":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0018001800180018}}}}}}}}}}},"n":{"docs":{},"a":{"docs":{},"p":{"docs":{},"s":{"docs":{},"h":{"docs":{},"o":{"docs":{},"t":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0018001800180018}}}}}}}}},"o":{"docs":{},"u":{"docs":{},"r":{"docs":{},"c":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0018001800180018}}}}}},"p":{"docs":{},"e":{"docs":{},"c":{"docs":{},"i":{"docs":{},"f":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0018001800180018}},"i":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.019801980198019802}}}}}}}},"t":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"c":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.011701170117011701}}}},"e":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"/coverage.html":{"ref":"/coverage.html","tf":0.058823529411764705}}}}}}}}},"d":{"docs":{},"c":{"docs":{},"l":{"docs":{},"o":{"docs":{},"c":{"docs":{},"k":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0018001800180018}}}}}}}},"r":{"docs":{},"i":{"docs":{},"n":{"docs":{},"g":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.010801080108010801}}}}}}},"u":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0009000900090009}}}},"p":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"/":{"docs":{},"r":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0009000900090009}}}}}}}}}}}}}}}},"t":{"docs":{},"a":{"docs":{},"g":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0072007200720072}}}},"e":{"docs":{},"v":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0018001800180018}}}}}}},"h":{"docs":{},"i":{"docs":{},"s":{"docs":{},".":{"docs":{},"b":{"docs":{},"u":{"docs":{},"i":{"docs":{},"l":{"docs":{},"d":{"docs":{},"t":{"docs":{},"a":{"docs":{},"g":{"docs":{},"s":{"docs":{},"(":{"docs":{},"c":{"docs":{},"t":{"docs":{},"x":{"docs":{},".":{"docs":{},"r":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0009000900090009}}}}}}}}}}}}}}}}}}}}}}}},"e":{"docs":{},"x":{"docs":{},"c":{"docs":{},"h":{"docs":{},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0009000900090009}},"e":{"docs":{},".":{"docs":{},"s":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"(":{"docs":{},"m":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"a":{"docs":{},"g":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0009000900090009}}}}}}}}}}}}}}}}}}}}}},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"1":{"5":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"u":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0009000900090009}}}}}}}}}},"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"u":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0009000900090009}}}}}}}}}},"5":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"u":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0009000900090009}}}}}}}}}},"docs":{},"m":{"docs":{},"e":{"docs":{},"a":{"docs":{},"n":{"docs":{},"r":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0009000900090009}}}}}}}}}}}}}}}},"s":{"docs":{},"n":{"docs":{},"a":{"docs":{},"p":{"docs":{},"s":{"docs":{},"h":{"docs":{},"o":{"docs":{},"t":{"docs":{},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"7":{"5":{"docs":{},"t":{"docs":{},"h":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"c":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"i":{"docs":{},"l":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0018001800180018}}}}}}}}}}}}}},"docs":{}},"9":{"5":{"docs":{},"t":{"docs":{},"h":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"c":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"i":{"docs":{},"l":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0018001800180018}}}}}}}}}}}}}},"8":{"docs":{},"t":{"docs":{},"h":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"c":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"i":{"docs":{},"l":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0018001800180018}}}}}}}}}}}}}},"9":{"9":{"docs":{},"t":{"docs":{},"h":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"c":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"i":{"docs":{},"l":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0018001800180018}}}}}}}}}}}}}},"docs":{},"t":{"docs":{},"h":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"c":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"i":{"docs":{},"l":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0018001800180018}}}}}}}}}}}}}},"docs":{}},"docs":{},"m":{"docs":{},"a":{"docs":{},"x":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0018001800180018}}}},"e":{"docs":{},"a":{"docs":{},"n":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0018001800180018}}}},"d":{"docs":{},"i":{"docs":{},"a":{"docs":{},"n":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0018001800180018}}}}}}},"i":{"docs":{},"n":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0018001800180018}}}}},"s":{"docs":{},"t":{"docs":{},"d":{"docs":{},"d":{"docs":{},"e":{"docs":{},"v":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0018001800180018}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{},"e":{"docs":{},"r":{"docs":{},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"1":{"5":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"u":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0009000900090009}}}}}}}}}},"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"u":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0009000900090009}}}}}}}}}},"5":{"docs":{},"m":{"docs":{},"i":{"docs":{},"n":{"docs":{},"u":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0009000900090009}}}}}}}}}},"docs":{},"m":{"docs":{},"e":{"docs":{},"a":{"docs":{},"n":{"docs":{},"r":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0009000900090009}}}}}}}}}}}}}}}}}}}}}}}}}},"h":{"docs":{},"a":{"docs":{},"n":{"docs":{},"d":{"docs":{},"l":{"docs":{},"e":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{},"s":{"docs":{},"(":{"docs":{},"n":{"docs":{},"u":{"docs":{},"l":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0009000900090009}}}}}}}}}}}}}}}}}}},"l":{"docs":{},"o":{"docs":{},"g":{"docs":{},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{},"a":{"docs":{},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{},"a":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0009000900090009}}}}}}}}}}}}},"o":{"docs":{},"p":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},".":{"docs":{},"l":{"docs":{},"o":{"docs":{},"g":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0018001800180018}}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"p":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"g":{"docs":{},"a":{"docs":{},"u":{"docs":{},"g":{"docs":{},"e":{"docs":{},"(":{"docs":{},"e":{"docs":{},"v":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0009000900090009}}}}}}}}}},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"c":{"docs":{},"(":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0009000900090009}}}}}}},"g":{"docs":{},"a":{"docs":{},"u":{"docs":{},"g":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0009000900090009}}}}}},"h":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"m":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0009000900090009}}}}}}}}}}},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0009000900090009}}}}},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0009000900090009}}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"m":{"docs":{},"e":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0027002700270027003}},"o":{"docs":{},"u":{"docs":{},"t":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0009000900090009}}}}},"r":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0144014401440144}},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0009000900090009}}}}}}},"s":{"docs":{},"n":{"docs":{},"a":{"docs":{},"p":{"docs":{},"s":{"docs":{},"h":{"docs":{},"o":{"docs":{},"t":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0009000900090009}}}}}}}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"m":{"docs":{},"p":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0018001800180018}}}}}}},"u":{"docs":{},"n":{"docs":{},"i":{"docs":{},"t":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0027002700270027003}}}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"g":{"docs":{},"e":{"docs":{},"r":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0009000900090009}}}}}}}},"s":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0009000900090009}}},"y":{"docs":{},"p":{"docs":{},"e":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.019801980198019802},"/coverage.html":{"ref":"/coverage.html","tf":0.058823529411764705}},"o":{"docs":{},"f":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0009000900090009}}}}}}}},"u":{"docs":{},"n":{"docs":{},"i":{"docs":{},"t":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0063006300630063005}}}}},"r":{"docs":{},"i":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0009000900090009}}}},"s":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0063006300630063005}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0423042304230423}},"e":{"docs":{},"s":{"docs":{},"[":{"docs":{},"`":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0027002700270027003}}}}}}},"m":{"1":{"5":{"docs":{},"_":{"docs":{},"r":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0018001800180018}}}}},"docs":{},"_":{"docs":{},"r":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0018001800180018}}}}},"5":{"docs":{},"_":{"docs":{},"r":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0018001800180018}}}}},"docs":{},"a":{"docs":{},"x":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0018001800180018}}}},"e":{"docs":{},"a":{"docs":{},"n":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0018001800180018}},"_":{"docs":{},"r":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0018001800180018}}}}}}},"i":{"docs":{},"n":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0018001800180018}}}}},"p":{"5":{"0":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0018001800180018}}},"docs":{}},"7":{"5":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0018001800180018}}},"docs":{}},"9":{"5":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0018001800180018}}},"8":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0018001800180018}}},"9":{"9":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0018001800180018}}},"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0018001800180018}}},"docs":{}},"docs":{}},"s":{"docs":{},"t":{"docs":{},"d":{"docs":{},"d":{"docs":{},"e":{"docs":{},"v":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0018001800180018}}}}}}}}}}}}}},"r":{"docs":{},"i":{"docs":{},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{"/miscellaneous.html":{"ref":"/miscellaneous.html","tf":0.08333333333333333}}}}}}}},"o":{"docs":{},"i":{"docs":{},"d":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0018001800180018}}}}}},"w":{"docs":{},"e":{"docs":{},"t":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{"/classes/RabbitMqMetricReporter.html":{"ref":"/classes/RabbitMqMetricReporter.html","tf":0.0009000900090009}}}}}}}}},"length":290},"corpusTokens":["0","1","100","1000","20/20","amqp","amqp.connection(\"amqp://localhost","amqp.connection(connect","amqp.exchang","amqp.message(json.stringify(result","amqpconnect","amqpconnection.declareexchange(exchangenam","amqpconnection.declarequeue(queuenam","argument","array","async","await","build","bulk","call","chang","class","client","clock","cluster","clusterus","combin","comment","common","configur","connect","connection.declareexchange(\"exchangenam","connection.declarequeue(\"queuenam","consol","console.log(\"messag","const","constructor","constructor(undefin","count","counter","counter.getcount","coverag","creat","ctx","ctx.date","ctx.type","current","date","determin","document","elasticsearch","error","event","event.gettim","exchang","exchangenam","export","extend","file","flushev","function","gaug","gauge.getvalu","gener","get","getcountervalu","getcountervalues(count","getgaugevalu","getgaugevalue(gaug","gethistogramvalu","gethistogramvalues(histogram","getlog","getmetervalu","getmetervalues(met","getmonotonecountervalu","getmonotonecountervalues(count","getnumb","getnumber(valu","gettimervalu","gettimervalues(tim","group","handleresult","handleresults(ctx","histogram","histogram.getcount","histogram.getsnapshot","identifi","import","index","info","inspector","instanc","instanceof","instances.build","interfac","interv","isnan(count","isnan(valu","it'","lib/metrics/rabbitmqmetricreporter.t","link","log","logger","logmetadata","map","match","memberof","messag","message.getcont","metadata","meter","meter.getcount","method","metric","metric.getgroup","metric.getnam","metricregistri","metricsetreportcontext","metrictyp","millisecond","minreportingtimeout","miscellan","modul","monoton","monotonecount","name","new","noth","null","num","number","number.isnan(valu","object","overallctx","overallreportcontext","overview","param","paramet","privat","project","promis","promise.resolv","properti","protect","public","queue","queue.activateconsumer((messag","queue.bind(exchang","queue.bind(this.exchang","queuenam","rabbitmq","rabbitmqmetricreport","rabbitmqmetricreporter.getcountervalues(metr","rabbitmqmetricreporter.getgaugevalue(metr","rabbitmqmetricreporter.gethistogramvalues(metr","rabbitmqmetricreporter.getmetervalues(metr","rabbitmqmetricreporter.getmonotonecountervalues(metr","rabbitmqmetricreporter.gettimervalues(metr","rabbitmqmetricreporteropt","readm","receiv","registri","report","reportcount","reportcounter(count","reportev","reportevent(ev","reportevent>(ev","reportgaug","reportgauge(gaug","reporthistogram","reporthistogram(histogram","reportingcontext","reportingresult","reportinterv","reportmet","reportmeter(met","reportmetr","reportmetric(metr","reporttim","reporttimer(tim","result","return","schedul","scheduledmetricreport","scheduledmetricreporteropt","send","set","setinterv","setlog","setlog(log","snapshot","sourc","specif","specifi","statement","static","stdclock","string","super","support/regist","tag","tevent","this.buildtags(ctx.registri","this.exchang","this.exchange.send(messag","this.getnumber(meter.get15minuter","this.getnumber(meter.get1minuter","this.getnumber(meter.get5minuter","this.getnumber(meter.getmeanr","this.getnumber(snapshot.get75thpercentil","this.getnumber(snapshot.get95thpercentil","this.getnumber(snapshot.get98thpercentil","this.getnumber(snapshot.get999thpercentil","this.getnumber(snapshot.get99thpercentil","this.getnumber(snapshot.getmax","this.getnumber(snapshot.getmean","this.getnumber(snapshot.getmedian","this.getnumber(snapshot.getmin","this.getnumber(snapshot.getstddev","this.getnumber(timer.get15minuter","this.getnumber(timer.get1minuter","this.getnumber(timer.get5minuter","this.getnumber(timer.getmeanr","this.handleresults(nul","this.logmetadata","this.options.log","this.reportgauge(ev","this.reportmetric(count","this.reportmetric(gaug","this.reportmetric(histogram","this.reportmetric(met","this.reportmetric(tim","time","timeout","timer","timer.getcount","timer.getsnapshot","timestamp","timeunit","trigger","ts","type","typeof","unit","uri","us","valu","values[`count","values[`m15_r","values[`m1_r","values[`m5_r","values[`max","values[`mean","values[`mean_r","values[`min","values[`p50","values[`p75","values[`p95","values[`p98","values[`p99","values[`p999","values[`stddev","variabl","void","wether"],"pipeline":["trimmer","stopWordFilter","stemmer"]},
    "store": {"/index.html":{"url":"/index.html","title":"readme - index","body":"\n                   \ninspector-rabbitmq\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"/overview.html":{"url":"/overview.html","title":"overview - overview","body":"\n                   \nOverview\n\n    \n            \n                \n                    \n                        \n                        1 class\n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"/modules.html":{"url":"/modules.html","title":"modules - modules","body":"\n                   \n\nModules\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"/classes/RabbitMqMetricReporter.html":{"url":"/classes/RabbitMqMetricReporter.html","title":"class - RabbitMqMetricReporter","body":"\n                   \n\n\n\n\n\n\n\n  Classes\n  RabbitMqMetricReporter\n\n\n\n    \n        Infos\n    \n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/RabbitMqMetricReporter.ts\n        \n\n\n            \n                Constructor\n                    \n                        \n                            \n                                \n                                    constructor(undefined: { connection: string; exchangeName: string; queueName: string; log?: Logger; reportInterval?: num...)\n                                \n                            \n            \n                            \n                                \n                                        Creates an instance of RabbitMqMetricReporter.\n            \n                                \n                            \n                        \n                    \n            \n\n            \n                Methods\n                    \n                        \n                            \n                                \n                                    Public getMonotoneCounterValues\n                                \n                            \n            \n                            \n                                \n                                        \n                                            \n                                        \n                                    getMonotoneCounterValues(counter: MonotoneCounter)\n                                \n                            \n            \n                            \n                                \n                                        Gets the values for the specified monotone counter metric.\n            \n                                        \n                                                Parameters :\n                                                \n                                                        \n                                                            \n                                                                counter\n                                                                    :     MonotoneCounter\n            \n                                                            \n                                                            \n                                                                \n                                                            \n                                                        \n                                                \n                                        \n                                        \n                                            Returns:     {}\n            \n                                        \n                                            \n                                                * \n            \n                                            \n                                \n                            \n                        \n                    \n                    \n                        \n                            \n                                \n                                    Public getCounterValues\n                                \n                            \n            \n                            \n                                \n                                        \n                                            \n                                        \n                                    getCounterValues(counter: Counter)\n                                \n                            \n            \n                            \n                                \n                                        Gets the values for the specified counter metric.\n            \n                                        \n                                                Parameters :\n                                                \n                                                        \n                                                            \n                                                                counter\n                                                                    :     Counter\n            \n                                                            \n                                                            \n                                                                \n                                                            \n                                                        \n                                                \n                                        \n                                        \n                                            Returns:     {}\n            \n                                        \n                                            \n                                                * \n            \n                                            \n                                \n                            \n                        \n                    \n                    \n                        \n                            \n                                \n                                    Public getGaugeValue\n                                \n                            \n            \n                            \n                                \n                                        \n                                            \n                                        \n                                    getGaugeValue(gauge: Gauge)\n                                \n                            \n            \n                            \n                                \n                                        Gets the values for the specified {Gauge} metric.\n            \n                                        \n                                                Parameters :\n                                                \n                                                        \n                                                            \n                                                                gauge\n                                                                    :     Gauge\n            \n                                                            \n                                                            \n                                                                \n                                                            \n                                                        \n                                                \n                                        \n                                        \n                                            Returns:     {}\n            \n                                        \n                                            \n                                                * \n            \n                                            \n                                \n                            \n                        \n                    \n                    \n                        \n                            \n                                \n                                    Public getHistogramValues\n                                \n                            \n            \n                            \n                                \n                                        \n                                            \n                                        \n                                    getHistogramValues(histogram: Histogram)\n                                \n                            \n            \n                            \n                                \n                                        Gets the values for the specified {Histogram} metric.\n            \n                                        \n                                                Parameters :\n                                                \n                                                        \n                                                            \n                                                                histogram\n                                                                    :     Histogram\n            \n                                                            \n                                                            \n                                                                \n                                                            \n                                                        \n                                                \n                                        \n                                        \n                                            Returns:     {}\n            \n                                        \n                                            \n                                                * \n            \n                                            \n                                \n                            \n                        \n                    \n                    \n                        \n                            \n                                \n                                    Public getMeterValues\n                                \n                            \n            \n                            \n                                \n                                        \n                                            \n                                        \n                                    getMeterValues(meter: Meter)\n                                \n                            \n            \n                            \n                                \n                                        Gets the values for the specified {Meter} metric.\n            \n                                        \n                                                Parameters :\n                                                \n                                                        \n                                                            \n                                                                meter\n                                                                    :     Meter\n            \n                                                            \n                                                            \n                                                                \n                                                            \n                                                        \n                                                \n                                        \n                                        \n                                            Returns:     {}\n            \n                                        \n                                            \n                                                * \n            \n                                            \n                                \n                            \n                        \n                    \n                    \n                        \n                            \n                                \n                                    Public getTimerValues\n                                \n                            \n            \n                            \n                                \n                                        \n                                            \n                                        \n                                    getTimerValues(timer: Timer)\n                                \n                            \n            \n                            \n                                \n                                        Gets the values for the specified {Timer} metric.\n            \n                                        \n                                                Parameters :\n                                                \n                                                        \n                                                            \n                                                                timer\n                                                                    :     Timer\n            \n                                                            \n                                                            \n                                                                \n                                                            \n                                                        \n                                                \n                                        \n                                        \n                                            Returns:     {}\n            \n                                        \n                                            \n                                                * \n            \n                                            \n                                \n                            \n                        \n                    \n                    \n                        \n                            \n                                \n                                    Private getNumber\n                                \n                            \n            \n                            \n                                \n                                        \n                                            \n                                        \n                                    getNumber(value: number)\n                                \n                            \n            \n                            \n                                \n                                        Either gets 0 or the specifed value.\n            \n                                        \n                                                Parameters :\n                                                \n                                                        \n                                                            \n                                                                value\n                                                            \n                                                            \n                                                                \n                                                            \n                                                        \n                                                \n                                        \n                                        \n                                            Returns:     number\n            \n                                        \n                                            \n                                                * \n            \n                                            \n                                \n                            \n                        \n                    \n                    \n                        \n                            \n                                \n                                    Public getLog\n                                \n                            \n            \n                            \n                                \n                                        \n                                            \n                                        \n                                    getLog()\n                                \n                            \n            \n                            \n                                \n                                        Gets the logger instance.\n            \n                                        \n                                        \n                                        \n                                            Returns:     Logger\n            \n                                        \n                                            \n                                                * \n            \n                                            \n                                \n                            \n                        \n                    \n                    \n                        \n                            \n                                \n                                    Public setLog\n                                \n                            \n            \n                            \n                                \n                                        \n                                            \n                                        \n                                    setLog(log: Logger)\n                                \n                            \n            \n                            \n                                \n                                        Sets the logger instance.\n            \n                                        \n                                                Parameters :\n                                                \n                                                        \n                                                            \n                                                                log\n                                                                    :     Logger\n            \n                                                            \n                                                            \n                                                                \n                                                            \n                                                        \n                                                \n                                        \n                                        \n                                            Returns:     void\n            \n                                        \n                                            \n                                                \n                                            \n                                \n                            \n                        \n                    \n                    \n                        \n                            \n                                \n                                    Public reportEvent\n                                \n                            \n            \n                            \n                                \n                                        \n                                            \n                                        \n                                    reportEvent(event: TEvent)\n                                \n                            \n            \n                            \n                                \n                                        Reports an {@link Event}.\n            \n                                        \n                                                Parameters :\n                                                \n                                                        \n                                                            \n                                                                event\n                                                                    :     Event\n            \n                                                            \n                                                            \n                                                                \n                                                            \n                                                        \n                                                \n                                        \n                                        \n                                            Returns:     any\n            \n                                        \n                                            \n                                                * \n            \n                                            \n                                \n                            \n                        \n                    \n                    \n                        \n                            \n                                \n                                    Public flushEvents\n                                \n                            \n            \n                            \n                                \n                                        \n                                            \n                                        \n                                    flushEvents()\n                                \n                            \n            \n                            \n                                \n                                        Does nothing\n            \n                                        \n                                        \n                                        \n                                            Returns:     any\n            \n                                        \n                                            \n                                                * \n            \n                                            \n                                \n                            \n                        \n                    \n                    \n                        \n                            \n                                \n                                    Protected handleResults\n                                \n                            \n            \n                            \n                                \n                                        \n                                            \n                                        \n                                    handleResults(ctx: OverallReportContext, registry: MetricRegistry, date: Date, type: MetricType, results: ReportingResult[])\n                                \n                            \n            \n                            \n                                \n                                        Send the combinations of index and document to the elasticsearch clusterusing the bulk method of the elasticsearch client.\n            \n                                        \n                                                Parameters :\n                                                \n                                                        \n                                                            \n                                                                registry\n                                                                    :     MetricRegistry\n            \n                                                            \n                                                            \n                                                                \n                                                            \n                                                        \n                                                        \n                                                            \n                                                                date\n                                                                    :     Date\n            \n                                                            \n                                                            \n                                                                \n                                                            \n                                                        \n                                                        \n                                                            \n                                                                type\n                                                                    :     MetricType\n            \n                                                            \n                                                            \n                                                                \n                                                            \n                                                        \n                                                        \n                                                            \n                                                                results\n                                                                    :     Array\n            \n                                                            \n                                                            \n                                                                \n                                                            \n                                                        \n                                                \n                                        \n                                        \n                                            Returns:     any\n            \n                                        \n                                            \n                                                * \n            \n                                            \n                                \n                            \n                        \n                    \n                    \n                        \n                            \n                                \n                                    Protected reportMetric\n                                \n                            \n            \n                            \n                                \n                                        \n                                            \n                                        \n                                    reportMetric(metric: Metric, ctx: MetricSetReportContext)\n                                \n                            \n            \n                            \n                                \n                                        Generalized reporting method of all types of metric instances.Builds the index configuration document and the metric document.\n            \n                                        \n                                                Parameters :\n                                                \n                                                        \n                                                            \n                                                                metric\n                                                                    :     Metric\n            \n                                                            \n                                                            \n                                                                \n                                                            \n                                                        \n                                                        \n                                                            \n                                                                ctx\n                                                                    :     ReportingContext\n            \n                                                            \n                                                            \n                                                                \n                                                            \n                                                        \n                                                \n                                        \n                                        \n                                            Returns:     {}\n            \n                                        \n                                            \n                                                * \n            \n                                            \n                                \n                            \n                        \n                    \n                    \n                        \n                            \n                                \n                                    Protected reportCounter\n                                \n                            \n            \n                            \n                                \n                                        \n                                            \n                                        \n                                    reportCounter(counter: MonotoneCounter | Counter, ctx: MetricSetReportContext)\n                                \n                            \n            \n                            \n                                \n                                        Calls {@link #reportMetric} with the specified arguments.>)} ctx\n            \n                                        \n                                                Parameters :\n                                                \n                                                        \n                                                            \n                                                                counter\n                                                            \n                                                            \n                                                                \n                                                            \n                                                        \n                                                \n                                        \n                                        \n                                            Returns:     {}\n            \n                                        \n                                            \n                                                * \n            \n                                            \n                                \n                            \n                        \n                    \n                    \n                        \n                            \n                                \n                                    Protected reportGauge\n                                \n                            \n            \n                            \n                                \n                                        \n                                            \n                                        \n                                    reportGauge(gauge: Gauge, ctx: MetricSetReportContext>)\n                                \n                            \n            \n                            \n                                \n                                        Calls {@link #reportMetric} with the specified arguments.\n            \n                                        \n                                                Parameters :\n                                                \n                                                        \n                                                            \n                                                                gauge\n                                                                    :     Gauge\n            \n                                                            \n                                                            \n                                                                \n                                                            \n                                                        \n                                                        \n                                                            \n                                                                ctx\n                                                                    :     ReportingContext\n            \n                                                            \n                                                            \n                                                                \n                                                            \n                                                        \n                                                \n                                        \n                                        \n                                            Returns:     {}\n            \n                                        \n                                            \n                                                * \n            \n                                            \n                                \n                            \n                        \n                    \n                    \n                        \n                            \n                                \n                                    Protected reportHistogram\n                                \n                            \n            \n                            \n                                \n                                        \n                                            \n                                        \n                                    reportHistogram(histogram: Histogram, ctx: MetricSetReportContext)\n                                \n                            \n            \n                            \n                                \n                                        Calls {@link #reportMetric} with the specified arguments.\n            \n                                        \n                                                Parameters :\n                                                \n                                                        \n                                                            \n                                                                histogram\n                                                                    :     Histogram\n            \n                                                            \n                                                            \n                                                                \n                                                            \n                                                        \n                                                        \n                                                            \n                                                                ctx\n                                                                    :     ReportingContext\n            \n                                                            \n                                                            \n                                                                \n                                                            \n                                                        \n                                                \n                                        \n                                        \n                                            Returns:     {}\n            \n                                        \n                                            \n                                                * \n            \n                                            \n                                \n                            \n                        \n                    \n                    \n                        \n                            \n                                \n                                    Protected reportMeter\n                                \n                            \n            \n                            \n                                \n                                        \n                                            \n                                        \n                                    reportMeter(meter: Meter, ctx: MetricSetReportContext)\n                                \n                            \n            \n                            \n                                \n                                        Calls {@link #reportMetric} with the specified arguments.\n            \n                                        \n                                                Parameters :\n                                                \n                                                        \n                                                            \n                                                                meter\n                                                                    :     Meter\n            \n                                                            \n                                                            \n                                                                \n                                                            \n                                                        \n                                                        \n                                                            \n                                                                ctx\n                                                                    :     ReportingContext\n            \n                                                            \n                                                            \n                                                                \n                                                            \n                                                        \n                                                \n                                        \n                                        \n                                            Returns:     {}\n            \n                                        \n                                            \n                                                * \n            \n                                            \n                                \n                            \n                        \n                    \n                    \n                        \n                            \n                                \n                                    Protected reportTimer\n                                \n                            \n            \n                            \n                                \n                                        \n                                            \n                                        \n                                    reportTimer(timer: Timer, ctx: MetricSetReportContext)\n                                \n                            \n            \n                            \n                                \n                                        Calls {@link #reportMetric} with the specified arguments.\n            \n                                        \n                                                Parameters :\n                                                \n                                                        \n                                                            \n                                                                timer\n                                                                    :     Timer\n            \n                                                            \n                                                            \n                                                                \n                                                            \n                                                        \n                                                        \n                                                            \n                                                                ctx\n                                                                    :     ReportingContext\n            \n                                                            \n                                                            \n                                                                \n                                                            \n                                                        \n                                                \n                                        \n                                        \n                                            Returns:     {}\n            \n                                        \n                                            \n                                                * \n            \n                                            \n                                \n                            \n                        \n                    \n            \n\n\n            \n                Properties\n                    \n                        \n                            \n                                \n                                    Private exchange\n                                \n                            \n                            \n                                \n                                    exchange:     Exchange\n            \n                                \n                            \n                            \n                                \n                                    RabbitMQ exchange used to do reporting.\n            \n                                \n                            \n                        \n                    \n                    \n                        \n                            \n                                \n                                    Private logMetadata\n                                \n                            \n                            \n                                \n                                    logMetadata:     any\n            \n                                \n                            \n                            \n                                \n                                    Metadata for the logger.\n            \n                                \n                            \n                        \n                    \n            \n    \n    \n        import \"source-map-support/register\";\r\n\r\nimport * as Amqp from \"amqp-ts\";\r\nimport {\r\n    Clock,\r\n    Counter,\r\n    Event,\r\n    Gauge,\r\n    Histogram,\r\n    Logger,\r\n    Meter,\r\n    Metric,\r\n    MetricRegistry,\r\n    MetricSetReportContext,\r\n    MetricType,\r\n    MILLISECOND,\r\n    MonotoneCounter,\r\n    OverallReportContext,\r\n    ReportingResult,\r\n    ScheduledMetricReporter,\r\n    ScheduledMetricReporterOptions,\r\n    Scheduler,\r\n    StdClock,\r\n    Tags,\r\n    Timer,\r\n    TimeUnit,\r\n} from \"inspector-metrics\";\r\n\r\nconst connection = new Amqp.Connection(\"amqp://localhost\");\r\nconst exchange = connection.declareExchange(\"ExchangeName\");\r\nconst queue = connection.declareQueue(\"QueueName\");\r\nqueue.bind(exchange);\r\nqueue.activateConsumer((message) => {\r\n    console.log(\"Message received: \" + message.getContent());\r\n});\r\n\r\nexport interface RabbitMqMetricReporterOptions extends ScheduledMetricReporterOptions {\r\n    /**\r\n     * Logger instance used to report errors.\r\n     *\r\n     * @type {Logger}\r\n     * @memberof RabbitMqMetricReporterOptions\r\n     */\r\n    log: Logger;\r\n\r\n    // TO DO: COMMENT\r\n    connection: string;\r\n    exchangeName: string;\r\n    queueName: string;\r\n}\r\n\r\nexport class RabbitMqMetricReporter extends ScheduledMetricReporter {\r\n    /**\r\n     * Gets the values for the specified monotone counter metric.\r\n     *\r\n     * @static\r\n     * @param {MonotoneCounter} counter\r\n     * @returns {{}}\r\n     * @memberof RabbitMqMetricReporter\r\n     */\r\n    public static getMonotoneCounterValues(counter: MonotoneCounter): {} {\r\n        const count = counter.getCount();\r\n        if (!count || isNaN(count)) {\r\n            return null;\r\n        }\r\n        return { count };\r\n    }\r\n\r\n    /**\r\n     * Gets the values for the specified counter metric.\r\n     *\r\n     * @static\r\n     * @param {Counter} counter\r\n     * @returns {{}}\r\n     * @memberof RabbitMqMetricReporter\r\n     */\r\n    public static getCounterValues(counter: Counter): {} {\r\n        const count = counter.getCount();\r\n        if (!count || isNaN(count)) {\r\n            return null;\r\n        }\r\n        return { count };\r\n    }\r\n\r\n    /**\r\n     * Gets the values for the specified {Gauge} metric.\r\n     *\r\n     * @static\r\n     * @param {Gauge} gauge\r\n     * @returns {{}}\r\n     * @memberof RabbitMqMetricReporter\r\n     */\r\n    public static getGaugeValue(gauge: Gauge): {} {\r\n        const value = gauge.getValue();\r\n        if ((!value && value !== 0) || Number.isNaN(value)) {\r\n            return null;\r\n        }\r\n        if (typeof value === \"object\") {\r\n            return value;\r\n        }\r\n        return { value };\r\n    }\r\n\r\n    /**\r\n     * Gets the values for the specified {Histogram} metric.\r\n     *\r\n     * @static\r\n     * @param {Histogram} histogram\r\n     * @returns {{}}\r\n     * @memberof RabbitMqMetricReporter\r\n     */\r\n    public static getHistogramValues(histogram: Histogram): {} {\r\n        const value = histogram.getCount();\r\n        if (!value || isNaN(value)) {\r\n            return null;\r\n        }\r\n        const snapshot = histogram.getSnapshot();\r\n        const values: any = {};\r\n\r\n        values[`count`] = value;\r\n        values[`max`] = this.getNumber(snapshot.getMax());\r\n        values[`mean`] = this.getNumber(snapshot.getMean());\r\n        values[`min`] = this.getNumber(snapshot.getMin());\r\n        values[`p50`] = this.getNumber(snapshot.getMedian());\r\n        values[`p75`] = this.getNumber(snapshot.get75thPercentile());\r\n        values[`p95`] = this.getNumber(snapshot.get95thPercentile());\r\n        values[`p98`] = this.getNumber(snapshot.get98thPercentile());\r\n        values[`p99`] = this.getNumber(snapshot.get99thPercentile());\r\n        values[`p999`] = this.getNumber(snapshot.get999thPercentile());\r\n        values[`stddev`] = this.getNumber(snapshot.getStdDev());\r\n\r\n        return values;\r\n    }\r\n\r\n    /**\r\n     * Gets the values for the specified {Meter} metric.\r\n     *\r\n     * @static\r\n     * @param {Meter} meter\r\n     * @returns {{}}\r\n     * @memberof RabbitMqMetricReporter\r\n     */\r\n    public static getMeterValues(meter: Meter): {} {\r\n        const value = meter.getCount();\r\n        if (!value || isNaN(value)) {\r\n            return null;\r\n        }\r\n        const values: any = {};\r\n\r\n        values[`count`] = value;\r\n        values[`m15_rate`] = this.getNumber(meter.get15MinuteRate());\r\n        values[`m1_rate`] = this.getNumber(meter.get1MinuteRate());\r\n        values[`m5_rate`] = this.getNumber(meter.get5MinuteRate());\r\n        values[`mean_rate`] = this.getNumber(meter.getMeanRate());\r\n\r\n        return values;\r\n    }\r\n\r\n    /**\r\n     * Gets the values for the specified {Timer} metric.\r\n     *\r\n     * @static\r\n     * @param {Timer} timer\r\n     * @returns {{}}\r\n     * @memberof RabbitMqMetricReporter\r\n     */\r\n    public static getTimerValues(timer: Timer): {} {\r\n        const value = timer.getCount();\r\n        if (!value || isNaN(value)) {\r\n            return null;\r\n        }\r\n        const snapshot = timer.getSnapshot();\r\n        const values: any = {};\r\n\r\n        values[`count`] = value;\r\n        values[`m15_rate`] = this.getNumber(timer.get15MinuteRate());\r\n        values[`m1_rate`] = this.getNumber(timer.get1MinuteRate());\r\n        values[`m5_rate`] = this.getNumber(timer.get5MinuteRate());\r\n        values[`max`] = this.getNumber(snapshot.getMax());\r\n        values[`mean`] = this.getNumber(snapshot.getMean());\r\n        values[`mean_rate`] = this.getNumber(timer.getMeanRate());\r\n        values[`min`] = this.getNumber(snapshot.getMin());\r\n        values[`p50`] = this.getNumber(snapshot.getMedian());\r\n        values[`p75`] = this.getNumber(snapshot.get75thPercentile());\r\n        values[`p95`] = this.getNumber(snapshot.get95thPercentile());\r\n        values[`p98`] = this.getNumber(snapshot.get98thPercentile());\r\n        values[`p99`] = this.getNumber(snapshot.get99thPercentile());\r\n        values[`p999`] = this.getNumber(snapshot.get999thPercentile());\r\n        values[`stddev`] = this.getNumber(snapshot.getStdDev());\r\n\r\n        return values;\r\n    }\r\n\r\n    /**\r\n     * Either gets 0 or the specifed value.\r\n     *\r\n     * @private\r\n     * @param {number} value\r\n     * @returns {number}\r\n     * @memberof RabbitMqMetricReporter\r\n     */\r\n    private static getNumber(value: number): number {\r\n        if (isNaN(value)) {\r\n            return 0;\r\n        }\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Metadata for the logger.\r\n     *\r\n     * @private\r\n     * @type {*}\r\n     * @memberof RabbitMqMetricReporter\r\n     */\r\n    private logMetadata: any;\r\n\r\n    /**\r\n     * RabbitMQ exchange used to do reporting.\r\n     *\r\n     * @private\r\n     * @type {Amqp.Exchange}\r\n     * @memberof RabbitMqMetricReporter\r\n     */\r\n    private exchange: Amqp.Exchange;\r\n\r\n\r\n    /**\r\n     * Creates an instance of RabbitMqMetricReporter.\r\n     */\r\n    public constructor(\r\n        {\r\n            connection,\r\n            exchangeName,\r\n            queueName,\r\n            log = console,\r\n            reportInterval = 1000,\r\n            unit = MILLISECOND,\r\n            clock = new StdClock(),\r\n            scheduler = setInterval,\r\n            minReportingTimeout = 1,\r\n            tags = new Map(),\r\n        }: {\r\n            /**\r\n             * RabbitMQ connection URI.\r\n             * @type {string}\r\n             */\r\n            connection: string,\r\n            /**\r\n             * RabbitMQ exchange name.\r\n             * @type {string}\r\n             */\r\n            exchangeName: string,\r\n            /**\r\n             * RabbitMQ queue name.\r\n             * @type {string}\r\n             */\r\n            queueName: string,\r\n            /**\r\n             * The logger instance used to report metrics.\r\n             * @type {Logger}\r\n             */\r\n            log?: Logger,\r\n            /**\r\n             * Reporting interval in the time-unit of {@link #unit}.\r\n             * @type {number}\r\n             */\r\n            reportInterval?: number;\r\n            /**\r\n             * The time-unit of the reporting interval.\r\n             * @type {TimeUnit}\r\n             */\r\n            unit?: TimeUnit;\r\n            /**\r\n             * The clock instance used determine the current time.\r\n             * @type {Clock}\r\n             */\r\n            clock?: Clock;\r\n            /**\r\n             * The scheduler function used to trigger reporting.\r\n             * @type {Scheduler}\r\n             */\r\n            scheduler?: Scheduler;\r\n            /**\r\n             * The timeout in which a metrics gets reported wether it's value has changed or not.\r\n             * @type {number}\r\n             */\r\n            minReportingTimeout?: number;\r\n            /**\r\n             * Common tags for this reporter instance.\r\n             * @type {Map}\r\n             */\r\n            tags?: Map;\r\n        }) {\r\n        super({\r\n            connection,\r\n            exchangeName,\r\n            queueName,\r\n            clock,\r\n            log,\r\n            minReportingTimeout,\r\n            reportInterval,\r\n            scheduler,\r\n            tags,\r\n            unit,\r\n        });\r\n\r\n        this.logMetadata = {\r\n            reportInterval,\r\n            tags,\r\n            unit,\r\n        };\r\n\r\n        const amqpConnection = new Amqp.Connection(connection);\r\n        const queue = amqpConnection.declareQueue(queueName);\r\n        this.exchange = amqpConnection.declareExchange(exchangeName);\r\n        queue.bind(this.exchange);\r\n    }\r\n\r\n    /**\r\n     * Gets the logger instance.\r\n     *\r\n     * @returns {Logger}\r\n     * @memberof RabbitMqMetricReporter\r\n     */\r\n    public getLog(): Logger {\r\n        return this.options.log;\r\n    }\r\n\r\n    /**\r\n     * Sets the logger instance.\r\n     *\r\n     * @param {Logger} log\r\n     * @memberof RabbitMqMetricReporter\r\n     */\r\n    public setLog(log: Logger): void {\r\n        this.options.log = log;\r\n    }\r\n\r\n    /**\r\n     * Reports an {@link Event}.\r\n     *\r\n     * @param {Event} event\r\n     * @returns {Promise}\r\n     * @memberof RabbitMqMetricReporter\r\n     */\r\n    public async reportEvent>(event: TEvent): Promise {\r\n        const result = this.reportGauge(event, {\r\n            date: event.getTime(),\r\n            metrics: [],\r\n            overallCtx: null,\r\n            registry: null,\r\n            type: \"gauge\",\r\n        });\r\n\r\n        if (result) {\r\n            await this.handleResults(null, null, event.getTime(), \"gauge\", [{\r\n                metric: event,\r\n                result,\r\n            }]);\r\n        }\r\n\r\n        return event;\r\n    }\r\n\r\n    /**\r\n     * Does nothing\r\n     *\r\n     * @returns {Promise}\r\n     * @memberof RabbitMqMetricReporter\r\n     */\r\n    public async flushEvents(): Promise {\r\n    }\r\n\r\n    /**\r\n     * Send the combinations of index and document to the elasticsearch cluster\r\n     * using the bulk method of the elasticsearch client.\r\n     *\r\n     * @protected\r\n     * @param {MetricRegistry} registry\r\n     * @param {Date} date\r\n     * @param {MetricType} type\r\n     * @param {Array>} results\r\n     * @returns {Promise}\r\n     * @memberof RabbitMqMetricReporter\r\n     */\r\n    protected handleResults(\r\n        ctx: OverallReportContext,\r\n        registry: MetricRegistry,\r\n        date: Date,\r\n        type: MetricType,\r\n        results: Array>\r\n    ): Promise {\r\n        const message = new Amqp.Message(JSON.stringify(results));\r\n\r\n        this.exchange.send(message);\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    /**\r\n     * Generalized reporting method of all types of metric instances.\r\n     * Builds the index configuration document and the metric document.\r\n     *\r\n     * @protected\r\n     * @param {Metric} metric\r\n     * @param {ReportingContext} ctx\r\n     * @returns {{}}\r\n     * @memberof RabbitMqMetricReporter\r\n     */\r\n    protected reportMetric(metric: Metric, ctx: MetricSetReportContext): {} {\r\n        let values = null;\r\n        if (metric instanceof MonotoneCounter) {\r\n            values = RabbitMqMetricReporter.getMonotoneCounterValues(metric);\r\n        } else if (metric instanceof Counter) {\r\n            values = RabbitMqMetricReporter.getCounterValues(metric);\r\n        } else if (metric instanceof Histogram) {\r\n            values = RabbitMqMetricReporter.getHistogramValues(metric);\r\n        } else if (metric instanceof Meter) {\r\n            values = RabbitMqMetricReporter.getMeterValues(metric);\r\n        } else if (metric instanceof Timer) {\r\n            values = RabbitMqMetricReporter.getTimerValues(metric);\r\n        } else {\r\n            values = RabbitMqMetricReporter.getGaugeValue(metric as Gauge);\r\n        }\r\n\r\n        const name = metric.getName();\r\n        const group = metric.getGroup();\r\n        const tags = this.buildTags(ctx.registry, metric);\r\n        const timestamp = ctx.date;\r\n        const type = ctx.type;\r\n\r\n        return { name, group, tags, timestamp, values, type };\r\n    }\r\n\r\n    /**\r\n     * Calls {@link #reportMetric} with the specified arguments.\r\n     *\r\n     * @protected\r\n     * @param {(MonotoneCounter | Counter)} counter\r\n     * @param {(ReportingContext)} ctx\r\n     * @returns {{}}\r\n     * @memberof RabbitMqMetricReporter\r\n     */\r\n    protected reportCounter(\r\n        counter: MonotoneCounter | Counter, ctx: MetricSetReportContext): {} {\r\n        return this.reportMetric(counter, ctx);\r\n    }\r\n\r\n    /**\r\n     * Calls {@link #reportMetric} with the specified arguments.\r\n     *\r\n     * @protected\r\n     * @param {Gauge} gauge\r\n     * @param {ReportingContext>} ctx\r\n     * @returns {{}}\r\n     * @memberof RabbitMqMetricReporter\r\n     */\r\n    protected reportGauge(gauge: Gauge, ctx: MetricSetReportContext>): {} {\r\n        return this.reportMetric(gauge, ctx);\r\n    }\r\n\r\n    /**\r\n     * Calls {@link #reportMetric} with the specified arguments.\r\n     *\r\n     * @protected\r\n     * @param {Histogram} histogram\r\n     * @param {ReportingContext} ctx\r\n     * @returns {{}}\r\n     * @memberof RabbitMqMetricReporter\r\n     */\r\n    protected reportHistogram(histogram: Histogram, ctx: MetricSetReportContext): {} {\r\n        return this.reportMetric(histogram, ctx);\r\n    }\r\n\r\n    /**\r\n     * Calls {@link #reportMetric} with the specified arguments.\r\n     *\r\n     * @protected\r\n     * @param {Meter} meter\r\n     * @param {ReportingContext} ctx\r\n     * @returns {{}}\r\n     * @memberof RabbitMqMetricReporter\r\n     */\r\n    protected reportMeter(meter: Meter, ctx: MetricSetReportContext): {} {\r\n        return this.reportMetric(meter, ctx);\r\n    }\r\n\r\n    /**\r\n     * Calls {@link #reportMetric} with the specified arguments.\r\n     *\r\n     * @protected\r\n     * @param {Timer} timer\r\n     * @param {ReportingContext} ctx\r\n     * @returns {{}}\r\n     * @memberof RabbitMqMetricReporter\r\n     */\r\n    protected reportTimer(timer: Timer, ctx: MetricSetReportContext): {} {\r\n        return this.reportMetric(timer, ctx);\r\n    }\r\n}\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"/miscellaneous.html":{"url":"/miscellaneous.html","title":"miscellaneous - miscellaneous","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n\n\n    \n        Variables\n            \n                \n                    \n                        \n                             connection\n                        \n                    \n                    \n                        \n                            connection:     \n    \n                        \n                    \n                \n            \n            \n                \n                    \n                        \n                             exchange\n                        \n                    \n                    \n                        \n                            exchange:     \n    \n                        \n                    \n                \n            \n            \n                \n                    \n                        \n                             queue\n                        \n                    \n                    \n                        \n                            queue:     \n    \n                        \n                    \n                \n            \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"/coverage.html":{"url":"/coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Documentation coverage \n\n\n\n    Project\n    100%\n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                lib/metrics/RabbitMqMetricReporter.ts\n            \n            \n                classe\n            \n            \n                RabbitMqMetricReporter\n            \n            \n                100 %\n                (20/20)\n            \n        \n    \n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
